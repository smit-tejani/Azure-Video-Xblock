/* Javascript for VideoPlayerXBlock. */
function AzureVideoplayerXblock(runtime, element) {

    var almVideoPlayer = function(e) {
        "use strict";
        var t = function() {
            t = Object.assign || function e(t) {
                for (var i, r = 1, n = arguments.length; r < n; r++) {
                    i = arguments[r];
                    for (var a in i)
                        if (Object.prototype.hasOwnProperty.call(i, a)) t[a] = i[a]
                }
                return t
            };
            return t.apply(this, arguments)
        };
        var i = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};

        function r(e) {
            return e && e.__esModule && Object.prototype.hasOwnProperty.call(e, "default") ? e["default"] : e
        }

        function n(e, t) {
            return t = {
                exports: {}
            }, e(t, t.exports), t.exports
        }
        var a;
        if (typeof window !== "undefined") {
            a = window
        } else if (typeof i !== "undefined") {
            a = i
        } else if (typeof self !== "undefined") {
            a = self
        } else {
            a = {}
        }
        var s = a;
        var o = Array.prototype.slice;
        var u = l;

        function l(e, t) {
            if (!("length" in e)) {
                e = [e]
            }
            e = o.call(e);
            while (e.length) {
                var i = e.shift(),
                    r = t(i);
                if (r) {
                    return r
                }
                if (i.childNodes && i.childNodes.length) {
                    e = o.call(i.childNodes).concat(e)
                }
            }
        }
        var c = f;

        function f(e, t) {
            if (!(this instanceof f)) {
                return new f(e, t)
            }
            this.data = e;
            this.nodeValue = e;
            this.length = e.length;
            this.ownerDocument = t || null
        }
        f.prototype.nodeType = 8;
        f.prototype.nodeName = "#comment";
        f.prototype.toString = function e() {
            return "[object Comment]"
        };
        var d = h;

        function h(e, t) {
            if (!(this instanceof h)) {
                return new h(e)
            }
            this.data = e || "";
            this.length = this.data.length;
            this.ownerDocument = t || null
        }
        h.prototype.type = "DOMTextNode";
        h.prototype.nodeType = 3;
        h.prototype.nodeName = "#text";
        h.prototype.toString = function e() {
            return this.data
        };
        h.prototype.replaceData = function e(t, i, r) {
            var n = this.data;
            var a = n.substring(0, t);
            var s = n.substring(t + i, n.length);
            this.data = a + r + s;
            this.length = this.data.length
        };
        var p = m;

        function m(e) {
            var t = this;
            var i = e.type;
            if (!e.target) {
                e.target = t
            }
            if (!t.listeners) {
                t.listeners = {}
            }
            var r = t.listeners[i];
            if (r) {
                return r.forEach((function(i) {
                    e.currentTarget = t;
                    if (typeof i === "function") {
                        i(e)
                    } else {
                        i.handleEvent(e)
                    }
                }))
            }
            if (t.parentNode) {
                t.parentNode.dispatchEvent(e)
            }
        }
        var v = g;

        function g(e, t) {
            var i = this;
            if (!i.listeners) {
                i.listeners = {}
            }
            if (!i.listeners[e]) {
                i.listeners[e] = []
            }
            if (i.listeners[e].indexOf(t) === -1) {
                i.listeners[e].push(t)
            }
        }
        var y = _;

        function _(e, t) {
            var i = this;
            if (!i.listeners) {
                return
            }
            if (!i.listeners[e]) {
                return
            }
            var r = i.listeners[e];
            var n = r.indexOf(t);
            if (n !== -1) {
                r.splice(n, 1)
            }
        }
        var b = S;
        var T = ["area", "base", "br", "col", "embed", "hr", "img", "input", "keygen", "link", "menuitem", "meta", "param", "source", "track", "wbr"];

        function S(e) {
            switch (e.nodeType) {
                case 3:
                    return x(e.data);
                case 8:
                    return "\x3c!--" + e.data + "--\x3e";
                default:
                    return E(e)
            }
        }

        function E(e) {
            var t = [];
            var i = e.tagName;
            if (e.namespaceURI === "http://www.w3.org/1999/xhtml") {
                i = i.toLowerCase()
            }
            t.push("<" + i + A(e) + C(e));
            if (T.indexOf(i) > -1) {
                t.push(" />")
            } else {
                t.push(">");
                if (e.childNodes.length) {
                    t.push.apply(t, e.childNodes.map(S))
                } else if (e.textContent || e.innerText) {
                    t.push(x(e.textContent || e.innerText))
                } else if (e.innerHTML) {
                    t.push(e.innerHTML)
                }
                t.push("</" + i + ">")
            }
            return t.join("")
        }

        function w(e, t) {
            var i = typeof e[t];
            if (t === "style" && Object.keys(e.style).length > 0) {
                return true
            }
            return e.hasOwnProperty(t) && (i === "string" || i === "boolean" || i === "number") && t !== "nodeName" && t !== "className" && t !== "tagName" && t !== "textContent" && t !== "innerText" && t !== "namespaceURI" && t !== "innerHTML"
        }

        function k(e) {
            if (typeof e === "string") return e;
            var t = "";
            Object.keys(e).forEach((function(i) {
                var r = e[i];
                i = i.replace(/[A-Z]/g, (function(e) {
                    return "-" + e.toLowerCase()
                }));
                t += i + ":" + r + ";"
            }));
            return t
        }

        function C(e) {
            var t = e.dataset;
            var i = [];
            for (var r in t) {
                i.push({
                    name: "data-" + r,
                    value: t[r]
                })
            }
            return i.length ? I(i) : ""
        }

        function I(e) {
            var t = [];
            e.forEach((function(e) {
                var i = e.name;
                var r = e.value;
                if (i === "style") {
                    r = k(r)
                }
                t.push(i + "=" + '"' + P(r) + '"')
            }));
            return t.length ? " " + t.join(" ") : ""
        }

        function A(e) {
            var t = [];
            for (var i in e) {
                if (w(e, i)) {
                    t.push({
                        name: i,
                        value: e[i]
                    })
                }
            }
            for (var r in e._attributes) {
                for (var n in e._attributes[r]) {
                    var a = e._attributes[r][n];
                    var s = (a.prefix ? a.prefix + ":" : "") + n;
                    t.push({
                        name: s,
                        value: a.value
                    })
                }
            }
            if (e.className) {
                t.push({
                    name: "class",
                    value: e.className
                })
            }
            return t.length ? I(t) : ""
        }

        function x(e) {
            var t = "";
            if (typeof e === "string") {
                t = e
            } else if (e) {
                t = e.toString()
            }
            return t.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;")
        }

        function P(e) {
            return x(e).replace(/"/g, "&quot;")
        }
        var O = "http://www.w3.org/1999/xhtml";
        var D = L;

        function L(e, t, i) {
            if (!(this instanceof L)) {
                return new L(e)
            }
            var r = i === undefined ? O : i || null;
            this.tagName = r === O ? String(e).toUpperCase() : e;
            this.nodeName = this.tagName;
            this.className = "";
            this.dataset = {};
            this.childNodes = [];
            this.parentNode = null;
            this.style = {};
            this.ownerDocument = t || null;
            this.namespaceURI = r;
            this._attributes = {};
            if (this.tagName === "INPUT") {
                this.type = "text"
            }
        }
        L.prototype.type = "DOMElement";
        L.prototype.nodeType = 1;
        L.prototype.appendChild = function e(t) {
            if (t.parentNode) {
                t.parentNode.removeChild(t)
            }
            this.childNodes.push(t);
            t.parentNode = this;
            return t
        };
        L.prototype.replaceChild = function e(t, i) {
            if (t.parentNode) {
                t.parentNode.removeChild(t)
            }
            var r = this.childNodes.indexOf(i);
            i.parentNode = null;
            this.childNodes[r] = t;
            t.parentNode = this;
            return i
        };
        L.prototype.removeChild = function e(t) {
            var i = this.childNodes.indexOf(t);
            this.childNodes.splice(i, 1);
            t.parentNode = null;
            return t
        };
        L.prototype.insertBefore = function e(t, i) {
            if (t.parentNode) {
                t.parentNode.removeChild(t)
            }
            var r = i === null || i === undefined ? -1 : this.childNodes.indexOf(i);
            if (r > -1) {
                this.childNodes.splice(r, 0, t)
            } else {
                this.childNodes.push(t)
            }
            t.parentNode = this;
            return t
        };
        L.prototype.setAttributeNS = function e(t, i, r) {
            var n = null;
            var a = i;
            var s = i.indexOf(":");
            if (s > -1) {
                n = i.substr(0, s);
                a = i.substr(s + 1)
            }
            if (this.tagName === "INPUT" && i === "type") {
                this.type = r
            } else {
                var o = this._attributes[t] || (this._attributes[t] = {});
                o[a] = {
                    value: r,
                    prefix: n
                }
            }
        };
        L.prototype.getAttributeNS = function e(t, i) {
            var r = this._attributes[t];
            var n = r && r[i] && r[i].value;
            if (this.tagName === "INPUT" && i === "type") {
                return this.type
            }
            if (typeof n !== "string") {
                return null
            }
            return n
        };
        L.prototype.removeAttributeNS = function e(t, i) {
            var r = this._attributes[t];
            if (r) {
                delete r[i]
            }
        };
        L.prototype.hasAttributeNS = function e(t, i) {
            var r = this._attributes[t];
            return !!r && i in r
        };
        L.prototype.setAttribute = function e(t, i) {
            return this.setAttributeNS(null, t, i)
        };
        L.prototype.getAttribute = function e(t) {
            return this.getAttributeNS(null, t)
        };
        L.prototype.removeAttribute = function e(t) {
            return this.removeAttributeNS(null, t)
        };
        L.prototype.hasAttribute = function e(t) {
            return this.hasAttributeNS(null, t)
        };
        L.prototype.removeEventListener = y;
        L.prototype.addEventListener = v;
        L.prototype.dispatchEvent = p;
        L.prototype.focus = function e() {
            return void 0
        };
        L.prototype.toString = function e() {
            return b(this)
        };
        L.prototype.getElementsByClassName = function e(t) {
            var i = t.split(" ");
            var r = [];
            u(this, (function(e) {
                if (e.nodeType === 1) {
                    var t = e.className || "";
                    var n = t.split(" ");
                    if (i.every((function(e) {
                            return n.indexOf(e) !== -1
                        }))) {
                        r.push(e)
                    }
                }
            }));
            return r
        };
        L.prototype.getElementsByTagName = function e(t) {
            t = t.toLowerCase();
            var i = [];
            u(this.childNodes, (function(e) {
                if (e.nodeType === 1 && (t === "*" || e.tagName.toLowerCase() === t)) {
                    i.push(e)
                }
            }));
            return i
        };
        L.prototype.contains = function e(t) {
            return u(this, (function(e) {
                return t === e
            })) || false
        };
        var N = R;

        function R(e) {
            if (!(this instanceof R)) {
                return new R
            }
            this.childNodes = [];
            this.parentNode = null;
            this.ownerDocument = e || null
        }
        R.prototype.type = "DocumentFragment";
        R.prototype.nodeType = 11;
        R.prototype.nodeName = "#document-fragment";
        R.prototype.appendChild = D.prototype.appendChild;
        R.prototype.replaceChild = D.prototype.replaceChild;
        R.prototype.removeChild = D.prototype.removeChild;
        R.prototype.toString = function e() {
            return this.childNodes.map((function(e) {
                return String(e)
            })).join("")
        };
        var M = U;

        function U(e) {}
        U.prototype.initEvent = function e(t, i, r) {
            this.type = t;
            this.bubbles = i;
            this.cancelable = r
        };
        U.prototype.preventDefault = function e() {};
        var B = F;

        function F() {
            if (!(this instanceof F)) {
                return new F
            }
            this.head = this.createElement("head");
            this.body = this.createElement("body");
            this.documentElement = this.createElement("html");
            this.documentElement.appendChild(this.head);
            this.documentElement.appendChild(this.body);
            this.childNodes = [this.documentElement];
            this.nodeType = 9
        }
        var j = F.prototype;
        j.createTextNode = function e(t) {
            return new d(t, this)
        };
        j.createElementNS = function e(t, i) {
            var r = t === null ? null : String(t);
            return new D(i, this, r)
        };
        j.createElement = function e(t) {
            return new D(t, this)
        };
        j.createDocumentFragment = function e() {
            return new N(this)
        };
        j.createEvent = function e(t) {
            return new M
        };
        j.createComment = function e(t) {
            return new c(t, this)
        };
        j.getElementById = function e(t) {
            t = String(t);
            var i = u(this.childNodes, (function(e) {
                if (String(e.id) === t) {
                    return e
                }
            }));
            return i || null
        };
        j.getElementsByClassName = D.prototype.getElementsByClassName;
        j.getElementsByTagName = D.prototype.getElementsByTagName;
        j.contains = D.prototype.contains;
        j.removeEventListener = y;
        j.addEventListener = v;
        j.dispatchEvent = p;
        var H = new B;
        var q = typeof i !== "undefined" ? i : typeof window !== "undefined" ? window : {};
        var V;
        if (typeof document !== "undefined") {
            V = document
        } else {
            V = q["__GLOBAL_DOCUMENT_CACHE@4"];
            if (!V) {
                V = q["__GLOBAL_DOCUMENT_CACHE@4"] = H
            }
        }
        var W = V;
        var G = n((function(e) {
            function t() {
                e.exports = t = Object.assign ? Object.assign.bind() : function(e) {
                    for (var t = 1; t < arguments.length; t++) {
                        var i = arguments[t];
                        for (var r in i) {
                            if (Object.prototype.hasOwnProperty.call(i, r)) {
                                e[r] = i[r]
                            }
                        }
                    }
                    return e
                }, e.exports.__esModule = true, e.exports["default"] = e.exports;
                return t.apply(this, arguments)
            }
            e.exports = t, e.exports.__esModule = true, e.exports["default"] = e.exports
        }));
        var X = r(G);
        var z = n((function(e, t) {
            function i(e) {
                if (e && "object" === typeof e) {
                    var t = e.which || e.keyCode || e.charCode;
                    if (t) e = t
                }
                if ("number" === typeof e) return s[e];
                var i = String(e);
                var a = r[i.toLowerCase()];
                if (a) return a;
                var a = n[i.toLowerCase()];
                if (a) return a;
                if (i.length === 1) return i.charCodeAt(0);
                return undefined
            }
            i.isEventKey = function e(t, i) {
                if (t && "object" === typeof t) {
                    var a = t.which || t.keyCode || t.charCode;
                    if (a === null || a === undefined) {
                        return false
                    }
                    if (typeof i === "string") {
                        var s = r[i.toLowerCase()];
                        if (s) {
                            return s === a
                        }
                        var s = n[i.toLowerCase()];
                        if (s) {
                            return s === a
                        }
                    } else if (typeof i === "number") {
                        return i === a
                    }
                    return false
                }
            };
            t = e.exports = i;
            var r = t.code = t.codes = {
                backspace: 8,
                tab: 9,
                enter: 13,
                shift: 16,
                ctrl: 17,
                alt: 18,
                "pause/break": 19,
                "caps lock": 20,
                esc: 27,
                space: 32,
                "page up": 33,
                "page down": 34,
                end: 35,
                home: 36,
                left: 37,
                up: 38,
                right: 39,
                down: 40,
                insert: 45,
                delete: 46,
                command: 91,
                "left command": 91,
                "right command": 93,
                "numpad *": 106,
                "numpad +": 107,
                "numpad -": 109,
                "numpad .": 110,
                "numpad /": 111,
                "num lock": 144,
                "scroll lock": 145,
                "my computer": 182,
                "my calculator": 183,
                ";": 186,
                "=": 187,
                ",": 188,
                "-": 189,
                ".": 190,
                "/": 191,
                "`": 192,
                "[": 219,
                "\\": 220,
                "]": 221,
                "'": 222
            };
            var n = t.aliases = {
                windows: 91,
                "⇧": 16,
                "⌥": 18,
                "⌃": 17,
                "⌘": 91,
                ctl: 17,
                control: 17,
                option: 18,
                pause: 19,
                break: 19,
                caps: 20,
                return: 13,
                escape: 27,
                spc: 32,
                spacebar: 32,
                pgup: 33,
                pgdn: 34,
                ins: 45,
                del: 46,
                cmd: 91
            };
            for (a = 97; a < 123; a++) r[String.fromCharCode(a)] = a - 32;
            for (var a = 48; a < 58; a++) r[a - 48] = a;
            for (a = 1; a < 13; a++) r["f" + a] = a + 111;
            for (a = 0; a < 10; a++) r["numpad " + a] = a + 96;
            var s = t.names = t.title = {};
            for (a in r) s[r[a]] = a;
            for (var o in n) {
                r[o] = n[o]
            }
        }));
        z.code;
        z.codes;
        z.aliases;
        z.names;
        z.title;
        var K = n((function(e) {
            function t(e) {
                if (e === void 0) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
                }
                return e
            }
            e.exports = t, e.exports.__esModule = true, e.exports["default"] = e.exports
        }));
        var Y = r(K);
        var $ = n((function(e) {
            function t(i, r) {
                e.exports = t = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function e(t, i) {
                    t.__proto__ = i;
                    return t
                }, e.exports.__esModule = true, e.exports["default"] = e.exports;
                return t(i, r)
            }
            e.exports = t, e.exports.__esModule = true, e.exports["default"] = e.exports
        }));
        r($);
        var Q = n((function(e) {
            function t(e, t) {
                e.prototype = Object.create(t.prototype);
                e.prototype.constructor = e;
                $(e, t)
            }
            e.exports = t, e.exports.__esModule = true, e.exports["default"] = e.exports
        }));
        var J = r(Q);
        var Z = ee;

        function ee(e, t) {
            var i;
            var r = null;
            try {
                i = JSON.parse(e, t)
            } catch (e) {
                r = e
            }
            return [r, i]
        }
        var te = re;
        var ie = Object.prototype.toString;

        function re(e) {
            if (!e) {
                return false
            }
            var t = ie.call(e);
            return t === "[object Function]" || typeof e === "function" && t !== "[object RegExp]" || typeof window !== "undefined" && (e === window.setTimeout || e === window.alert || e === window.confirm || e === window.prompt)
        }
        var ne = function e(t, i) {
            if (i === void 0) {
                i = false
            }
            return function(e, r, n) {
                if (e) {
                    t(e);
                    return
                }
                if (r.statusCode >= 400 && r.statusCode <= 599) {
                    var a = n;
                    if (i) {
                        if (s.TextDecoder) {
                            var o = ae(r.headers && r.headers["content-type"]);
                            try {
                                a = new TextDecoder(o).decode(n)
                            } catch (e) {}
                        } else {
                            a = String.fromCharCode.apply(null, new Uint8Array(n))
                        }
                    }
                    t({
                        cause: a
                    });
                    return
                }
                t(null, n)
            }
        };

        function ae(e) {
            if (e === void 0) {
                e = ""
            }
            return e.toLowerCase().split(";").reduce((function(e, t) {
                var i = t.split("="),
                    r = i[0],
                    n = i[1];
                if (r.trim() === "charset") {
                    return n.trim()
                }
                return e
            }), "utf-8")
        }
        var se = ne;
        he.httpHandler = se;
        var oe = function e(t) {
            var i = {};
            if (!t) {
                return i
            }
            t.trim().split("\n").forEach((function(e) {
                var t = e.indexOf(":");
                var r = e.slice(0, t).trim().toLowerCase();
                var n = e.slice(t + 1).trim();
                if (typeof i[r] === "undefined") {
                    i[r] = n
                } else if (Array.isArray(i[r])) {
                    i[r].push(n)
                } else {
                    i[r] = [i[r], n]
                }
            }));
            return i
        };
        var ue = he;
        var le = he;
        he.XMLHttpRequest = s.XMLHttpRequest || ve;
        he.XDomainRequest = "withCredentials" in new he.XMLHttpRequest ? he.XMLHttpRequest : s.XDomainRequest;
        ce(["get", "put", "post", "patch", "head", "delete"], (function(e) {
            he[e === "delete" ? "del" : e] = function(t, i, r) {
                i = de(t, i, r);
                i.method = e.toUpperCase();
                return pe(i)
            }
        }));

        function ce(e, t) {
            for (var i = 0; i < e.length; i++) {
                t(e[i])
            }
        }

        function fe(e) {
            for (var t in e) {
                if (e.hasOwnProperty(t)) return false
            }
            return true
        }

        function de(e, t, i) {
            var r = e;
            if (te(t)) {
                i = t;
                if (typeof e === "string") {
                    r = {
                        uri: e
                    }
                }
            } else {
                r = G({}, t, {
                    uri: e
                })
            }
            r.callback = i;
            return r
        }

        function he(e, t, i) {
            t = de(e, t, i);
            return pe(t)
        }

        function pe(e) {
            if (typeof e.callback === "undefined") {
                throw new Error("callback argument missing")
            }
            var t = false;
            var i = function i(r, n, a) {
                if (!t) {
                    t = true;
                    e.callback(r, n, a)
                }
            };

            function r() {
                if (o.readyState === 4) {
                    setTimeout(s, 0)
                }
            }

            function n() {
                var e = undefined;
                if (o.response) {
                    e = o.response
                } else {
                    e = o.responseText || me(o)
                }
                if (m) {
                    try {
                        e = JSON.parse(e)
                    } catch (e) {}
                }
                return e
            }

            function a(e) {
                clearTimeout(v);
                if (!(e instanceof Error)) {
                    e = new Error("" + (e || "Unknown XMLHttpRequest Error"))
                }
                e.statusCode = 0;
                return i(e, g)
            }

            function s() {
                if (l) return;
                var t;
                clearTimeout(v);
                if (e.useXDR && o.status === undefined) {
                    t = 200
                } else {
                    t = o.status === 1223 ? 204 : o.status
                }
                var r = g;
                var a = null;
                if (t !== 0) {
                    r = {
                        body: n(),
                        statusCode: t,
                        method: f,
                        headers: {},
                        url: c,
                        rawRequest: o
                    };
                    if (o.getAllResponseHeaders) {
                        r.headers = oe(o.getAllResponseHeaders())
                    }
                } else {
                    a = new Error("Internal XMLHttpRequest Error")
                }
                return i(a, r, r.body)
            }
            var o = e.xhr || null;
            if (!o) {
                if (e.cors || e.useXDR) {
                    o = new he.XDomainRequest
                } else {
                    o = new he.XMLHttpRequest
                }
            }
            var u;
            var l;
            var c = o.url = e.uri || e.url;
            var f = o.method = e.method || "GET";
            var d = e.body || e.data;
            var h = o.headers = e.headers || {};
            var p = !!e.sync;
            var m = false;
            var v;
            var g = {
                body: undefined,
                headers: {},
                statusCode: 0,
                method: f,
                url: c,
                rawRequest: o
            };
            if ("json" in e && e.json !== false) {
                m = true;
                h["accept"] || h["Accept"] || (h["Accept"] = "application/json");
                if (f !== "GET" && f !== "HEAD") {
                    h["content-type"] || h["Content-Type"] || (h["Content-Type"] = "application/json");
                    d = JSON.stringify(e.json === true ? d : e.json)
                }
            }
            o.onreadystatechange = r;
            o.onload = s;
            o.onerror = a;
            o.onprogress = function() {};
            o.onabort = function() {
                l = true
            };
            o.ontimeout = a;
            o.open(f, c, !p, e.username, e.password);
            if (!p) {
                o.withCredentials = !!e.withCredentials
            }
            if (!p && e.timeout > 0) {
                v = setTimeout((function() {
                    if (l) return;
                    l = true;
                    o.abort("timeout");
                    var e = new Error("XMLHttpRequest timeout");
                    e.code = "ETIMEDOUT";
                    a(e)
                }), e.timeout)
            }
            if (o.setRequestHeader) {
                for (u in h) {
                    if (h.hasOwnProperty(u)) {
                        o.setRequestHeader(u, h[u])
                    }
                }
            } else if (e.headers && !fe(e.headers)) {
                throw new Error("Headers cannot be set on an XDomainRequest object")
            }
            if ("responseType" in e) {
                o.responseType = e.responseType
            }
            if ("beforeSend" in e && typeof e.beforeSend === "function") {
                e.beforeSend(o)
            }
            o.send(d || null);
            return o
        }

        function me(e) {
            try {
                if (e.responseType === "document") {
                    return e.responseXML
                }
                var t = e.responseXML && e.responseXML.documentElement.nodeName === "parsererror";
                if (e.responseType === "" && !t) {
                    return e.responseXML
                }
            } catch (e) {}
            return null
        }

        function ve() {}
        ue.default = le;
        var ge = Object.create || function() {
            function e() {}
            return function(t) {
                if (arguments.length !== 1) {
                    throw new Error("Object.create shim only accepts one parameter.")
                }
                e.prototype = t;
                return new e
            }
        }();

        function ye(e, t) {
            this.name = "ParsingError";
            this.code = e.code;
            this.message = t || e.message
        }
        ye.prototype = ge(Error.prototype);
        ye.prototype.constructor = ye;
        ye.Errors = {
            BadSignature: {
                code: 0,
                message: "Malformed WebVTT signature."
            },
            BadTimeStamp: {
                code: 1,
                message: "Malformed time stamp."
            }
        };

        function _e(e) {
            function t(e, t, i, r) {
                return (e | 0) * 3600 + (t | 0) * 60 + (i | 0) + (r | 0) / 1e3
            }
            var i = e.match(/^(\d+):(\d{1,2})(:\d{1,2})?\.(\d{3})/);
            if (!i) {
                return null
            }
            if (i[3]) {
                return t(i[1], i[2], i[3].replace(":", ""), i[4])
            } else if (i[1] > 59) {
                return t(i[1], i[2], 0, i[4])
            } else {
                return t(0, i[1], i[2], i[4])
            }
        }

        function be() {
            this.values = ge(null)
        }
        be.prototype = {
            set: function(e, t) {
                if (!this.get(e) && t !== "") {
                    this.values[e] = t
                }
            },
            get: function(e, t, i) {
                if (i) {
                    return this.has(e) ? this.values[e] : t[i]
                }
                return this.has(e) ? this.values[e] : t
            },
            has: function(e) {
                return e in this.values
            },
            alt: function(e, t, i) {
                for (var r = 0; r < i.length; ++r) {
                    if (t === i[r]) {
                        this.set(e, t);
                        break
                    }
                }
            },
            integer: function(e, t) {
                if (/^-?\d+$/.test(t)) {
                    this.set(e, parseInt(t, 10))
                }
            },
            percent: function(e, t) {
                if (t.match(/^([\d]{1,3})(\.[\d]*)?%$/)) {
                    t = parseFloat(t);
                    if (t >= 0 && t <= 100) {
                        this.set(e, t);
                        return true
                    }
                }
                return false
            }
        };

        function Te(e, t, i, r) {
            var n = r ? e.split(r) : [e];
            for (var a in n) {
                if (typeof n[a] !== "string") {
                    continue
                }
                var s = n[a].split(i);
                if (s.length !== 2) {
                    continue
                }
                var o = s[0];
                var u = s[1];
                t(o, u)
            }
        }

        function Se(e, t, i) {
            var r = e;

            function n() {
                var t = _e(e);
                if (t === null) {
                    throw new ye(ye.Errors.BadTimeStamp, "Malformed timestamp: " + r)
                }
                e = e.replace(/^[^\sa-zA-Z-]+/, "");
                return t
            }

            function a(e, t) {
                var r = new be;
                Te(e, (function(e, t) {
                    switch (e) {
                        case "region":
                            for (var n = i.length - 1; n >= 0; n--) {
                                if (i[n].id === t) {
                                    r.set(e, i[n].region);
                                    break
                                }
                            }
                            break;
                        case "vertical":
                            r.alt(e, t, ["rl", "lr"]);
                            break;
                        case "line":
                            var a = t.split(","),
                                s = a[0];
                            r.integer(e, s);
                            r.percent(e, s) ? r.set("snapToLines", false) : null;
                            r.alt(e, s, ["auto"]);
                            if (a.length === 2) {
                                r.alt("lineAlign", a[1], ["start", "center", "end"])
                            }
                            break;
                        case "position":
                            a = t.split(",");
                            r.percent(e, a[0]);
                            if (a.length === 2) {
                                r.alt("positionAlign", a[1], ["start", "center", "end"])
                            }
                            break;
                        case "size":
                            r.percent(e, t);
                            break;
                        case "align":
                            r.alt(e, t, ["start", "center", "end", "left", "right"]);
                            break
                    }
                }), /:/, /\s/);
                t.region = r.get("region", null);
                t.vertical = r.get("vertical", "");
                try {
                    t.line = r.get("line", "auto")
                } catch (e) {}
                t.lineAlign = r.get("lineAlign", "start");
                t.snapToLines = r.get("snapToLines", true);
                t.size = r.get("size", 100);
                try {
                    t.align = r.get("align", "center")
                } catch (e) {
                    t.align = r.get("align", "middle")
                }
                try {
                    t.position = r.get("position", "auto")
                } catch (e) {
                    t.position = r.get("position", {
                        start: 0,
                        left: 0,
                        center: 50,
                        middle: 50,
                        end: 100,
                        right: 100
                    }, t.align)
                }
                t.positionAlign = r.get("positionAlign", {
                    start: "start",
                    left: "start",
                    center: "center",
                    middle: "center",
                    end: "end",
                    right: "end"
                }, t.align)
            }

            function s() {
                e = e.replace(/^\s+/, "")
            }
            s();
            t.startTime = n();
            s();
            if (e.substr(0, 3) !== "--\x3e") {
                throw new ye(ye.Errors.BadTimeStamp, "Malformed time stamp (time stamps must be separated by '--\x3e'): " + r)
            }
            e = e.substr(3);
            s();
            t.endTime = n();
            s();
            a(e, t)
        }
        var Ee = W.createElement && W.createElement("textarea");
        var we = {
            c: "span",
            i: "i",
            b: "b",
            u: "u",
            ruby: "ruby",
            rt: "rt",
            v: "span",
            lang: "span"
        };
        var ke = {
            white: "rgba(255,255,255,1)",
            lime: "rgba(0,255,0,1)",
            cyan: "rgba(0,255,255,1)",
            red: "rgba(255,0,0,1)",
            yellow: "rgba(255,255,0,1)",
            magenta: "rgba(255,0,255,1)",
            blue: "rgba(0,0,255,1)",
            black: "rgba(0,0,0,1)"
        };
        var Ce = {
            v: "title",
            lang: "lang"
        };
        var Ie = {
            rt: "ruby"
        };

        function Ae(e, t) {
            function i() {
                if (!t) {
                    return null
                }

                function e(e) {
                    t = t.substr(e.length);
                    return e
                }
                var i = t.match(/^([^<]*)(<[^>]*>?)?/);
                return e(i[1] ? i[1] : i[2])
            }

            function r(e) {
                Ee.innerHTML = e;
                e = Ee.textContent;
                Ee.textContent = "";
                return e
            }

            function n(e, t) {
                return !Ie[t.localName] || Ie[t.localName] === e.localName
            }

            function a(t, i) {
                var r = we[t];
                if (!r) {
                    return null
                }
                var n = e.document.createElement(r);
                var a = Ce[t];
                if (a && i) {
                    n[a] = i.trim()
                }
                return n
            }
            var s = e.document.createElement("div"),
                o = s,
                u, l = [];
            while ((u = i()) !== null) {
                if (u[0] === "<") {
                    if (u[1] === "/") {
                        if (l.length && l[l.length - 1] === u.substr(2).replace(">", "")) {
                            l.pop();
                            o = o.parentNode
                        }
                        continue
                    }
                    var c = _e(u.substr(1, u.length - 2));
                    var f;
                    if (c) {
                        f = e.document.createProcessingInstruction("timestamp", c);
                        o.appendChild(f);
                        continue
                    }
                    var d = u.match(/^<([^.\s/0-9>]+)(\.[^\s\\>]+)?([^>\\]+)?(\\?)>?$/);
                    if (!d) {
                        continue
                    }
                    f = a(d[1], d[3]);
                    if (!f) {
                        continue
                    }
                    if (!n(o, f)) {
                        continue
                    }
                    if (d[2]) {
                        var h = d[2].split(".");
                        h.forEach((function(e) {
                            var t = /^bg_/.test(e);
                            var i = t ? e.slice(3) : e;
                            if (ke.hasOwnProperty(i)) {
                                var r = t ? "background-color" : "color";
                                var n = ke[i];
                                f.style[r] = n
                            }
                        }));
                        f.className = h.join(" ")
                    }
                    l.push(d[1]);
                    o.appendChild(f);
                    o = f;
                    continue
                }
                o.appendChild(e.document.createTextNode(r(u)))
            }
            return s
        }
        var xe = [
            [1470, 1470],
            [1472, 1472],
            [1475, 1475],
            [1478, 1478],
            [1488, 1514],
            [1520, 1524],
            [1544, 1544],
            [1547, 1547],
            [1549, 1549],
            [1563, 1563],
            [1566, 1610],
            [1645, 1647],
            [1649, 1749],
            [1765, 1766],
            [1774, 1775],
            [1786, 1805],
            [1807, 1808],
            [1810, 1839],
            [1869, 1957],
            [1969, 1969],
            [1984, 2026],
            [2036, 2037],
            [2042, 2042],
            [2048, 2069],
            [2074, 2074],
            [2084, 2084],
            [2088, 2088],
            [2096, 2110],
            [2112, 2136],
            [2142, 2142],
            [2208, 2208],
            [2210, 2220],
            [8207, 8207],
            [64285, 64285],
            [64287, 64296],
            [64298, 64310],
            [64312, 64316],
            [64318, 64318],
            [64320, 64321],
            [64323, 64324],
            [64326, 64449],
            [64467, 64829],
            [64848, 64911],
            [64914, 64967],
            [65008, 65020],
            [65136, 65140],
            [65142, 65276],
            [67584, 67589],
            [67592, 67592],
            [67594, 67637],
            [67639, 67640],
            [67644, 67644],
            [67647, 67669],
            [67671, 67679],
            [67840, 67867],
            [67872, 67897],
            [67903, 67903],
            [67968, 68023],
            [68030, 68031],
            [68096, 68096],
            [68112, 68115],
            [68117, 68119],
            [68121, 68147],
            [68160, 68167],
            [68176, 68184],
            [68192, 68223],
            [68352, 68405],
            [68416, 68437],
            [68440, 68466],
            [68472, 68479],
            [68608, 68680],
            [126464, 126467],
            [126469, 126495],
            [126497, 126498],
            [126500, 126500],
            [126503, 126503],
            [126505, 126514],
            [126516, 126519],
            [126521, 126521],
            [126523, 126523],
            [126530, 126530],
            [126535, 126535],
            [126537, 126537],
            [126539, 126539],
            [126541, 126543],
            [126545, 126546],
            [126548, 126548],
            [126551, 126551],
            [126553, 126553],
            [126555, 126555],
            [126557, 126557],
            [126559, 126559],
            [126561, 126562],
            [126564, 126564],
            [126567, 126570],
            [126572, 126578],
            [126580, 126583],
            [126585, 126588],
            [126590, 126590],
            [126592, 126601],
            [126603, 126619],
            [126625, 126627],
            [126629, 126633],
            [126635, 126651],
            [1114109, 1114109]
        ];

        function Pe(e) {
            for (var t = 0; t < xe.length; t++) {
                var i = xe[t];
                if (e >= i[0] && e <= i[1]) {
                    return true
                }
            }
            return false
        }

        function Oe(e) {
            var t = [],
                i = "",
                r;
            if (!e || !e.childNodes) {
                return "ltr"
            }

            function n(e, t) {
                for (var i = t.childNodes.length - 1; i >= 0; i--) {
                    e.push(t.childNodes[i])
                }
            }

            function a(e) {
                if (!e || !e.length) {
                    return null
                }
                var t = e.pop(),
                    i = t.textContent || t.innerText;
                if (i) {
                    var r = i.match(/^.*(\n|\r)/);
                    if (r) {
                        e.length = 0;
                        return r[0]
                    }
                    return i
                }
                if (t.tagName === "ruby") {
                    return a(e)
                }
                if (t.childNodes) {
                    n(e, t);
                    return a(e)
                }
            }
            n(t, e);
            while (i = a(t)) {
                for (var s = 0; s < i.length; s++) {
                    r = i.charCodeAt(s);
                    if (Pe(r)) {
                        return "rtl"
                    }
                }
            }
            return "ltr"
        }

        function De(e) {
            if (typeof e.line === "number" && (e.snapToLines || e.line >= 0 && e.line <= 100)) {
                return e.line
            }
            if (!e.track || !e.track.textTrackList || !e.track.textTrackList.mediaElement) {
                return -1
            }
            var t = e.track,
                i = t.textTrackList,
                r = 0;
            for (var n = 0; n < i.length && i[n] !== t; n++) {
                if (i[n].mode === "showing") {
                    r++
                }
            }
            return ++r * -1
        }

        function Le() {}
        Le.prototype.applyStyles = function(e, t) {
            t = t || this.div;
            for (var i in e) {
                if (e.hasOwnProperty(i)) {
                    t.style[i] = e[i]
                }
            }
        };
        Le.prototype.formatStyle = function(e, t) {
            return e === 0 ? 0 : e + t
        };

        function Ne(e, t, i) {
            Le.call(this);
            this.cue = t;
            this.cueDiv = Ae(e, t.text);
            var r = {
                color: "rgba(255, 255, 255, 1)",
                backgroundColor: "rgba(0, 0, 0, 0.8)",
                position: "relative",
                left: 0,
                right: 0,
                top: 0,
                bottom: 0,
                display: "inline",
                writingMode: t.vertical === "" ? "horizontal-tb" : t.vertical === "lr" ? "vertical-lr" : "vertical-rl",
                unicodeBidi: "plaintext"
            };
            this.applyStyles(r, this.cueDiv);
            this.div = e.document.createElement("div");
            r = {
                direction: Oe(this.cueDiv),
                writingMode: t.vertical === "" ? "horizontal-tb" : t.vertical === "lr" ? "vertical-lr" : "vertical-rl",
                unicodeBidi: "plaintext",
                textAlign: t.align === "middle" ? "center" : t.align,
                font: i.font,
                whiteSpace: "pre-line",
                position: "absolute"
            };
            this.applyStyles(r);
            this.div.appendChild(this.cueDiv);
            var n = 0;
            switch (t.positionAlign) {
                case "start":
                    n = t.position;
                    break;
                case "center":
                    n = t.position - t.size / 2;
                    break;
                case "end":
                    n = t.position - t.size;
                    break
            }
            if (t.vertical === "") {
                this.applyStyles({
                    left: this.formatStyle(n, "%"),
                    width: this.formatStyle(t.size, "%")
                })
            } else {
                this.applyStyles({
                    top: this.formatStyle(n, "%"),
                    height: this.formatStyle(t.size, "%")
                })
            }
            this.move = function(e) {
                this.applyStyles({
                    top: this.formatStyle(e.top, "px"),
                    bottom: this.formatStyle(e.bottom, "px"),
                    left: this.formatStyle(e.left, "px"),
                    right: this.formatStyle(e.right, "px"),
                    height: this.formatStyle(e.height, "px"),
                    width: this.formatStyle(e.width, "px")
                })
            }
        }
        Ne.prototype = ge(Le.prototype);
        Ne.prototype.constructor = Ne;

        function Re(e) {
            var t, i, r, n;
            if (e.div) {
                i = e.div.offsetHeight;
                r = e.div.offsetWidth;
                n = e.div.offsetTop;
                var a = (a = e.div.childNodes) && (a = a[0]) && a.getClientRects && a.getClientRects();
                e = e.div.getBoundingClientRect();
                t = a ? Math.max(a[0] && a[0].height || 0, e.height / a.length) : 0
            }
            this.left = e.left;
            this.right = e.right;
            this.top = e.top || n;
            this.height = e.height || i;
            this.bottom = e.bottom || n + (e.height || i);
            this.width = e.width || r;
            this.lineHeight = t !== undefined ? t : e.lineHeight
        }
        Re.prototype.move = function(e, t) {
            t = t !== undefined ? t : this.lineHeight;
            switch (e) {
                case "+x":
                    this.left += t;
                    this.right += t;
                    break;
                case "-x":
                    this.left -= t;
                    this.right -= t;
                    break;
                case "+y":
                    this.top += t;
                    this.bottom += t;
                    break;
                case "-y":
                    this.top -= t;
                    this.bottom -= t;
                    break
            }
        };
        Re.prototype.overlaps = function(e) {
            return this.left < e.right && this.right > e.left && this.top < e.bottom && this.bottom > e.top
        };
        Re.prototype.overlapsAny = function(e) {
            for (var t = 0; t < e.length; t++) {
                if (this.overlaps(e[t])) {
                    return true
                }
            }
            return false
        };
        Re.prototype.within = function(e) {
            return this.top >= e.top && this.bottom <= e.bottom && this.left >= e.left && this.right <= e.right
        };
        Re.prototype.overlapsOppositeAxis = function(e, t) {
            switch (t) {
                case "+x":
                    return this.left < e.left;
                case "-x":
                    return this.right > e.right;
                case "+y":
                    return this.top < e.top;
                case "-y":
                    return this.bottom > e.bottom
            }
        };
        Re.prototype.intersectPercentage = function(e) {
            var t = Math.max(0, Math.min(this.right, e.right) - Math.max(this.left, e.left)),
                i = Math.max(0, Math.min(this.bottom, e.bottom) - Math.max(this.top, e.top)),
                r = t * i;
            return r / (this.height * this.width)
        };
        Re.prototype.toCSSCompatValues = function(e) {
            return {
                top: this.top - e.top,
                bottom: e.bottom - this.bottom,
                left: this.left - e.left,
                right: e.right - this.right,
                height: this.height,
                width: this.width
            }
        };
        Re.getSimpleBoxPosition = function(e) {
            var t = e.div ? e.div.offsetHeight : e.tagName ? e.offsetHeight : 0;
            var i = e.div ? e.div.offsetWidth : e.tagName ? e.offsetWidth : 0;
            var r = e.div ? e.div.offsetTop : e.tagName ? e.offsetTop : 0;
            e = e.div ? e.div.getBoundingClientRect() : e.tagName ? e.getBoundingClientRect() : e;
            var n = {
                left: e.left,
                right: e.right,
                top: e.top || r,
                height: e.height || t,
                bottom: e.bottom || r + (e.height || t),
                width: e.width || i
            };
            return n
        };

        function Me(e, t, i, r) {
            function n(e, t) {
                var n, a = new Re(e),
                    s = 1;
                for (var o = 0; o < t.length; o++) {
                    while (e.overlapsOppositeAxis(i, t[o]) || e.within(i) && e.overlapsAny(r)) {
                        e.move(t[o])
                    }
                    if (e.within(i)) {
                        return e
                    }
                    var u = e.intersectPercentage(i);
                    if (s > u) {
                        n = new Re(e);
                        s = u
                    }
                    e = new Re(a)
                }
                return n || a
            }
            var a = new Re(t),
                s = t.cue,
                o = De(s),
                u = [];
            if (s.snapToLines) {
                var l;
                switch (s.vertical) {
                    case "":
                        u = ["+y", "-y"];
                        l = "height";
                        break;
                    case "rl":
                        u = ["+x", "-x"];
                        l = "width";
                        break;
                    case "lr":
                        u = ["-x", "+x"];
                        l = "width";
                        break
                }
                var c = a.lineHeight,
                    f = c * Math.round(o),
                    d = i[l] + c,
                    h = u[0];
                if (Math.abs(f) > d) {
                    f = f < 0 ? -1 : 1;
                    f *= Math.ceil(d / c) * c
                }
                if (o < 0) {
                    f += s.vertical === "" ? i.height : i.width;
                    u = u.reverse()
                }
                a.move(h, f)
            } else {
                var p = a.lineHeight / i.height * 100;
                switch (s.lineAlign) {
                    case "center":
                        o -= p / 2;
                        break;
                    case "end":
                        o -= p;
                        break
                }
                switch (s.vertical) {
                    case "":
                        t.applyStyles({
                            top: t.formatStyle(o, "%")
                        });
                        break;
                    case "rl":
                        t.applyStyles({
                            left: t.formatStyle(o, "%")
                        });
                        break;
                    case "lr":
                        t.applyStyles({
                            right: t.formatStyle(o, "%")
                        });
                        break
                }
                u = ["+y", "-x", "+x", "-y"];
                a = new Re(t)
            }
            var m = n(a, u);
            t.move(m.toCSSCompatValues(i))
        }

        function Ue() {}
        Ue.StringDecoder = function() {
            return {
                decode: function(e) {
                    if (!e) {
                        return ""
                    }
                    if (typeof e !== "string") {
                        throw new Error("Error - expected string data.")
                    }
                    return decodeURIComponent(encodeURIComponent(e))
                }
            }
        };
        Ue.convertCueToDOMTree = function(e, t) {
            if (!e || !t) {
                return null
            }
            return Ae(e, t)
        };
        var Be = .05;
        var Fe = "sans-serif";
        var je = "1.5%";
        Ue.processCues = function(e, t, i) {
            if (!e || !t || !i) {
                return null
            }
            while (i.firstChild) {
                i.removeChild(i.firstChild)
            }
            var r = e.document.createElement("div");
            r.style.position = "absolute";
            r.style.left = "0";
            r.style.right = "0";
            r.style.top = "0";
            r.style.bottom = "0";
            r.style.margin = je;
            i.appendChild(r);

            function n(e) {
                for (var t = 0; t < e.length; t++) {
                    if (e[t].hasBeenReset || !e[t].displayState) {
                        return true
                    }
                }
                return false
            }
            if (!n(t)) {
                for (var a = 0; a < t.length; a++) {
                    r.appendChild(t[a].displayState)
                }
                return
            }
            var s = [],
                o = Re.getSimpleBoxPosition(r),
                u = Math.round(o.height * Be * 100) / 100;
            var l = {
                font: u + "px " + Fe
            };
            (function() {
                var i, n;
                for (var a = 0; a < t.length; a++) {
                    n = t[a];
                    i = new Ne(e, n, l);
                    r.appendChild(i.div);
                    Me(e, i, o, s);
                    n.displayState = i.div;
                    s.push(Re.getSimpleBoxPosition(i))
                }
            })()
        };
        Ue.Parser = function(e, t, i) {
            if (!i) {
                i = t;
                t = {}
            }
            if (!t) {
                t = {}
            }
            this.window = e;
            this.vttjs = t;
            this.state = "INITIAL";
            this.buffer = "";
            this.decoder = i || new TextDecoder("utf8");
            this.regionList = []
        };
        Ue.Parser.prototype = {
            reportOrThrowError: function(e) {
                if (e instanceof ye) {
                    this.onparsingerror && this.onparsingerror(e)
                } else {
                    throw e
                }
            },
            parse: function(e) {
                var t = this;
                if (e) {
                    t.buffer += t.decoder.decode(e, {
                        stream: true
                    })
                }

                function i() {
                    var e = t.buffer;
                    var i = 0;
                    while (i < e.length && e[i] !== "\r" && e[i] !== "\n") {
                        ++i
                    }
                    var r = e.substr(0, i);
                    if (e[i] === "\r") {
                        ++i
                    }
                    if (e[i] === "\n") {
                        ++i
                    }
                    t.buffer = e.substr(i);
                    return r
                }

                function r(e) {
                    var i = new be;
                    Te(e, (function(e, t) {
                        switch (e) {
                            case "id":
                                i.set(e, t);
                                break;
                            case "width":
                                i.percent(e, t);
                                break;
                            case "lines":
                                i.integer(e, t);
                                break;
                            case "regionanchor":
                            case "viewportanchor":
                                var r = t.split(",");
                                if (r.length !== 2) {
                                    break
                                }
                                var n = new be;
                                n.percent("x", r[0]);
                                n.percent("y", r[1]);
                                if (!n.has("x") || !n.has("y")) {
                                    break
                                }
                                i.set(e + "X", n.get("x"));
                                i.set(e + "Y", n.get("y"));
                                break;
                            case "scroll":
                                i.alt(e, t, ["up"]);
                                break
                        }
                    }), /=/, /\s/);
                    if (i.has("id")) {
                        var r = new(t.vttjs.VTTRegion || t.window.VTTRegion);
                        r.width = i.get("width", 100);
                        r.lines = i.get("lines", 3);
                        r.regionAnchorX = i.get("regionanchorX", 0);
                        r.regionAnchorY = i.get("regionanchorY", 100);
                        r.viewportAnchorX = i.get("viewportanchorX", 0);
                        r.viewportAnchorY = i.get("viewportanchorY", 100);
                        r.scroll = i.get("scroll", "");
                        t.onregion && t.onregion(r);
                        t.regionList.push({
                            id: i.get("id"),
                            region: r
                        })
                    }
                }

                function n(e) {
                    var i = new be;
                    Te(e, (function(e, t) {
                        switch (e) {
                            case "MPEGT":
                                i.integer(e + "S", t);
                                break;
                            case "LOCA":
                                i.set(e + "L", _e(t));
                                break
                        }
                    }), /[^\d]:/, /,/);
                    t.ontimestampmap && t.ontimestampmap({
                        MPEGTS: i.get("MPEGTS"),
                        LOCAL: i.get("LOCAL")
                    })
                }

                function a(e) {
                    if (e.match(/X-TIMESTAMP-MAP/)) {
                        Te(e, (function(e, t) {
                            switch (e) {
                                case "X-TIMESTAMP-MAP":
                                    n(t);
                                    break
                            }
                        }), /=/)
                    } else {
                        Te(e, (function(e, t) {
                            switch (e) {
                                case "Region":
                                    r(t);
                                    break
                            }
                        }), /:/)
                    }
                }
                try {
                    var s;
                    if (t.state === "INITIAL") {
                        if (!/\r\n|\n/.test(t.buffer)) {
                            return this
                        }
                        s = i();
                        var o = s.match(/^WEBVTT([ \t].*)?$/);
                        if (!o || !o[0]) {
                            throw new ye(ye.Errors.BadSignature)
                        }
                        t.state = "HEADER"
                    }
                    var u = false;
                    while (t.buffer) {
                        if (!/\r\n|\n/.test(t.buffer)) {
                            return this
                        }
                        if (!u) {
                            s = i()
                        } else {
                            u = false
                        }
                        switch (t.state) {
                            case "HEADER":
                                if (/:/.test(s)) {
                                    a(s)
                                } else if (!s) {
                                    t.state = "ID"
                                }
                                continue;
                            case "NOTE":
                                if (!s) {
                                    t.state = "ID"
                                }
                                continue;
                            case "ID":
                                if (/^NOTE($|[ \t])/.test(s)) {
                                    t.state = "NOTE";
                                    break
                                }
                                if (!s) {
                                    continue
                                }
                                t.cue = new(t.vttjs.VTTCue || t.window.VTTCue)(0, 0, "");
                                try {
                                    t.cue.align = "center"
                                } catch (e) {
                                    t.cue.align = "middle"
                                }
                                t.state = "CUE";
                                if (s.indexOf("--\x3e") === -1) {
                                    t.cue.id = s;
                                    continue
                                }
                                case "CUE":
                                    try {
                                        Se(s, t.cue, t.regionList)
                                    } catch (e) {
                                        t.reportOrThrowError(e);
                                        t.cue = null;
                                        t.state = "BADCUE";
                                        continue
                                    }
                                    t.state = "CUETEXT";
                                    continue;
                                case "CUETEXT":
                                    var l = s.indexOf("--\x3e") !== -1;
                                    if (!s || l && (u = true)) {
                                        t.oncue && t.oncue(t.cue);
                                        t.cue = null;
                                        t.state = "ID";
                                        continue
                                    }
                                    if (t.cue.text) {
                                        t.cue.text += "\n"
                                    }
                                    t.cue.text += s.replace(/\u2028/g, "\n").replace(/u2029/g, "\n");
                                    continue;
                                case "BADCUE":
                                    if (!s) {
                                        t.state = "ID"
                                    }
                                    continue
                        }
                    }
                } catch (e) {
                    t.reportOrThrowError(e);
                    if (t.state === "CUETEXT" && t.cue && t.oncue) {
                        t.oncue(t.cue)
                    }
                    t.cue = null;
                    t.state = t.state === "INITIAL" ? "BADWEBVTT" : "BADCUE"
                }
                return this
            },
            flush: function() {
                var e = this;
                try {
                    e.buffer += e.decoder.decode();
                    if (e.cue || e.state === "HEADER") {
                        e.buffer += "\n\n";
                        e.parse()
                    }
                    if (e.state === "INITIAL") {
                        throw new ye(ye.Errors.BadSignature)
                    }
                } catch (t) {
                    e.reportOrThrowError(t)
                }
                e.onflush && e.onflush();
                return this
            }
        };
        var He = Ue;
        var qe = "auto";
        var Ve = {
            "": 1,
            lr: 1,
            rl: 1
        };
        var We = {
            start: 1,
            center: 1,
            end: 1,
            left: 1,
            right: 1,
            auto: 1,
            "line-left": 1,
            "line-right": 1
        };

        function Ge(e) {
            if (typeof e !== "string") {
                return false
            }
            var t = Ve[e.toLowerCase()];
            return t ? e.toLowerCase() : false
        }

        function Xe(e) {
            if (typeof e !== "string") {
                return false
            }
            var t = We[e.toLowerCase()];
            return t ? e.toLowerCase() : false
        }

        function ze(e, t, i) {
            this.hasBeenReset = false;
            var r = "";
            var n = false;
            var a = e;
            var s = t;
            var o = i;
            var u = null;
            var l = "";
            var c = true;
            var f = "auto";
            var d = "start";
            var h = "auto";
            var p = "auto";
            var m = 100;
            var v = "center";
            Object.defineProperties(this, {
                id: {
                    enumerable: true,
                    get: function() {
                        return r
                    },
                    set: function(e) {
                        r = "" + e
                    }
                },
                pauseOnExit: {
                    enumerable: true,
                    get: function() {
                        return n
                    },
                    set: function(e) {
                        n = !!e
                    }
                },
                startTime: {
                    enumerable: true,
                    get: function() {
                        return a
                    },
                    set: function(e) {
                        if (typeof e !== "number") {
                            throw new TypeError("Start time must be set to a number.")
                        }
                        a = e;
                        this.hasBeenReset = true
                    }
                },
                endTime: {
                    enumerable: true,
                    get: function() {
                        return s
                    },
                    set: function(e) {
                        if (typeof e !== "number") {
                            throw new TypeError("End time must be set to a number.")
                        }
                        s = e;
                        this.hasBeenReset = true
                    }
                },
                text: {
                    enumerable: true,
                    get: function() {
                        return o
                    },
                    set: function(e) {
                        o = "" + e;
                        this.hasBeenReset = true
                    }
                },
                region: {
                    enumerable: true,
                    get: function() {
                        return u
                    },
                    set: function(e) {
                        u = e;
                        this.hasBeenReset = true
                    }
                },
                vertical: {
                    enumerable: true,
                    get: function() {
                        return l
                    },
                    set: function(e) {
                        var t = Ge(e);
                        if (t === false) {
                            throw new SyntaxError("Vertical: an invalid or illegal direction string was specified.")
                        }
                        l = t;
                        this.hasBeenReset = true
                    }
                },
                snapToLines: {
                    enumerable: true,
                    get: function() {
                        return c
                    },
                    set: function(e) {
                        c = !!e;
                        this.hasBeenReset = true
                    }
                },
                line: {
                    enumerable: true,
                    get: function() {
                        return f
                    },
                    set: function(e) {
                        if (typeof e !== "number" && e !== qe) {
                            throw new SyntaxError("Line: an invalid number or illegal string was specified.")
                        }
                        f = e;
                        this.hasBeenReset = true
                    }
                },
                lineAlign: {
                    enumerable: true,
                    get: function() {
                        return d
                    },
                    set: function(e) {
                        var t = Xe(e);
                        if (!t) {
                            console.warn("lineAlign: an invalid or illegal string was specified.")
                        } else {
                            d = t;
                            this.hasBeenReset = true
                        }
                    }
                },
                position: {
                    enumerable: true,
                    get: function() {
                        return h
                    },
                    set: function(e) {
                        if (e < 0 || e > 100) {
                            throw new Error("Position must be between 0 and 100.")
                        }
                        h = e;
                        this.hasBeenReset = true
                    }
                },
                positionAlign: {
                    enumerable: true,
                    get: function() {
                        return p
                    },
                    set: function(e) {
                        var t = Xe(e);
                        if (!t) {
                            console.warn("positionAlign: an invalid or illegal string was specified.")
                        } else {
                            p = t;
                            this.hasBeenReset = true
                        }
                    }
                },
                size: {
                    enumerable: true,
                    get: function() {
                        return m
                    },
                    set: function(e) {
                        if (e < 0 || e > 100) {
                            throw new Error("Size must be between 0 and 100.")
                        }
                        m = e;
                        this.hasBeenReset = true
                    }
                },
                align: {
                    enumerable: true,
                    get: function() {
                        return v
                    },
                    set: function(e) {
                        var t = Xe(e);
                        if (!t) {
                            throw new SyntaxError("align: an invalid or illegal alignment string was specified.")
                        }
                        v = t;
                        this.hasBeenReset = true
                    }
                }
            });
            this.displayState = undefined
        }
        ze.prototype.getCueAsHTML = function() {
            return WebVTT.convertCueToDOMTree(window, this.text)
        };
        var Ke = ze;
        var Ye = {
            "": true,
            up: true
        };

        function $e(e) {
            if (typeof e !== "string") {
                return false
            }
            var t = Ye[e.toLowerCase()];
            return t ? e.toLowerCase() : false
        }

        function Qe(e) {
            return typeof e === "number" && (e >= 0 && e <= 100)
        }

        function Je() {
            var e = 100;
            var t = 3;
            var i = 0;
            var r = 100;
            var n = 0;
            var a = 100;
            var s = "";
            Object.defineProperties(this, {
                width: {
                    enumerable: true,
                    get: function() {
                        return e
                    },
                    set: function(t) {
                        if (!Qe(t)) {
                            throw new Error("Width must be between 0 and 100.")
                        }
                        e = t
                    }
                },
                lines: {
                    enumerable: true,
                    get: function() {
                        return t
                    },
                    set: function(e) {
                        if (typeof e !== "number") {
                            throw new TypeError("Lines must be set to a number.")
                        }
                        t = e
                    }
                },
                regionAnchorY: {
                    enumerable: true,
                    get: function() {
                        return r
                    },
                    set: function(e) {
                        if (!Qe(e)) {
                            throw new Error("RegionAnchorX must be between 0 and 100.")
                        }
                        r = e
                    }
                },
                regionAnchorX: {
                    enumerable: true,
                    get: function() {
                        return i
                    },
                    set: function(e) {
                        if (!Qe(e)) {
                            throw new Error("RegionAnchorY must be between 0 and 100.")
                        }
                        i = e
                    }
                },
                viewportAnchorY: {
                    enumerable: true,
                    get: function() {
                        return a
                    },
                    set: function(e) {
                        if (!Qe(e)) {
                            throw new Error("ViewportAnchorY must be between 0 and 100.")
                        }
                        a = e
                    }
                },
                viewportAnchorX: {
                    enumerable: true,
                    get: function() {
                        return n
                    },
                    set: function(e) {
                        if (!Qe(e)) {
                            throw new Error("ViewportAnchorX must be between 0 and 100.")
                        }
                        n = e
                    }
                },
                scroll: {
                    enumerable: true,
                    get: function() {
                        return s
                    },
                    set: function(e) {
                        var t = $e(e);
                        if (t === false) {
                            console.warn("Scroll: an invalid or illegal string was specified.")
                        } else {
                            s = t
                        }
                    }
                }
            })
        }
        var Ze = Je;
        var et = n((function(e) {
            var t = e.exports = {
                WebVTT: He,
                VTTCue: Ke,
                VTTRegion: Ze
            };
            s.vttjs = t;
            s.WebVTT = t.WebVTT;
            var i = t.VTTCue;
            var r = t.VTTRegion;
            var n = s.VTTCue;
            var a = s.VTTRegion;
            t.shim = function() {
                s.VTTCue = i;
                s.VTTRegion = r
            };
            t.restore = function() {
                s.VTTCue = n;
                s.VTTRegion = a
            };
            if (!s.VTTCue) {
                t.shim()
            }
        }));
        et.WebVTT;
        et.VTTCue;
        et.VTTRegion;
        var tt = n((function(e) {
            function t() {
                if (typeof Reflect === "undefined" || !Reflect.construct) return false;
                if (Reflect.construct.sham) return false;
                if (typeof Proxy === "function") return true;
                try {
                    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], (function() {})));
                    return true
                } catch (e) {
                    return false
                }
            }
            e.exports = t, e.exports.__esModule = true, e.exports["default"] = e.exports
        }));
        r(tt);
        var it = n((function(e) {
            function t(i, r, n) {
                if (tt()) {
                    e.exports = t = Reflect.construct.bind(), e.exports.__esModule = true, e.exports["default"] = e.exports
                } else {
                    e.exports = t = function e(t, i, r) {
                        var n = [null];
                        n.push.apply(n, i);
                        var a = Function.bind.apply(t, n);
                        var s = new a;
                        if (r) $(s, r.prototype);
                        return s
                    }, e.exports.__esModule = true, e.exports["default"] = e.exports
                }
                return t.apply(null, arguments)
            }
            e.exports = t, e.exports.__esModule = true, e.exports["default"] = e.exports
        }));
        var rt = r(it);
        var nt = n((function(e) {
            function t(e, t) {
                if (typeof t !== "function" && t !== null) {
                    throw new TypeError("Super expression must either be null or a function")
                }
                e.prototype = Object.create(t && t.prototype, {
                    constructor: {
                        value: e,
                        writable: true,
                        configurable: true
                    }
                });
                Object.defineProperty(e, "prototype", {
                    writable: false
                });
                if (t) $(e, t)
            }
            e.exports = t, e.exports.__esModule = true, e.exports["default"] = e.exports
        }));
        var at = r(nt);
        var st = n((function(e, t) {
            (function(t) {
                var i = /^(?=((?:[a-zA-Z0-9+\-.]+:)?))\1(?=((?:\/\/[^\/?#]*)?))\2(?=((?:(?:[^?#\/]*\/)*[^;?#\/]*)?))\3((?:;[^?#]*)?)(\?[^#]*)?(#[^]*)?$/;
                var r = /^(?=([^\/?#]*))\1([^]*)$/;
                var n = /(?:\/|^)\.(?=\/)/g;
                var a = /(?:\/|^)\.\.\/(?!\.\.\/)[^\/]*(?=\/)/g;
                var s = {
                    buildAbsoluteURL: function(e, t, i) {
                        i = i || {};
                        e = e.trim();
                        t = t.trim();
                        if (!t) {
                            if (!i.alwaysNormalize) {
                                return e
                            }
                            var n = s.parseURL(e);
                            if (!n) {
                                throw new Error("Error trying to parse base URL.")
                            }
                            n.path = s.normalizePath(n.path);
                            return s.buildURLFromParts(n)
                        }
                        var a = s.parseURL(t);
                        if (!a) {
                            throw new Error("Error trying to parse relative URL.")
                        }
                        if (a.scheme) {
                            if (!i.alwaysNormalize) {
                                return t
                            }
                            a.path = s.normalizePath(a.path);
                            return s.buildURLFromParts(a)
                        }
                        var o = s.parseURL(e);
                        if (!o) {
                            throw new Error("Error trying to parse base URL.")
                        }
                        if (!o.netLoc && o.path && o.path[0] !== "/") {
                            var u = r.exec(o.path);
                            o.netLoc = u[1];
                            o.path = u[2]
                        }
                        if (o.netLoc && !o.path) {
                            o.path = "/"
                        }
                        var l = {
                            scheme: o.scheme,
                            netLoc: a.netLoc,
                            path: null,
                            params: a.params,
                            query: a.query,
                            fragment: a.fragment
                        };
                        if (!a.netLoc) {
                            l.netLoc = o.netLoc;
                            if (a.path[0] !== "/") {
                                if (!a.path) {
                                    l.path = o.path;
                                    if (!a.params) {
                                        l.params = o.params;
                                        if (!a.query) {
                                            l.query = o.query
                                        }
                                    }
                                } else {
                                    var c = o.path;
                                    var f = c.substring(0, c.lastIndexOf("/") + 1) + a.path;
                                    l.path = s.normalizePath(f)
                                }
                            }
                        }
                        if (l.path === null) {
                            l.path = i.alwaysNormalize ? s.normalizePath(a.path) : a.path
                        }
                        return s.buildURLFromParts(l)
                    },
                    parseURL: function(e) {
                        var t = i.exec(e);
                        if (!t) {
                            return null
                        }
                        return {
                            scheme: t[1] || "",
                            netLoc: t[2] || "",
                            path: t[3] || "",
                            params: t[4] || "",
                            query: t[5] || "",
                            fragment: t[6] || ""
                        }
                    },
                    normalizePath: function(e) {
                        e = e.split("").reverse().join("").replace(n, "");
                        while (e.length !== (e = e.replace(a, "")).length) {}
                        return e.split("").reverse().join("")
                    },
                    buildURLFromParts: function(e) {
                        return e.scheme + e.netLoc + e.path + e.params + e.query + e.fragment
                    }
                };
                e.exports = s
            })()
        }));
        var ot = "http://example.com";
        var ut = function e(t, i) {
            if (/^[a-z]+:/i.test(i)) {
                return i
            }
            if (/^data:/.test(t)) {
                t = s.location && s.location.href || ""
            }
            var r = typeof s.URL === "function";
            var n = /^\/\//.test(t);
            var a = !s.location && !/\/\//i.test(t);
            if (r) {
                t = new s.URL(t, s.location || ot)
            } else if (!/\/\//i.test(t)) {
                t = st.buildAbsoluteURL(s.location && s.location.href || "", t)
            }
            if (r) {
                var o = new URL(i, t);
                if (a) {
                    return o.href.slice(ot.length)
                } else if (n) {
                    return o.href.slice(o.protocol.length)
                }
                return o.href
            }
            return st.buildAbsoluteURL(t, i)
        };
        var lt = function() {
            function e() {
                this.listeners = {}
            }
            var t = e.prototype;
            t.on = function e(t, i) {
                if (!this.listeners[t]) {
                    this.listeners[t] = []
                }
                this.listeners[t].push(i)
            };
            t.off = function e(t, i) {
                if (!this.listeners[t]) {
                    return false
                }
                var r = this.listeners[t].indexOf(i);
                this.listeners[t] = this.listeners[t].slice(0);
                this.listeners[t].splice(r, 1);
                return r > -1
            };
            t.trigger = function e(t) {
                var i = this.listeners[t];
                if (!i) {
                    return
                }
                if (arguments.length === 2) {
                    var r = i.length;
                    for (var n = 0; n < r; ++n) {
                        i[n].call(this, arguments[1])
                    }
                } else {
                    var a = Array.prototype.slice.call(arguments, 1);
                    var s = i.length;
                    for (var o = 0; o < s; ++o) {
                        i[o].apply(this, a)
                    }
                }
            };
            t.dispose = function e() {
                this.listeners = {}
            };
            t.pipe = function e(t) {
                this.on("data", (function(e) {
                    t.push(e)
                }))
            };
            return e
        }();
        var ct = function e(t) {
            return s.atob ? s.atob(t) : Buffer.from(t, "base64").toString("binary")
        };

        function ft(e) {
            var t = ct(e);
            var i = new Uint8Array(t.length);
            for (var r = 0; r < t.length; r++) {
                i[r] = t.charCodeAt(r)
            }
            return i
        }
        var dt = function(e) {
            J(t, e);

            function t() {
                var t;
                t = e.call(this) || this;
                t.buffer = "";
                return t
            }
            var i = t.prototype;
            i.push = function e(t) {
                var i;
                this.buffer += t;
                i = this.buffer.indexOf("\n");
                for (; i > -1; i = this.buffer.indexOf("\n")) {
                    this.trigger("data", this.buffer.substring(0, i));
                    this.buffer = this.buffer.substring(i + 1)
                }
            };
            return t
        }(lt);
        var ht = String.fromCharCode(9);
        var pt = function e(t) {
            var i = /([0-9.]*)?@?([0-9.]*)?/.exec(t || "");
            var r = {};
            if (i[1]) {
                r.length = parseInt(i[1], 10)
            }
            if (i[2]) {
                r.offset = parseInt(i[2], 10)
            }
            return r
        };
        var mt = function e() {
            var t = "[^=]*";
            var i = '"[^"]*"|[^,]*';
            var r = "(?:" + t + ")=(?:" + i + ")";
            return new RegExp("(?:^|,)(" + r + ")")
        };
        var vt = function e(t) {
            var i = t.split(mt());
            var r = {};
            var n = i.length;
            var a;
            while (n--) {
                if (i[n] === "") {
                    continue
                }
                a = /([^=]*)=(.*)/.exec(i[n]).slice(1);
                a[0] = a[0].replace(/^\s+|\s+$/g, "");
                a[1] = a[1].replace(/^\s+|\s+$/g, "");
                a[1] = a[1].replace(/^['"](.*)['"]$/g, "$1");
                r[a[0]] = a[1]
            }
            return r
        };
        var gt = function(e) {
            J(t, e);

            function t() {
                var t;
                t = e.call(this) || this;
                t.customParsers = [];
                t.tagMappers = [];
                return t
            }
            var i = t.prototype;
            i.push = function e(t) {
                var i = this;
                var r;
                var n;
                t = t.trim();
                if (t.length === 0) {
                    return
                }
                if (t[0] !== "#") {
                    this.trigger("data", {
                        type: "uri",
                        uri: t
                    });
                    return
                }
                var a = this.tagMappers.reduce((function(e, i) {
                    var r = i(t);
                    if (r === t) {
                        return e
                    }
                    return e.concat([r])
                }), [t]);
                a.forEach((function(e) {
                    for (var t = 0; t < i.customParsers.length; t++) {
                        if (i.customParsers[t].call(i, e)) {
                            return
                        }
                    }
                    if (e.indexOf("#EXT") !== 0) {
                        i.trigger("data", {
                            type: "comment",
                            text: e.slice(1)
                        });
                        return
                    }
                    e = e.replace("\r", "");
                    r = /^#EXTM3U/.exec(e);
                    if (r) {
                        i.trigger("data", {
                            type: "tag",
                            tagType: "m3u"
                        });
                        return
                    }
                    r = /^#EXTINF:?([0-9\.]*)?,?(.*)?$/.exec(e);
                    if (r) {
                        n = {
                            type: "tag",
                            tagType: "inf"
                        };
                        if (r[1]) {
                            n.duration = parseFloat(r[1])
                        }
                        if (r[2]) {
                            n.title = r[2]
                        }
                        i.trigger("data", n);
                        return
                    }
                    r = /^#EXT-X-TARGETDURATION:?([0-9.]*)?/.exec(e);
                    if (r) {
                        n = {
                            type: "tag",
                            tagType: "targetduration"
                        };
                        if (r[1]) {
                            n.duration = parseInt(r[1], 10)
                        }
                        i.trigger("data", n);
                        return
                    }
                    r = /^#EXT-X-VERSION:?([0-9.]*)?/.exec(e);
                    if (r) {
                        n = {
                            type: "tag",
                            tagType: "version"
                        };
                        if (r[1]) {
                            n.version = parseInt(r[1], 10)
                        }
                        i.trigger("data", n);
                        return
                    }
                    r = /^#EXT-X-MEDIA-SEQUENCE:?(\-?[0-9.]*)?/.exec(e);
                    if (r) {
                        n = {
                            type: "tag",
                            tagType: "media-sequence"
                        };
                        if (r[1]) {
                            n.number = parseInt(r[1], 10)
                        }
                        i.trigger("data", n);
                        return
                    }
                    r = /^#EXT-X-DISCONTINUITY-SEQUENCE:?(\-?[0-9.]*)?/.exec(e);
                    if (r) {
                        n = {
                            type: "tag",
                            tagType: "discontinuity-sequence"
                        };
                        if (r[1]) {
                            n.number = parseInt(r[1], 10)
                        }
                        i.trigger("data", n);
                        return
                    }
                    r = /^#EXT-X-PLAYLIST-TYPE:?(.*)?$/.exec(e);
                    if (r) {
                        n = {
                            type: "tag",
                            tagType: "playlist-type"
                        };
                        if (r[1]) {
                            n.playlistType = r[1]
                        }
                        i.trigger("data", n);
                        return
                    }
                    r = /^#EXT-X-BYTERANGE:?(.*)?$/.exec(e);
                    if (r) {
                        n = X(pt(r[1]), {
                            type: "tag",
                            tagType: "byterange"
                        });
                        i.trigger("data", n);
                        return
                    }
                    r = /^#EXT-X-ALLOW-CACHE:?(YES|NO)?/.exec(e);
                    if (r) {
                        n = {
                            type: "tag",
                            tagType: "allow-cache"
                        };
                        if (r[1]) {
                            n.allowed = !/NO/.test(r[1])
                        }
                        i.trigger("data", n);
                        return
                    }
                    r = /^#EXT-X-MAP:?(.*)$/.exec(e);
                    if (r) {
                        n = {
                            type: "tag",
                            tagType: "map"
                        };
                        if (r[1]) {
                            var a = vt(r[1]);
                            if (a.URI) {
                                n.uri = a.URI
                            }
                            if (a.BYTERANGE) {
                                n.byterange = pt(a.BYTERANGE)
                            }
                        }
                        i.trigger("data", n);
                        return
                    }
                    r = /^#EXT-X-STREAM-INF:?(.*)$/.exec(e);
                    if (r) {
                        n = {
                            type: "tag",
                            tagType: "stream-inf"
                        };
                        if (r[1]) {
                            n.attributes = vt(r[1]);
                            if (n.attributes.RESOLUTION) {
                                var s = n.attributes.RESOLUTION.split("x");
                                var o = {};
                                if (s[0]) {
                                    o.width = parseInt(s[0], 10)
                                }
                                if (s[1]) {
                                    o.height = parseInt(s[1], 10)
                                }
                                n.attributes.RESOLUTION = o
                            }
                            if (n.attributes.BANDWIDTH) {
                                n.attributes.BANDWIDTH = parseInt(n.attributes.BANDWIDTH, 10)
                            }
                            if (n.attributes["PROGRAM-ID"]) {
                                n.attributes["PROGRAM-ID"] = parseInt(n.attributes["PROGRAM-ID"], 10)
                            }
                        }
                        i.trigger("data", n);
                        return
                    }
                    r = /^#EXT-X-MEDIA:?(.*)$/.exec(e);
                    if (r) {
                        n = {
                            type: "tag",
                            tagType: "media"
                        };
                        if (r[1]) {
                            n.attributes = vt(r[1])
                        }
                        i.trigger("data", n);
                        return
                    }
                    r = /^#EXT-X-ENDLIST/.exec(e);
                    if (r) {
                        i.trigger("data", {
                            type: "tag",
                            tagType: "endlist"
                        });
                        return
                    }
                    r = /^#EXT-X-DISCONTINUITY/.exec(e);
                    if (r) {
                        i.trigger("data", {
                            type: "tag",
                            tagType: "discontinuity"
                        });
                        return
                    }
                    r = /^#EXT-X-PROGRAM-DATE-TIME:?(.*)$/.exec(e);
                    if (r) {
                        n = {
                            type: "tag",
                            tagType: "program-date-time"
                        };
                        if (r[1]) {
                            n.dateTimeString = r[1];
                            n.dateTimeObject = new Date(r[1])
                        }
                        i.trigger("data", n);
                        return
                    }
                    r = /^#EXT-X-KEY:?(.*)$/.exec(e);
                    if (r) {
                        n = {
                            type: "tag",
                            tagType: "key"
                        };
                        if (r[1]) {
                            n.attributes = vt(r[1]);
                            if (n.attributes.IV) {
                                if (n.attributes.IV.substring(0, 2).toLowerCase() === "0x") {
                                    n.attributes.IV = n.attributes.IV.substring(2)
                                }
                                n.attributes.IV = n.attributes.IV.match(/.{8}/g);
                                n.attributes.IV[0] = parseInt(n.attributes.IV[0], 16);
                                n.attributes.IV[1] = parseInt(n.attributes.IV[1], 16);
                                n.attributes.IV[2] = parseInt(n.attributes.IV[2], 16);
                                n.attributes.IV[3] = parseInt(n.attributes.IV[3], 16);
                                n.attributes.IV = new Uint32Array(n.attributes.IV)
                            }
                        }
                        i.trigger("data", n);
                        return
                    }
                    r = /^#EXT-X-START:?(.*)$/.exec(e);
                    if (r) {
                        n = {
                            type: "tag",
                            tagType: "start"
                        };
                        if (r[1]) {
                            n.attributes = vt(r[1]);
                            n.attributes["TIME-OFFSET"] = parseFloat(n.attributes["TIME-OFFSET"]);
                            n.attributes.PRECISE = /YES/.test(n.attributes.PRECISE)
                        }
                        i.trigger("data", n);
                        return
                    }
                    r = /^#EXT-X-CUE-OUT-CONT:?(.*)?$/.exec(e);
                    if (r) {
                        n = {
                            type: "tag",
                            tagType: "cue-out-cont"
                        };
                        if (r[1]) {
                            n.data = r[1]
                        } else {
                            n.data = ""
                        }
                        i.trigger("data", n);
                        return
                    }
                    r = /^#EXT-X-CUE-OUT:?(.*)?$/.exec(e);
                    if (r) {
                        n = {
                            type: "tag",
                            tagType: "cue-out"
                        };
                        if (r[1]) {
                            n.data = r[1]
                        } else {
                            n.data = ""
                        }
                        i.trigger("data", n);
                        return
                    }
                    r = /^#EXT-X-CUE-IN:?(.*)?$/.exec(e);
                    if (r) {
                        n = {
                            type: "tag",
                            tagType: "cue-in"
                        };
                        if (r[1]) {
                            n.data = r[1]
                        } else {
                            n.data = ""
                        }
                        i.trigger("data", n);
                        return
                    }
                    r = /^#EXT-X-SKIP:(.*)$/.exec(e);
                    if (r && r[1]) {
                        n = {
                            type: "tag",
                            tagType: "skip"
                        };
                        n.attributes = vt(r[1]);
                        if (n.attributes.hasOwnProperty("SKIPPED-SEGMENTS")) {
                            n.attributes["SKIPPED-SEGMENTS"] = parseInt(n.attributes["SKIPPED-SEGMENTS"], 10)
                        }
                        if (n.attributes.hasOwnProperty("RECENTLY-REMOVED-DATERANGES")) {
                            n.attributes["RECENTLY-REMOVED-DATERANGES"] = n.attributes["RECENTLY-REMOVED-DATERANGES"].split(ht)
                        }
                        i.trigger("data", n);
                        return
                    }
                    r = /^#EXT-X-PART:(.*)$/.exec(e);
                    if (r && r[1]) {
                        n = {
                            type: "tag",
                            tagType: "part"
                        };
                        n.attributes = vt(r[1]);
                        ["DURATION"].forEach((function(e) {
                            if (n.attributes.hasOwnProperty(e)) {
                                n.attributes[e] = parseFloat(n.attributes[e])
                            }
                        }));
                        ["INDEPENDENT", "GAP"].forEach((function(e) {
                            if (n.attributes.hasOwnProperty(e)) {
                                n.attributes[e] = /YES/.test(n.attributes[e])
                            }
                        }));
                        if (n.attributes.hasOwnProperty("BYTERANGE")) {
                            n.attributes.byterange = pt(n.attributes.BYTERANGE)
                        }
                        i.trigger("data", n);
                        return
                    }
                    r = /^#EXT-X-SERVER-CONTROL:(.*)$/.exec(e);
                    if (r && r[1]) {
                        n = {
                            type: "tag",
                            tagType: "server-control"
                        };
                        n.attributes = vt(r[1]);
                        ["CAN-SKIP-UNTIL", "PART-HOLD-BACK", "HOLD-BACK"].forEach((function(e) {
                            if (n.attributes.hasOwnProperty(e)) {
                                n.attributes[e] = parseFloat(n.attributes[e])
                            }
                        }));
                        ["CAN-SKIP-DATERANGES", "CAN-BLOCK-RELOAD"].forEach((function(e) {
                            if (n.attributes.hasOwnProperty(e)) {
                                n.attributes[e] = /YES/.test(n.attributes[e])
                            }
                        }));
                        i.trigger("data", n);
                        return
                    }
                    r = /^#EXT-X-PART-INF:(.*)$/.exec(e);
                    if (r && r[1]) {
                        n = {
                            type: "tag",
                            tagType: "part-inf"
                        };
                        n.attributes = vt(r[1]);
                        ["PART-TARGET"].forEach((function(e) {
                            if (n.attributes.hasOwnProperty(e)) {
                                n.attributes[e] = parseFloat(n.attributes[e])
                            }
                        }));
                        i.trigger("data", n);
                        return
                    }
                    r = /^#EXT-X-PRELOAD-HINT:(.*)$/.exec(e);
                    if (r && r[1]) {
                        n = {
                            type: "tag",
                            tagType: "preload-hint"
                        };
                        n.attributes = vt(r[1]);
                        ["BYTERANGE-START", "BYTERANGE-LENGTH"].forEach((function(e) {
                            if (n.attributes.hasOwnProperty(e)) {
                                n.attributes[e] = parseInt(n.attributes[e], 10);
                                var t = e === "BYTERANGE-LENGTH" ? "length" : "offset";
                                n.attributes.byterange = n.attributes.byterange || {};
                                n.attributes.byterange[t] = n.attributes[e];
                                delete n.attributes[e]
                            }
                        }));
                        i.trigger("data", n);
                        return
                    }
                    r = /^#EXT-X-RENDITION-REPORT:(.*)$/.exec(e);
                    if (r && r[1]) {
                        n = {
                            type: "tag",
                            tagType: "rendition-report"
                        };
                        n.attributes = vt(r[1]);
                        ["LAST-MSN", "LAST-PART"].forEach((function(e) {
                            if (n.attributes.hasOwnProperty(e)) {
                                n.attributes[e] = parseInt(n.attributes[e], 10)
                            }
                        }));
                        i.trigger("data", n);
                        return
                    }
                    i.trigger("data", {
                        type: "tag",
                        data: e.slice(4)
                    })
                }))
            };
            i.addParser = function e(t) {
                var i = this;
                var r = t.expression,
                    n = t.customType,
                    a = t.dataParser,
                    s = t.segment;
                if (typeof a !== "function") {
                    a = function e(t) {
                        return t
                    }
                }
                this.customParsers.push((function(e) {
                    var t = r.exec(e);
                    if (t) {
                        i.trigger("data", {
                            type: "custom",
                            data: a(e),
                            customType: n,
                            segment: s
                        });
                        return true
                    }
                }))
            };
            i.addTagMapper = function e(t) {
                var i = t.expression,
                    r = t.map;
                var n = function e(t) {
                    if (i.test(t)) {
                        return r(t)
                    }
                    return t
                };
                this.tagMappers.push(n)
            };
            return t
        }(lt);
        var yt = function e(t) {
            return t.toLowerCase().replace(/-(\w)/g, (function(e) {
                return e[1].toUpperCase()
            }))
        };
        var _t = function e(t) {
            var i = {};
            Object.keys(t).forEach((function(e) {
                i[yt(e)] = t[e]
            }));
            return i
        };
        var bt = function e(t) {
            var i = t.serverControl,
                r = t.targetDuration,
                n = t.partTargetDuration;
            if (!i) {
                return
            }
            var a = "#EXT-X-SERVER-CONTROL";
            var s = "holdBack";
            var o = "partHoldBack";
            var u = r && r * 3;
            var l = n && n * 2;
            if (r && !i.hasOwnProperty(s)) {
                i[s] = u;
                this.trigger("info", {
                    message: a + " defaulting HOLD-BACK to targetDuration * 3 (" + u + ")."
                })
            }
            if (u && i[s] < u) {
                this.trigger("warn", {
                    message: a + " clamping HOLD-BACK (" + i[s] + ") to targetDuration * 3 (" + u + ")"
                });
                i[s] = u
            }
            if (n && !i.hasOwnProperty(o)) {
                i[o] = n * 3;
                this.trigger("info", {
                    message: a + " defaulting PART-HOLD-BACK to partTargetDuration * 3 (" + i[o] + ")."
                })
            }
            if (n && i[o] < l) {
                this.trigger("warn", {
                    message: a + " clamping PART-HOLD-BACK (" + i[o] + ") to partTargetDuration * 2 (" + l + ")."
                });
                i[o] = l
            }
        };
        var Tt = function(e) {
            J(t, e);

            function t() {
                var t;
                t = e.call(this) || this;
                t.lineStream = new dt;
                t.parseStream = new gt;
                t.lineStream.pipe(t.parseStream);
                var i = Y(t);
                var r = [];
                var n = {};
                var a;
                var s;
                var o = false;
                var u = function e() {};
                var l = {
                    AUDIO: {},
                    VIDEO: {},
                    "CLOSED-CAPTIONS": {},
                    SUBTITLES: {}
                };
                var c = "urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed";
                var f = 0;
                t.manifest = {
                    allowCache: true,
                    discontinuityStarts: [],
                    segments: []
                };
                var d = 0;
                var h = 0;
                t.on("end", (function() {
                    if (n.uri || !n.parts && !n.preloadHints) {
                        return
                    }
                    if (!n.map && a) {
                        n.map = a
                    }
                    if (!n.key && s) {
                        n.key = s
                    }
                    if (!n.timeline && typeof f === "number") {
                        n.timeline = f
                    }
                    t.manifest.preloadSegment = n
                }));
                t.parseStream.on("data", (function(e) {
                    var t;
                    var p;
                    ({
                        tag: function m() {
                            ({
                                version: function t() {
                                    if (e.version) {
                                        this.manifest.version = e.version
                                    }
                                },
                                "allow-cache": function t() {
                                    this.manifest.allowCache = e.allowed;
                                    if (!("allowed" in e)) {
                                        this.trigger("info", {
                                            message: "defaulting allowCache to YES"
                                        });
                                        this.manifest.allowCache = true
                                    }
                                },
                                byterange: function t() {
                                    var t = {};
                                    if ("length" in e) {
                                        n.byterange = t;
                                        t.length = e.length;
                                        if (!("offset" in e)) {
                                            e.offset = d
                                        }
                                    }
                                    if ("offset" in e) {
                                        n.byterange = t;
                                        t.offset = e.offset
                                    }
                                    d = t.offset + t.length
                                },
                                endlist: function e() {
                                    this.manifest.endList = true
                                },
                                inf: function t() {
                                    if (!("mediaSequence" in this.manifest)) {
                                        this.manifest.mediaSequence = 0;
                                        this.trigger("info", {
                                            message: "defaulting media sequence to zero"
                                        })
                                    }
                                    if (!("discontinuitySequence" in this.manifest)) {
                                        this.manifest.discontinuitySequence = 0;
                                        this.trigger("info", {
                                            message: "defaulting discontinuity sequence to zero"
                                        })
                                    }
                                    if (e.duration > 0) {
                                        n.duration = e.duration
                                    }
                                    if (e.duration === 0) {
                                        n.duration = .01;
                                        this.trigger("info", {
                                            message: "updating zero segment duration to a small value"
                                        })
                                    }
                                    this.manifest.segments = r
                                },
                                key: function t() {
                                    if (!e.attributes) {
                                        this.trigger("warn", {
                                            message: "ignoring key declaration without attribute list"
                                        });
                                        return
                                    }
                                    if (e.attributes.METHOD === "NONE") {
                                        s = null;
                                        return
                                    }
                                    if (!e.attributes.URI) {
                                        this.trigger("warn", {
                                            message: "ignoring key declaration without URI"
                                        });
                                        return
                                    }
                                    if (e.attributes.KEYFORMAT === "com.apple.streamingkeydelivery") {
                                        this.manifest.contentProtection = this.manifest.contentProtection || {};
                                        this.manifest.contentProtection["com.apple.fps.1_0"] = {
                                            attributes: e.attributes
                                        };
                                        return
                                    }
                                    if (e.attributes.KEYFORMAT === "com.microsoft.playready") {
                                        this.manifest.contentProtection = this.manifest.contentProtection || {};
                                        this.manifest.contentProtection["com.microsoft.playready"] = {
                                            uri: e.attributes.URI
                                        };
                                        return
                                    }
                                    if (e.attributes.KEYFORMAT === c) {
                                        var i = ["SAMPLE-AES", "SAMPLE-AES-CTR", "SAMPLE-AES-CENC"];
                                        if (i.indexOf(e.attributes.METHOD) === -1) {
                                            this.trigger("warn", {
                                                message: "invalid key method provided for Widevine"
                                            });
                                            return
                                        }
                                        if (e.attributes.METHOD === "SAMPLE-AES-CENC") {
                                            this.trigger("warn", {
                                                message: "SAMPLE-AES-CENC is deprecated, please use SAMPLE-AES-CTR instead"
                                            })
                                        }
                                        if (e.attributes.URI.substring(0, 23) !== "data:text/plain;base64,") {
                                            this.trigger("warn", {
                                                message: "invalid key URI provided for Widevine"
                                            });
                                            return
                                        }
                                        if (!(e.attributes.KEYID && e.attributes.KEYID.substring(0, 2) === "0x")) {
                                            this.trigger("warn", {
                                                message: "invalid key ID provided for Widevine"
                                            });
                                            return
                                        }
                                        this.manifest.contentProtection = this.manifest.contentProtection || {};
                                        this.manifest.contentProtection["com.widevine.alpha"] = {
                                            attributes: {
                                                schemeIdUri: e.attributes.KEYFORMAT,
                                                keyId: e.attributes.KEYID.substring(2)
                                            },
                                            pssh: ft(e.attributes.URI.split(",")[1])
                                        };
                                        return
                                    }
                                    if (!e.attributes.METHOD) {
                                        this.trigger("warn", {
                                            message: "defaulting key method to AES-128"
                                        })
                                    }
                                    s = {
                                        method: e.attributes.METHOD || "AES-128",
                                        uri: e.attributes.URI
                                    };
                                    if (typeof e.attributes.IV !== "undefined") {
                                        s.iv = e.attributes.IV
                                    }
                                },
                                "media-sequence": function t() {
                                    if (!isFinite(e.number)) {
                                        this.trigger("warn", {
                                            message: "ignoring invalid media sequence: " + e.number
                                        });
                                        return
                                    }
                                    this.manifest.mediaSequence = e.number
                                },
                                "discontinuity-sequence": function t() {
                                    if (!isFinite(e.number)) {
                                        this.trigger("warn", {
                                            message: "ignoring invalid discontinuity sequence: " + e.number
                                        });
                                        return
                                    }
                                    this.manifest.discontinuitySequence = e.number;
                                    f = e.number
                                },
                                "playlist-type": function t() {
                                    if (!/VOD|EVENT/.test(e.playlistType)) {
                                        this.trigger("warn", {
                                            message: "ignoring unknown playlist type: " + e.playlist
                                        });
                                        return
                                    }
                                    this.manifest.playlistType = e.playlistType
                                },
                                map: function t() {
                                    a = {};
                                    if (e.uri) {
                                        a.uri = e.uri
                                    }
                                    if (e.byterange) {
                                        a.byterange = e.byterange
                                    }
                                    if (s) {
                                        a.key = s
                                    }
                                },
                                "stream-inf": function t() {
                                    this.manifest.playlists = r;
                                    this.manifest.mediaGroups = this.manifest.mediaGroups || l;
                                    if (!e.attributes) {
                                        this.trigger("warn", {
                                            message: "ignoring empty stream-inf attributes"
                                        });
                                        return
                                    }
                                    if (!n.attributes) {
                                        n.attributes = {}
                                    }
                                    X(n.attributes, e.attributes)
                                },
                                media: function i() {
                                    this.manifest.mediaGroups = this.manifest.mediaGroups || l;
                                    if (!(e.attributes && e.attributes.TYPE && e.attributes["GROUP-ID"] && e.attributes.NAME)) {
                                        this.trigger("warn", {
                                            message: "ignoring incomplete or missing media group"
                                        });
                                        return
                                    }
                                    var r = this.manifest.mediaGroups[e.attributes.TYPE];
                                    r[e.attributes["GROUP-ID"]] = r[e.attributes["GROUP-ID"]] || {};
                                    t = r[e.attributes["GROUP-ID"]];
                                    p = {
                                        default: /yes/i.test(e.attributes.DEFAULT)
                                    };
                                    if (p.default) {
                                        p.autoselect = true
                                    } else {
                                        p.autoselect = /yes/i.test(e.attributes.AUTOSELECT)
                                    }
                                    if (e.attributes.LANGUAGE) {
                                        p.language = e.attributes.LANGUAGE
                                    }
                                    if (e.attributes.URI) {
                                        p.uri = e.attributes.URI
                                    }
                                    if (e.attributes["INSTREAM-ID"]) {
                                        p.instreamId = e.attributes["INSTREAM-ID"]
                                    }
                                    if (e.attributes.CHARACTERISTICS) {
                                        p.characteristics = e.attributes.CHARACTERISTICS
                                    }
                                    if (e.attributes.FORCED) {
                                        p.forced = /yes/i.test(e.attributes.FORCED)
                                    }
                                    t[e.attributes.NAME] = p
                                },
                                discontinuity: function e() {
                                    f += 1;
                                    n.discontinuity = true;
                                    this.manifest.discontinuityStarts.push(r.length)
                                },
                                "program-date-time": function t() {
                                    if (typeof this.manifest.dateTimeString === "undefined") {
                                        this.manifest.dateTimeString = e.dateTimeString;
                                        this.manifest.dateTimeObject = e.dateTimeObject
                                    }
                                    n.dateTimeString = e.dateTimeString;
                                    n.dateTimeObject = e.dateTimeObject
                                },
                                targetduration: function t() {
                                    if (!isFinite(e.duration) || e.duration < 0) {
                                        this.trigger("warn", {
                                            message: "ignoring invalid target duration: " + e.duration
                                        });
                                        return
                                    }
                                    this.manifest.targetDuration = e.duration;
                                    bt.call(this, this.manifest)
                                },
                                start: function t() {
                                    if (!e.attributes || isNaN(e.attributes["TIME-OFFSET"])) {
                                        this.trigger("warn", {
                                            message: "ignoring start declaration without appropriate attribute list"
                                        });
                                        return
                                    }
                                    this.manifest.start = {
                                        timeOffset: e.attributes["TIME-OFFSET"],
                                        precise: e.attributes.PRECISE
                                    }
                                },
                                "cue-out": function t() {
                                    n.cueOut = e.data
                                },
                                "cue-out-cont": function t() {
                                    n.cueOutCont = e.data
                                },
                                "cue-in": function t() {
                                    n.cueIn = e.data
                                },
                                skip: function t() {
                                    this.manifest.skip = _t(e.attributes);
                                    this.warnOnMissingAttributes_("#EXT-X-SKIP", e.attributes, ["SKIPPED-SEGMENTS"])
                                },
                                part: function t() {
                                    var i = this;
                                    o = true;
                                    var r = this.manifest.segments.length;
                                    var t = _t(e.attributes);
                                    n.parts = n.parts || [];
                                    n.parts.push(t);
                                    if (t.byterange) {
                                        if (!t.byterange.hasOwnProperty("offset")) {
                                            t.byterange.offset = h
                                        }
                                        h = t.byterange.offset + t.byterange.length
                                    }
                                    var a = n.parts.length - 1;
                                    this.warnOnMissingAttributes_("#EXT-X-PART #" + a + " for segment #" + r, e.attributes, ["URI", "DURATION"]);
                                    if (this.manifest.renditionReports) {
                                        this.manifest.renditionReports.forEach((function(e, t) {
                                            if (!e.hasOwnProperty("lastPart")) {
                                                i.trigger("warn", {
                                                    message: "#EXT-X-RENDITION-REPORT #" + t + " lacks required attribute(s): LAST-PART"
                                                })
                                            }
                                        }))
                                    }
                                },
                                "server-control": function t() {
                                    var i = this.manifest.serverControl = _t(e.attributes);
                                    if (!i.hasOwnProperty("canBlockReload")) {
                                        i.canBlockReload = false;
                                        this.trigger("info", {
                                            message: "#EXT-X-SERVER-CONTROL defaulting CAN-BLOCK-RELOAD to false"
                                        })
                                    }
                                    bt.call(this, this.manifest);
                                    if (i.canSkipDateranges && !i.hasOwnProperty("canSkipUntil")) {
                                        this.trigger("warn", {
                                            message: "#EXT-X-SERVER-CONTROL lacks required attribute CAN-SKIP-UNTIL which is required when CAN-SKIP-DATERANGES is set"
                                        })
                                    }
                                },
                                "preload-hint": function t() {
                                    var i = this.manifest.segments.length;
                                    var r = _t(e.attributes);
                                    var a = r.type && r.type === "PART";
                                    n.preloadHints = n.preloadHints || [];
                                    n.preloadHints.push(r);
                                    if (r.byterange) {
                                        if (!r.byterange.hasOwnProperty("offset")) {
                                            r.byterange.offset = a ? h : 0;
                                            if (a) {
                                                h = r.byterange.offset + r.byterange.length
                                            }
                                        }
                                    }
                                    var s = n.preloadHints.length - 1;
                                    this.warnOnMissingAttributes_("#EXT-X-PRELOAD-HINT #" + s + " for segment #" + i, e.attributes, ["TYPE", "URI"]);
                                    if (!r.type) {
                                        return
                                    }
                                    for (var o = 0; o < n.preloadHints.length - 1; o++) {
                                        var u = n.preloadHints[o];
                                        if (!u.type) {
                                            continue
                                        }
                                        if (u.type === r.type) {
                                            this.trigger("warn", {
                                                message: "#EXT-X-PRELOAD-HINT #" + s + " for segment #" + i + " has the same TYPE " + r.type + " as preload hint #" + o
                                            })
                                        }
                                    }
                                },
                                "rendition-report": function t() {
                                    var i = _t(e.attributes);
                                    this.manifest.renditionReports = this.manifest.renditionReports || [];
                                    this.manifest.renditionReports.push(i);
                                    var r = this.manifest.renditionReports.length - 1;
                                    var n = ["LAST-MSN", "URI"];
                                    if (o) {
                                        n.push("LAST-PART")
                                    }
                                    this.warnOnMissingAttributes_("#EXT-X-RENDITION-REPORT #" + r, e.attributes, n)
                                },
                                "part-inf": function t() {
                                    this.manifest.partInf = _t(e.attributes);
                                    this.warnOnMissingAttributes_("#EXT-X-PART-INF", e.attributes, ["PART-TARGET"]);
                                    if (this.manifest.partInf.partTarget) {
                                        this.manifest.partTargetDuration = this.manifest.partInf.partTarget
                                    }
                                    bt.call(this, this.manifest)
                                }
                            } [e.tagType] || u).call(i)
                        },
                        uri: function t() {
                            n.uri = e.uri;
                            r.push(n);
                            if (this.manifest.targetDuration && !("duration" in n)) {
                                this.trigger("warn", {
                                    message: "defaulting segment duration to the target duration"
                                });
                                n.duration = this.manifest.targetDuration
                            }
                            if (s) {
                                n.key = s
                            }
                            n.timeline = f;
                            if (a) {
                                n.map = a
                            }
                            h = 0;
                            n = {}
                        },
                        comment: function e() {},
                        custom: function t() {
                            if (e.segment) {
                                n.custom = n.custom || {};
                                n.custom[e.customType] = e.data
                            } else {
                                this.manifest.custom = this.manifest.custom || {};
                                this.manifest.custom[e.customType] = e.data
                            }
                        }
                    })[e.type].call(i)
                }));
                return t
            }
            var i = t.prototype;
            i.warnOnMissingAttributes_ = function e(t, i, r) {
                var n = [];
                r.forEach((function(e) {
                    if (!i.hasOwnProperty(e)) {
                        n.push(e)
                    }
                }));
                if (n.length) {
                    this.trigger("warn", {
                        message: t + " lacks required attribute(s): " + n.join(", ")
                    })
                }
            };
            i.push = function e(t) {
                this.lineStream.push(t)
            };
            i.end = function e() {
                this.lineStream.push("\n");
                this.trigger("end")
            };
            i.addParser = function e(t) {
                this.parseStream.addParser(t)
            };
            i.addTagMapper = function e(t) {
                this.parseStream.addTagMapper(t)
            };
            return t
        }(lt);
        var St = {
            mp4: /^(av0?1|avc0?[1234]|vp0?9|flac|opus|mp3|mp4a|mp4v|stpp.ttml.im1t)/,
            webm: /^(vp0?[89]|av0?1|opus|vorbis)/,
            ogg: /^(vp0?[89]|theora|flac|opus|vorbis)/,
            video: /^(av0?1|avc0?[1234]|vp0?[89]|hvc1|hev1|theora|mp4v)/,
            audio: /^(mp4a|flac|vorbis|opus|ac-[34]|ec-3|alac|mp3|speex|aac)/,
            text: /^(stpp.ttml.im1t)/,
            muxerVideo: /^(avc0?1)/,
            muxerAudio: /^(mp4a)/,
            muxerText: /a^/
        };
        var Et = ["video", "audio", "text"];
        var wt = ["Video", "Audio", "Text"];
        var kt = function e(t) {
            if (!t) {
                return t
            }
            return t.replace(/avc1\.(\d+)\.(\d+)/i, (function(e, t, i) {
                var r = ("00" + Number(t).toString(16)).slice(-2);
                var n = ("00" + Number(i).toString(16)).slice(-2);
                return "avc1." + r + "00" + n
            }))
        };
        var Ct = function e(t) {
            if (t === void 0) {
                t = ""
            }
            var i = t.split(",");
            var r = [];
            i.forEach((function(e) {
                e = e.trim();
                var t;
                Et.forEach((function(i) {
                    var n = St[i].exec(e.toLowerCase());
                    if (!n || n.length <= 1) {
                        return
                    }
                    t = i;
                    var a = e.substring(0, n[1].length);
                    var s = e.replace(a, "");
                    r.push({
                        type: a,
                        details: s,
                        mediaType: i
                    })
                }));
                if (!t) {
                    r.push({
                        type: e,
                        details: "",
                        mediaType: "unknown"
                    })
                }
            }));
            return r
        };
        var It = function e(t, i) {
            if (!t.mediaGroups.AUDIO || !i) {
                return null
            }
            var r = t.mediaGroups.AUDIO[i];
            if (!r) {
                return null
            }
            for (var n in r) {
                var a = r[n];
                if (a.default && a.playlists) {
                    return Ct(a.playlists[0].attributes.CODECS)
                }
            }
            return null
        };
        var At = function e(t) {
            if (t === void 0) {
                t = ""
            }
            return St.audio.test(t.trim().toLowerCase())
        };
        var xt = function e(t) {
            if (t === void 0) {
                t = ""
            }
            return St.text.test(t.trim().toLowerCase())
        };
        var Pt = function e(t) {
            if (!t || typeof t !== "string") {
                return
            }
            var i = t.toLowerCase().split(",").map((function(e) {
                return kt(e.trim())
            }));
            var r = "video";
            if (i.length === 1 && At(i[0])) {
                r = "audio"
            } else if (i.length === 1 && xt(i[0])) {
                r = "application"
            }
            var n = "mp4";
            if (i.every((function(e) {
                    return St.mp4.test(e)
                }))) {
                n = "mp4"
            } else if (i.every((function(e) {
                    return St.webm.test(e)
                }))) {
                n = "webm"
            } else if (i.every((function(e) {
                    return St.ogg.test(e)
                }))) {
                n = "ogg"
            }
            return r + "/" + n + ';codecs="' + t + '"'
        };
        var Ot = function e(t) {
            if (t === void 0) {
                t = ""
            }
            return s.MediaSource && s.MediaSource.isTypeSupported && s.MediaSource.isTypeSupported(Pt(t)) || false
        };
        var Dt = function e(t) {
            if (t === void 0) {
                t = ""
            }
            return t.toLowerCase().split(",").every((function(e) {
                e = e.trim();
                for (var t = 0; t < wt.length; t++) {
                    var i = wt[t];
                    if (St["muxer" + i].test(e)) {
                        return true
                    }
                }
                return false
            }))
        };
        var Lt = "mp4a.40.2";
        var Nt = "avc1.4d400d";
        var Rt = /^(audio|video|application)\/(x-|vnd\.apple\.)?mpegurl/i;
        var Mt = /^application\/dash\+xml/i;
        var Ut = function e(t) {
            if (Rt.test(t)) {
                return "hls"
            }
            if (Mt.test(t)) {
                return "dash"
            }
            if (t === "application/vnd.videojs.vhs+json") {
                return "vhs-json"
            }
            return null
        };
        var Bt = function e(t) {
            return t.toString(2).length
        };
        var Ft = function e(t) {
            return Math.ceil(Bt(t) / 8)
        };
        var jt = function e(t) {
            if (ArrayBuffer.isView === "function") {
                return ArrayBuffer.isView(t)
            }
            return t && t.buffer instanceof ArrayBuffer
        };
        var Ht = function e(t) {
            return jt(t)
        };
        var qt = function e(t) {
            if (t instanceof Uint8Array) {
                return t
            }
            if (!Array.isArray(t) && !Ht(t) && !(t instanceof ArrayBuffer)) {
                if (typeof t !== "number" || typeof t === "number" && t !== t) {
                    t = 0
                } else {
                    t = [t]
                }
            }
            return new Uint8Array(t && t.buffer || t, t && t.byteOffset || 0, t && t.byteLength || 0)
        };
        var Vt = s.BigInt || Number;
        var Wt = [Vt("0x1"), Vt("0x100"), Vt("0x10000"), Vt("0x1000000"), Vt("0x100000000"), Vt("0x10000000000"), Vt("0x1000000000000"), Vt("0x100000000000000"), Vt("0x10000000000000000")];
        (function() {
            var e = new Uint16Array([65484]);
            var t = new Uint8Array(e.buffer, e.byteOffset, e.byteLength);
            if (t[0] === 255) {
                return "big"
            }
            if (t[0] === 204) {
                return "little"
            }
            return "unknown"
        })();
        var Gt = function e(t, i) {
            var r = i === void 0 ? {} : i,
                n = r.signed,
                a = n === void 0 ? false : n,
                s = r.le,
                o = s === void 0 ? false : s;
            t = qt(t);
            var u = o ? "reduce" : "reduceRight";
            var l = t[u] ? t[u] : Array.prototype[u];
            var c = l.call(t, (function(e, i, r) {
                var n = o ? r : Math.abs(r + 1 - t.length);
                return e + Vt(i) * Wt[n]
            }), Vt(0));
            if (a) {
                var f = Wt[t.length] / Vt(2) - Vt(1);
                c = Vt(c);
                if (c > f) {
                    c -= f;
                    c -= f;
                    c -= Vt(2)
                }
            }
            return Number(c)
        };
        var Xt = function e(t, i) {
            var r = i === void 0 ? {} : i,
                n = r.le,
                a = n === void 0 ? false : n;
            if (typeof t !== "bigint" && typeof t !== "number" || typeof t === "number" && t !== t) {
                t = 0
            }
            t = Vt(t);
            var s = Ft(t);
            var o = new Uint8Array(new ArrayBuffer(s));
            for (var u = 0; u < s; u++) {
                var l = a ? u : Math.abs(u + 1 - o.length);
                o[l] = Number(t / Wt[u] & Vt(255));
                if (t < 0) {
                    o[l] = Math.abs(~o[l]);
                    o[l] -= u === 0 ? 1 : 2
                }
            }
            return o
        };
        var zt = function e(t, i) {
            if (typeof t !== "string" && t && typeof t.toString === "function") {
                t = t.toString()
            }
            if (typeof t !== "string") {
                return new Uint8Array
            }
            if (!i) {
                t = unescape(encodeURIComponent(t))
            }
            var r = new Uint8Array(t.length);
            for (var n = 0; n < t.length; n++) {
                r[n] = t.charCodeAt(n)
            }
            return r
        };
        var Kt = function e() {
            for (var t = arguments.length, i = new Array(t), r = 0; r < t; r++) {
                i[r] = arguments[r]
            }
            i = i.filter((function(e) {
                return e && (e.byteLength || e.length) && typeof e !== "string"
            }));
            if (i.length <= 1) {
                return qt(i[0])
            }
            var n = i.reduce((function(e, t, i) {
                return e + (t.byteLength || t.length)
            }), 0);
            var a = new Uint8Array(n);
            var s = 0;
            i.forEach((function(e) {
                e = qt(e);
                a.set(e, s);
                s += e.byteLength
            }));
            return a
        };
        var Yt = function e(t, i, r) {
            var n = r === void 0 ? {} : r,
                a = n.offset,
                s = a === void 0 ? 0 : a,
                o = n.mask,
                u = o === void 0 ? [] : o;
            t = qt(t);
            i = qt(i);
            var l = i.every ? i.every : Array.prototype.every;
            return i.length && t.length - s >= i.length && l.call(i, (function(e, i) {
                var r = u[i] ? u[i] & t[s + i] : t[s + i];
                return e === r
            }))
        };
        var $t = function e(t, i, r) {
            i.forEach((function(e) {
                for (var i in t.mediaGroups[e]) {
                    for (var n in t.mediaGroups[e][i]) {
                        var a = t.mediaGroups[e][i][n];
                        r(a, e, i, n)
                    }
                }
            }))
        };

        function Qt(e, t) {
            if (t === undefined) {
                t = Object
            }
            return t && typeof t.freeze === "function" ? t.freeze(e) : e
        }
        var Jt = Qt({
            HTML: "text/html",
            isHTML: function(e) {
                return e === Jt.HTML
            },
            XML_APPLICATION: "application/xml",
            XML_TEXT: "text/xml",
            XML_XHTML_APPLICATION: "application/xhtml+xml",
            XML_SVG_IMAGE: "image/svg+xml"
        });
        var Zt = Qt({
            HTML: "http://www.w3.org/1999/xhtml",
            isHTML: function(e) {
                return e === Zt.HTML
            },
            SVG: "http://www.w3.org/2000/svg",
            XML: "http://www.w3.org/XML/1998/namespace",
            XMLNS: "http://www.w3.org/2000/xmlns/"
        });
        var ei = Qt;
        var ti = Jt;
        var ii = Zt;
        var ri = {
            freeze: ei,
            MIME_TYPE: ti,
            NAMESPACE: ii
        };
        var ni = ri.NAMESPACE;

        function ai(e) {
            return e !== ""
        }

        function si(e) {
            return e ? e.split(/[\t\n\f\r ]+/).filter(ai) : []
        }

        function oi(e, t) {
            if (!e.hasOwnProperty(t)) {
                e[t] = true
            }
            return e
        }

        function ui(e) {
            if (!e) return [];
            var t = si(e);
            return Object.keys(t.reduce(oi, {}))
        }

        function li(e) {
            return function(t) {
                return e && e.indexOf(t) !== -1
            }
        }

        function ci(e, t) {
            for (var i in e) {
                t[i] = e[i]
            }
        }

        function fi(e, t) {
            var i = e.prototype;
            if (!(i instanceof t)) {
                function r() {}
                r.prototype = t.prototype;
                r = new r;
                ci(i, r);
                e.prototype = i = r
            }
            if (i.constructor != e) {
                if (typeof e != "function") {
                    console.error("unknown Class:" + e)
                }
                i.constructor = e
            }
        }
        var di = {};
        var hi = di.ELEMENT_NODE = 1;
        var pi = di.ATTRIBUTE_NODE = 2;
        var mi = di.TEXT_NODE = 3;
        var vi = di.CDATA_SECTION_NODE = 4;
        var gi = di.ENTITY_REFERENCE_NODE = 5;
        var yi = di.ENTITY_NODE = 6;
        var _i = di.PROCESSING_INSTRUCTION_NODE = 7;
        var bi = di.COMMENT_NODE = 8;
        var Ti = di.DOCUMENT_NODE = 9;
        var Si = di.DOCUMENT_TYPE_NODE = 10;
        var Ei = di.DOCUMENT_FRAGMENT_NODE = 11;
        var wi = di.NOTATION_NODE = 12;
        var ki = {};
        var Ci = {};
        ki.INDEX_SIZE_ERR = (Ci[1] = "Index size error", 1);
        ki.DOMSTRING_SIZE_ERR = (Ci[2] = "DOMString size error", 2);
        var Ii = ki.HIERARCHY_REQUEST_ERR = (Ci[3] = "Hierarchy request error", 3);
        ki.WRONG_DOCUMENT_ERR = (Ci[4] = "Wrong document", 4);
        ki.INVALID_CHARACTER_ERR = (Ci[5] = "Invalid character", 5);
        ki.NO_DATA_ALLOWED_ERR = (Ci[6] = "No data allowed", 6);
        ki.NO_MODIFICATION_ALLOWED_ERR = (Ci[7] = "No modification allowed", 7);
        var Ai = ki.NOT_FOUND_ERR = (Ci[8] = "Not found", 8);
        ki.NOT_SUPPORTED_ERR = (Ci[9] = "Not supported", 9);
        var xi = ki.INUSE_ATTRIBUTE_ERR = (Ci[10] = "Attribute in use", 10);
        ki.INVALID_STATE_ERR = (Ci[11] = "Invalid state", 11);
        ki.SYNTAX_ERR = (Ci[12] = "Syntax error", 12);
        ki.INVALID_MODIFICATION_ERR = (Ci[13] = "Invalid modification", 13);
        ki.NAMESPACE_ERR = (Ci[14] = "Invalid namespace", 14);
        ki.INVALID_ACCESS_ERR = (Ci[15] = "Invalid access", 15);

        function Pi(e, t) {
            if (t instanceof Error) {
                var i = t
            } else {
                i = this;
                Error.call(this, Ci[e]);
                this.message = Ci[e];
                if (Error.captureStackTrace) Error.captureStackTrace(this, Pi)
            }
            i.code = e;
            if (t) this.message = this.message + ": " + t;
            return i
        }
        Pi.prototype = Error.prototype;
        ci(ki, Pi);

        function Oi() {}
        Oi.prototype = {
            length: 0,
            item: function(e) {
                return this[e] || null
            },
            toString: function(e, t) {
                for (var i = [], r = 0; r < this.length; r++) {
                    fr(this[r], i, e, t)
                }
                return i.join("")
            }
        };

        function Di(e, t) {
            this._node = e;
            this._refresh = t;
            Li(this)
        }

        function Li(e) {
            var t = e._node._inc || e._node.ownerDocument._inc;
            if (e._inc != t) {
                var i = e._refresh(e._node);
                pr(e, "length", i.length);
                ci(i, e);
                e._inc = t
            }
        }
        Di.prototype.item = function(e) {
            Li(this);
            return this[e]
        };
        fi(Di, Oi);

        function Ni() {}

        function Ri(e, t) {
            var i = e.length;
            while (i--) {
                if (e[i] === t) {
                    return i
                }
            }
        }

        function Mi(e, t, i, r) {
            if (r) {
                t[Ri(t, r)] = i
            } else {
                t[t.length++] = i
            }
            if (e) {
                i.ownerElement = e;
                var n = e.ownerDocument;
                if (n) {
                    r && Wi(n, e, r);
                    Vi(n, e, i)
                }
            }
        }

        function Ui(e, t, i) {
            var r = Ri(t, i);
            if (r >= 0) {
                var n = t.length - 1;
                while (r < n) {
                    t[r] = t[++r]
                }
                t.length = n;
                if (e) {
                    var a = e.ownerDocument;
                    if (a) {
                        Wi(a, e, i);
                        i.ownerElement = null
                    }
                }
            } else {
                throw Pi(Ai, new Error(e.tagName + "@" + i))
            }
        }
        Ni.prototype = {
            length: 0,
            item: Oi.prototype.item,
            getNamedItem: function(e) {
                var t = this.length;
                while (t--) {
                    var i = this[t];
                    if (i.nodeName == e) {
                        return i
                    }
                }
            },
            setNamedItem: function(e) {
                var t = e.ownerElement;
                if (t && t != this._ownerElement) {
                    throw new Pi(xi)
                }
                var i = this.getNamedItem(e.nodeName);
                Mi(this._ownerElement, this, e, i);
                return i
            },
            setNamedItemNS: function(e) {
                var t = e.ownerElement,
                    i;
                if (t && t != this._ownerElement) {
                    throw new Pi(xi)
                }
                i = this.getNamedItemNS(e.namespaceURI, e.localName);
                Mi(this._ownerElement, this, e, i);
                return i
            },
            removeNamedItem: function(e) {
                var t = this.getNamedItem(e);
                Ui(this._ownerElement, this, t);
                return t
            },
            removeNamedItemNS: function(e, t) {
                var i = this.getNamedItemNS(e, t);
                Ui(this._ownerElement, this, i);
                return i
            },
            getNamedItemNS: function(e, t) {
                var i = this.length;
                while (i--) {
                    var r = this[i];
                    if (r.localName == t && r.namespaceURI == e) {
                        return r
                    }
                }
                return null
            }
        };

        function Bi() {}
        Bi.prototype = {
            hasFeature: function(e, t) {
                return true
            },
            createDocument: function(e, t, i) {
                var r = new qi;
                r.implementation = this;
                r.childNodes = new Oi;
                r.doctype = i || null;
                if (i) {
                    r.appendChild(i)
                }
                if (t) {
                    var n = r.createElementNS(e, t);
                    r.appendChild(n)
                }
                return r
            },
            createDocumentType: function(e, t, i) {
                var r = new tr;
                r.name = e;
                r.nodeName = e;
                r.publicId = t || "";
                r.systemId = i || "";
                return r
            }
        };

        function Fi() {}
        Fi.prototype = {
            firstChild: null,
            lastChild: null,
            previousSibling: null,
            nextSibling: null,
            attributes: null,
            parentNode: null,
            childNodes: null,
            ownerDocument: null,
            nodeValue: null,
            namespaceURI: null,
            prefix: null,
            localName: null,
            insertBefore: function(e, t) {
                return zi(this, e, t)
            },
            replaceChild: function(e, t) {
                this.insertBefore(e, t);
                if (t) {
                    this.removeChild(t)
                }
            },
            removeChild: function(e) {
                return Xi(this, e)
            },
            appendChild: function(e) {
                return this.insertBefore(e, null)
            },
            hasChildNodes: function() {
                return this.firstChild != null
            },
            cloneNode: function(e) {
                return hr(this.ownerDocument || this, this, e)
            },
            normalize: function() {
                var e = this.firstChild;
                while (e) {
                    var t = e.nextSibling;
                    if (t && t.nodeType == mi && e.nodeType == mi) {
                        this.removeChild(t);
                        e.appendData(t.data)
                    } else {
                        e.normalize();
                        e = t
                    }
                }
            },
            isSupported: function(e, t) {
                return this.ownerDocument.implementation.hasFeature(e, t)
            },
            hasAttributes: function() {
                return this.attributes.length > 0
            },
            lookupPrefix: function(e) {
                var t = this;
                while (t) {
                    var i = t._nsMap;
                    if (i) {
                        for (var r in i) {
                            if (i[r] == e) {
                                return r
                            }
                        }
                    }
                    t = t.nodeType == pi ? t.ownerDocument : t.parentNode
                }
                return null
            },
            lookupNamespaceURI: function(e) {
                var t = this;
                while (t) {
                    var i = t._nsMap;
                    if (i) {
                        if (e in i) {
                            return i[e]
                        }
                    }
                    t = t.nodeType == pi ? t.ownerDocument : t.parentNode
                }
                return null
            },
            isDefaultNamespace: function(e) {
                var t = this.lookupPrefix(e);
                return t == null
            }
        };

        function ji(e) {
            return e == "<" && "&lt;" || e == ">" && "&gt;" || e == "&" && "&amp;" || e == '"' && "&quot;" || "&#" + e.charCodeAt() + ";"
        }
        ci(di, Fi);
        ci(di, Fi.prototype);

        function Hi(e, t) {
            if (t(e)) {
                return true
            }
            if (e = e.firstChild) {
                do {
                    if (Hi(e, t)) {
                        return true
                    }
                } while (e = e.nextSibling)
            }
        }

        function qi() {}

        function Vi(e, t, i) {
            e && e._inc++;
            var r = i.namespaceURI;
            if (r === ni.XMLNS) {
                t._nsMap[i.prefix ? i.localName : ""] = i.value
            }
        }

        function Wi(e, t, i, r) {
            e && e._inc++;
            var n = i.namespaceURI;
            if (n === ni.XMLNS) {
                delete t._nsMap[i.prefix ? i.localName : ""]
            }
        }

        function Gi(e, t, i) {
            if (e && e._inc) {
                e._inc++;
                var r = t.childNodes;
                if (i) {
                    r[r.length++] = i
                } else {
                    var n = t.firstChild;
                    var a = 0;
                    while (n) {
                        r[a++] = n;
                        n = n.nextSibling
                    }
                    r.length = a
                }
            }
        }

        function Xi(e, t) {
            var i = t.previousSibling;
            var r = t.nextSibling;
            if (i) {
                i.nextSibling = r
            } else {
                e.firstChild = r
            }
            if (r) {
                r.previousSibling = i
            } else {
                e.lastChild = i
            }
            Gi(e.ownerDocument, e);
            return t
        }

        function zi(e, t, i) {
            var r = t.parentNode;
            if (r) {
                r.removeChild(t)
            }
            if (t.nodeType === Ei) {
                var n = t.firstChild;
                if (n == null) {
                    return t
                }
                var a = t.lastChild
            } else {
                n = a = t
            }
            var s = i ? i.previousSibling : e.lastChild;
            n.previousSibling = s;
            a.nextSibling = i;
            if (s) {
                s.nextSibling = n
            } else {
                e.firstChild = n
            }
            if (i == null) {
                e.lastChild = a
            } else {
                i.previousSibling = a
            }
            do {
                n.parentNode = e
            } while (n !== a && (n = n.nextSibling));
            Gi(e.ownerDocument || e, e);
            if (t.nodeType == Ei) {
                t.firstChild = t.lastChild = null
            }
            return t
        }

        function Ki(e, t) {
            var i = t.parentNode;
            if (i) {
                var r = e.lastChild;
                i.removeChild(t);
                var r = e.lastChild
            }
            var r = e.lastChild;
            t.parentNode = e;
            t.previousSibling = r;
            t.nextSibling = null;
            if (r) {
                r.nextSibling = t
            } else {
                e.firstChild = t
            }
            e.lastChild = t;
            Gi(e.ownerDocument, e, t);
            return t
        }
        qi.prototype = {
            nodeName: "#document",
            nodeType: Ti,
            doctype: null,
            documentElement: null,
            _inc: 1,
            insertBefore: function(e, t) {
                if (e.nodeType == Ei) {
                    var i = e.firstChild;
                    while (i) {
                        var r = i.nextSibling;
                        this.insertBefore(i, t);
                        i = r
                    }
                    return e
                }
                if (this.documentElement == null && e.nodeType == hi) {
                    this.documentElement = e
                }
                return zi(this, e, t), e.ownerDocument = this, e
            },
            removeChild: function(e) {
                if (this.documentElement == e) {
                    this.documentElement = null
                }
                return Xi(this, e)
            },
            importNode: function(e, t) {
                return dr(this, e, t)
            },
            getElementById: function(e) {
                var t = null;
                Hi(this.documentElement, (function(i) {
                    if (i.nodeType == hi) {
                        if (i.getAttribute("id") == e) {
                            t = i;
                            return true
                        }
                    }
                }));
                return t
            },
            getElementsByClassName: function(e) {
                var t = ui(e);
                return new Di(this, (function(i) {
                    var r = [];
                    if (t.length > 0) {
                        Hi(i.documentElement, (function(n) {
                            if (n !== i && n.nodeType === hi) {
                                var a = n.getAttribute("class");
                                if (a) {
                                    var s = e === a;
                                    if (!s) {
                                        var o = ui(a);
                                        s = t.every(li(o))
                                    }
                                    if (s) {
                                        r.push(n)
                                    }
                                }
                            }
                        }))
                    }
                    return r
                }))
            },
            createElement: function(e) {
                var t = new Yi;
                t.ownerDocument = this;
                t.nodeName = e;
                t.tagName = e;
                t.localName = e;
                t.childNodes = new Oi;
                var i = t.attributes = new Ni;
                i._ownerElement = t;
                return t
            },
            createDocumentFragment: function() {
                var e = new ar;
                e.ownerDocument = this;
                e.childNodes = new Oi;
                return e
            },
            createTextNode: function(e) {
                var t = new Ji;
                t.ownerDocument = this;
                t.appendData(e);
                return t
            },
            createComment: function(e) {
                var t = new Zi;
                t.ownerDocument = this;
                t.appendData(e);
                return t
            },
            createCDATASection: function(e) {
                var t = new er;
                t.ownerDocument = this;
                t.appendData(e);
                return t
            },
            createProcessingInstruction: function(e, t) {
                var i = new sr;
                i.ownerDocument = this;
                i.tagName = i.target = e;
                i.nodeValue = i.data = t;
                return i
            },
            createAttribute: function(e) {
                var t = new $i;
                t.ownerDocument = this;
                t.name = e;
                t.nodeName = e;
                t.localName = e;
                t.specified = true;
                return t
            },
            createEntityReference: function(e) {
                var t = new nr;
                t.ownerDocument = this;
                t.nodeName = e;
                return t
            },
            createElementNS: function(e, t) {
                var i = new Yi;
                var r = t.split(":");
                var n = i.attributes = new Ni;
                i.childNodes = new Oi;
                i.ownerDocument = this;
                i.nodeName = t;
                i.tagName = t;
                i.namespaceURI = e;
                if (r.length == 2) {
                    i.prefix = r[0];
                    i.localName = r[1]
                } else {
                    i.localName = t
                }
                n._ownerElement = i;
                return i
            },
            createAttributeNS: function(e, t) {
                var i = new $i;
                var r = t.split(":");
                i.ownerDocument = this;
                i.nodeName = t;
                i.name = t;
                i.namespaceURI = e;
                i.specified = true;
                if (r.length == 2) {
                    i.prefix = r[0];
                    i.localName = r[1]
                } else {
                    i.localName = t
                }
                return i
            }
        };
        fi(qi, Fi);

        function Yi() {
            this._nsMap = {}
        }
        Yi.prototype = {
            nodeType: hi,
            hasAttribute: function(e) {
                return this.getAttributeNode(e) != null
            },
            getAttribute: function(e) {
                var t = this.getAttributeNode(e);
                return t && t.value || ""
            },
            getAttributeNode: function(e) {
                return this.attributes.getNamedItem(e)
            },
            setAttribute: function(e, t) {
                var i = this.ownerDocument.createAttribute(e);
                i.value = i.nodeValue = "" + t;
                this.setAttributeNode(i)
            },
            removeAttribute: function(e) {
                var t = this.getAttributeNode(e);
                t && this.removeAttributeNode(t)
            },
            appendChild: function(e) {
                if (e.nodeType === Ei) {
                    return this.insertBefore(e, null)
                } else {
                    return Ki(this, e)
                }
            },
            setAttributeNode: function(e) {
                return this.attributes.setNamedItem(e)
            },
            setAttributeNodeNS: function(e) {
                return this.attributes.setNamedItemNS(e)
            },
            removeAttributeNode: function(e) {
                return this.attributes.removeNamedItem(e.nodeName)
            },
            removeAttributeNS: function(e, t) {
                var i = this.getAttributeNodeNS(e, t);
                i && this.removeAttributeNode(i)
            },
            hasAttributeNS: function(e, t) {
                return this.getAttributeNodeNS(e, t) != null
            },
            getAttributeNS: function(e, t) {
                var i = this.getAttributeNodeNS(e, t);
                return i && i.value || ""
            },
            setAttributeNS: function(e, t, i) {
                var r = this.ownerDocument.createAttributeNS(e, t);
                r.value = r.nodeValue = "" + i;
                this.setAttributeNode(r)
            },
            getAttributeNodeNS: function(e, t) {
                return this.attributes.getNamedItemNS(e, t)
            },
            getElementsByTagName: function(e) {
                return new Di(this, (function(t) {
                    var i = [];
                    Hi(t, (function(r) {
                        if (r !== t && r.nodeType == hi && (e === "*" || r.tagName == e)) {
                            i.push(r)
                        }
                    }));
                    return i
                }))
            },
            getElementsByTagNameNS: function(e, t) {
                return new Di(this, (function(i) {
                    var r = [];
                    Hi(i, (function(n) {
                        if (n !== i && n.nodeType === hi && (e === "*" || n.namespaceURI === e) && (t === "*" || n.localName == t)) {
                            r.push(n)
                        }
                    }));
                    return r
                }))
            }
        };
        qi.prototype.getElementsByTagName = Yi.prototype.getElementsByTagName;
        qi.prototype.getElementsByTagNameNS = Yi.prototype.getElementsByTagNameNS;
        fi(Yi, Fi);

        function $i() {}
        $i.prototype.nodeType = pi;
        fi($i, Fi);

        function Qi() {}
        Qi.prototype = {
            data: "",
            substringData: function(e, t) {
                return this.data.substring(e, e + t)
            },
            appendData: function(e) {
                e = this.data + e;
                this.nodeValue = this.data = e;
                this.length = e.length
            },
            insertData: function(e, t) {
                this.replaceData(e, 0, t)
            },
            appendChild: function(e) {
                throw new Error(Ci[Ii])
            },
            deleteData: function(e, t) {
                this.replaceData(e, t, "")
            },
            replaceData: function(e, t, i) {
                var r = this.data.substring(0, e);
                var n = this.data.substring(e + t);
                i = r + i + n;
                this.nodeValue = this.data = i;
                this.length = i.length
            }
        };
        fi(Qi, Fi);

        function Ji() {}
        Ji.prototype = {
            nodeName: "#text",
            nodeType: mi,
            splitText: function(e) {
                var t = this.data;
                var i = t.substring(e);
                t = t.substring(0, e);
                this.data = this.nodeValue = t;
                this.length = t.length;
                var r = this.ownerDocument.createTextNode(i);
                if (this.parentNode) {
                    this.parentNode.insertBefore(r, this.nextSibling)
                }
                return r
            }
        };
        fi(Ji, Qi);

        function Zi() {}
        Zi.prototype = {
            nodeName: "#comment",
            nodeType: bi
        };
        fi(Zi, Qi);

        function er() {}
        er.prototype = {
            nodeName: "#cdata-section",
            nodeType: vi
        };
        fi(er, Qi);

        function tr() {}
        tr.prototype.nodeType = Si;
        fi(tr, Fi);

        function ir() {}
        ir.prototype.nodeType = wi;
        fi(ir, Fi);

        function rr() {}
        rr.prototype.nodeType = yi;
        fi(rr, Fi);

        function nr() {}
        nr.prototype.nodeType = gi;
        fi(nr, Fi);

        function ar() {}
        ar.prototype.nodeName = "#document-fragment";
        ar.prototype.nodeType = Ei;
        fi(ar, Fi);

        function sr() {}
        sr.prototype.nodeType = _i;
        fi(sr, Fi);

        function or() {}
        or.prototype.serializeToString = function(e, t, i) {
            return ur.call(e, t, i)
        };
        Fi.prototype.toString = ur;

        function ur(e, t) {
            var i = [];
            var r = this.nodeType == 9 && this.documentElement || this;
            var n = r.prefix;
            var a = r.namespaceURI;
            if (a && n == null) {
                var n = r.lookupPrefix(a);
                if (n == null) {
                    var s = [{
                        namespace: a,
                        prefix: null
                    }]
                }
            }
            fr(this, i, e, t, s);
            return i.join("")
        }

        function lr(e, t, i) {
            var r = e.prefix || "";
            var n = e.namespaceURI;
            if (!n) {
                return false
            }
            if (r === "xml" && n === ni.XML || n === ni.XMLNS) {
                return false
            }
            var a = i.length;
            while (a--) {
                var s = i[a];
                if (s.prefix === r) {
                    return s.namespace !== n
                }
            }
            return true
        }

        function cr(e, t, i) {
            e.push(" ", t, '="', i.replace(/[<&"]/g, ji), '"')
        }

        function fr(e, t, i, r, n) {
            if (!n) {
                n = []
            }
            if (r) {
                e = r(e);
                if (e) {
                    if (typeof e == "string") {
                        t.push(e);
                        return
                    }
                } else {
                    return
                }
            }
            switch (e.nodeType) {
                case hi:
                    var a = e.attributes;
                    var s = a.length;
                    var o = e.firstChild;
                    var u = e.tagName;
                    i = ni.isHTML(e.namespaceURI) || i;
                    var l = u;
                    if (!i && !e.prefix && e.namespaceURI) {
                        var c;
                        for (var f = 0; f < a.length; f++) {
                            if (a.item(f).name === "xmlns") {
                                c = a.item(f).value;
                                break
                            }
                        }
                        if (!c) {
                            for (var d = n.length - 1; d >= 0; d--) {
                                var h = n[d];
                                if (h.prefix === "" && h.namespace === e.namespaceURI) {
                                    c = h.namespace;
                                    break
                                }
                            }
                        }
                        if (c !== e.namespaceURI) {
                            for (var d = n.length - 1; d >= 0; d--) {
                                var h = n[d];
                                if (h.namespace === e.namespaceURI) {
                                    if (h.prefix) {
                                        l = h.prefix + ":" + u
                                    }
                                    break
                                }
                            }
                        }
                    }
                    t.push("<", l);
                    for (var p = 0; p < s; p++) {
                        var m = a.item(p);
                        if (m.prefix == "xmlns") {
                            n.push({
                                prefix: m.localName,
                                namespace: m.value
                            })
                        } else if (m.nodeName == "xmlns") {
                            n.push({
                                prefix: "",
                                namespace: m.value
                            })
                        }
                    }
                    for (var p = 0; p < s; p++) {
                        var m = a.item(p);
                        if (lr(m, i, n)) {
                            var v = m.prefix || "";
                            var g = m.namespaceURI;
                            cr(t, v ? "xmlns:" + v : "xmlns", g);
                            n.push({
                                prefix: v,
                                namespace: g
                            })
                        }
                        fr(m, t, i, r, n)
                    }
                    if (u === l && lr(e, i, n)) {
                        var v = e.prefix || "";
                        var g = e.namespaceURI;
                        cr(t, v ? "xmlns:" + v : "xmlns", g);
                        n.push({
                            prefix: v,
                            namespace: g
                        })
                    }
                    if (o || i && !/^(?:meta|link|img|br|hr|input)$/i.test(u)) {
                        t.push(">");
                        if (i && /^script$/i.test(u)) {
                            while (o) {
                                if (o.data) {
                                    t.push(o.data)
                                } else {
                                    fr(o, t, i, r, n.slice())
                                }
                                o = o.nextSibling
                            }
                        } else {
                            while (o) {
                                fr(o, t, i, r, n.slice());
                                o = o.nextSibling
                            }
                        }
                        t.push("</", l, ">")
                    } else {
                        t.push("/>")
                    }
                    return;
                case Ti:
                case Ei:
                    var o = e.firstChild;
                    while (o) {
                        fr(o, t, i, r, n.slice());
                        o = o.nextSibling
                    }
                    return;
                case pi:
                    return cr(t, e.name, e.value);
                case mi:
                    return t.push(e.data.replace(/[<&]/g, ji).replace(/]]>/g, "]]&gt;"));
                case vi:
                    return t.push("<![CDATA[", e.data, "]]>");
                case bi:
                    return t.push("\x3c!--", e.data, "--\x3e");
                case Si:
                    var y = e.publicId;
                    var _ = e.systemId;
                    t.push("<!DOCTYPE ", e.name);
                    if (y) {
                        t.push(" PUBLIC ", y);
                        if (_ && _ != ".") {
                            t.push(" ", _)
                        }
                        t.push(">")
                    } else if (_ && _ != ".") {
                        t.push(" SYSTEM ", _, ">")
                    } else {
                        var b = e.internalSubset;
                        if (b) {
                            t.push(" [", b, "]")
                        }
                        t.push(">")
                    }
                    return;
                case _i:
                    return t.push("<?", e.target, " ", e.data, "?>");
                case gi:
                    return t.push("&", e.nodeName, ";");
                default:
                    t.push("??", e.nodeName)
            }
        }

        function dr(e, t, i) {
            var r;
            switch (t.nodeType) {
                case hi:
                    r = t.cloneNode(false);
                    r.ownerDocument = e;
                case Ei:
                    break;
                case pi:
                    i = true;
                    break
            }
            if (!r) {
                r = t.cloneNode(false)
            }
            r.ownerDocument = e;
            r.parentNode = null;
            if (i) {
                var n = t.firstChild;
                while (n) {
                    r.appendChild(dr(e, n, i));
                    n = n.nextSibling
                }
            }
            return r
        }

        function hr(e, t, i) {
            var r = new t.constructor;
            for (var n in t) {
                var a = t[n];
                if (typeof a != "object") {
                    if (a != r[n]) {
                        r[n] = a
                    }
                }
            }
            if (t.childNodes) {
                r.childNodes = new Oi
            }
            r.ownerDocument = e;
            switch (r.nodeType) {
                case hi:
                    var s = t.attributes;
                    var o = r.attributes = new Ni;
                    var u = s.length;
                    o._ownerElement = r;
                    for (var l = 0; l < u; l++) {
                        r.setAttributeNode(hr(e, s.item(l), true))
                    }
                    break;
                case pi:
                    i = true
            }
            if (i) {
                var c = t.firstChild;
                while (c) {
                    r.appendChild(hr(e, c, i));
                    c = c.nextSibling
                }
            }
            return r
        }

        function pr(e, t, i) {
            e[t] = i
        }
        try {
            if (Object.defineProperty) {
                Object.defineProperty(Di.prototype, "length", {
                    get: function() {
                        Li(this);
                        return this.$$length
                    }
                });
                Object.defineProperty(Fi.prototype, "textContent", {
                    get: function() {
                        return Ng(this)
                    },
                    set: function(e) {
                        switch (this.nodeType) {
                            case hi:
                            case Ei:
                                while (this.firstChild) {
                                    this.removeChild(this.firstChild)
                                }
                                if (e || String(e)) {
                                    this.appendChild(this.ownerDocument.createTextNode(e))
                                }
                                break;
                            default:
                                this.data = e;
                                this.value = e;
                                this.nodeValue = e
                        }
                    }
                });

                function Ng(e) {
                    switch (e.nodeType) {
                        case hi:
                        case Ei:
                            var t = [];
                            e = e.firstChild;
                            while (e) {
                                if (e.nodeType !== 7 && e.nodeType !== 8) {
                                    t.push(Ng(e))
                                }
                                e = e.nextSibling
                            }
                            return t.join("");
                        default:
                            return e.nodeValue
                    }
                }
                pr = function(e, t, i) {
                    e["$$" + t] = i
                }
            }
        } catch (Rg) {}
        var mr = tr;
        var vr = Pi;
        var gr = Bi;
        var yr = Yi;
        var _r = Fi;
        var br = Oi;
        var Tr = or;
        var Sr = {
            DocumentType: mr,
            DOMException: vr,
            DOMImplementation: gr,
            Element: yr,
            Node: _r,
            NodeList: br,
            XMLSerializer: Tr
        };
        var Er = n((function(e, t) {
            var i = ri.freeze;
            t.XML_ENTITIES = i({
                amp: "&",
                apos: "'",
                gt: ">",
                lt: "<",
                quot: '"'
            });
            t.HTML_ENTITIES = i({
                lt: "<",
                gt: ">",
                amp: "&",
                quot: '"',
                apos: "'",
                Agrave: "À",
                Aacute: "Á",
                Acirc: "Â",
                Atilde: "Ã",
                Auml: "Ä",
                Aring: "Å",
                AElig: "Æ",
                Ccedil: "Ç",
                Egrave: "È",
                Eacute: "É",
                Ecirc: "Ê",
                Euml: "Ë",
                Igrave: "Ì",
                Iacute: "Í",
                Icirc: "Î",
                Iuml: "Ï",
                ETH: "Ð",
                Ntilde: "Ñ",
                Ograve: "Ò",
                Oacute: "Ó",
                Ocirc: "Ô",
                Otilde: "Õ",
                Ouml: "Ö",
                Oslash: "Ø",
                Ugrave: "Ù",
                Uacute: "Ú",
                Ucirc: "Û",
                Uuml: "Ü",
                Yacute: "Ý",
                THORN: "Þ",
                szlig: "ß",
                agrave: "à",
                aacute: "á",
                acirc: "â",
                atilde: "ã",
                auml: "ä",
                aring: "å",
                aelig: "æ",
                ccedil: "ç",
                egrave: "è",
                eacute: "é",
                ecirc: "ê",
                euml: "ë",
                igrave: "ì",
                iacute: "í",
                icirc: "î",
                iuml: "ï",
                eth: "ð",
                ntilde: "ñ",
                ograve: "ò",
                oacute: "ó",
                ocirc: "ô",
                otilde: "õ",
                ouml: "ö",
                oslash: "ø",
                ugrave: "ù",
                uacute: "ú",
                ucirc: "û",
                uuml: "ü",
                yacute: "ý",
                thorn: "þ",
                yuml: "ÿ",
                nbsp: " ",
                iexcl: "¡",
                cent: "¢",
                pound: "£",
                curren: "¤",
                yen: "¥",
                brvbar: "¦",
                sect: "§",
                uml: "¨",
                copy: "©",
                ordf: "ª",
                laquo: "«",
                not: "¬",
                shy: "­­",
                reg: "®",
                macr: "¯",
                deg: "°",
                plusmn: "±",
                sup2: "²",
                sup3: "³",
                acute: "´",
                micro: "µ",
                para: "¶",
                middot: "·",
                cedil: "¸",
                sup1: "¹",
                ordm: "º",
                raquo: "»",
                frac14: "¼",
                frac12: "½",
                frac34: "¾",
                iquest: "¿",
                times: "×",
                divide: "÷",
                forall: "∀",
                part: "∂",
                exist: "∃",
                empty: "∅",
                nabla: "∇",
                isin: "∈",
                notin: "∉",
                ni: "∋",
                prod: "∏",
                sum: "∑",
                minus: "−",
                lowast: "∗",
                radic: "√",
                prop: "∝",
                infin: "∞",
                ang: "∠",
                and: "∧",
                or: "∨",
                cap: "∩",
                cup: "∪",
                int: "∫",
                there4: "∴",
                sim: "∼",
                cong: "≅",
                asymp: "≈",
                ne: "≠",
                equiv: "≡",
                le: "≤",
                ge: "≥",
                sub: "⊂",
                sup: "⊃",
                nsub: "⊄",
                sube: "⊆",
                supe: "⊇",
                oplus: "⊕",
                otimes: "⊗",
                perp: "⊥",
                sdot: "⋅",
                Alpha: "Α",
                Beta: "Β",
                Gamma: "Γ",
                Delta: "Δ",
                Epsilon: "Ε",
                Zeta: "Ζ",
                Eta: "Η",
                Theta: "Θ",
                Iota: "Ι",
                Kappa: "Κ",
                Lambda: "Λ",
                Mu: "Μ",
                Nu: "Ν",
                Xi: "Ξ",
                Omicron: "Ο",
                Pi: "Π",
                Rho: "Ρ",
                Sigma: "Σ",
                Tau: "Τ",
                Upsilon: "Υ",
                Phi: "Φ",
                Chi: "Χ",
                Psi: "Ψ",
                Omega: "Ω",
                alpha: "α",
                beta: "β",
                gamma: "γ",
                delta: "δ",
                epsilon: "ε",
                zeta: "ζ",
                eta: "η",
                theta: "θ",
                iota: "ι",
                kappa: "κ",
                lambda: "λ",
                mu: "μ",
                nu: "ν",
                xi: "ξ",
                omicron: "ο",
                pi: "π",
                rho: "ρ",
                sigmaf: "ς",
                sigma: "σ",
                tau: "τ",
                upsilon: "υ",
                phi: "φ",
                chi: "χ",
                psi: "ψ",
                omega: "ω",
                thetasym: "ϑ",
                upsih: "ϒ",
                piv: "ϖ",
                OElig: "Œ",
                oelig: "œ",
                Scaron: "Š",
                scaron: "š",
                Yuml: "Ÿ",
                fnof: "ƒ",
                circ: "ˆ",
                tilde: "˜",
                ensp: " ",
                emsp: " ",
                thinsp: " ",
                zwnj: "‌",
                zwj: "‍",
                lrm: "‎",
                rlm: "‏",
                ndash: "–",
                mdash: "—",
                lsquo: "‘",
                rsquo: "’",
                sbquo: "‚",
                ldquo: "“",
                rdquo: "”",
                bdquo: "„",
                dagger: "†",
                Dagger: "‡",
                bull: "•",
                hellip: "…",
                permil: "‰",
                prime: "′",
                Prime: "″",
                lsaquo: "‹",
                rsaquo: "›",
                oline: "‾",
                euro: "€",
                trade: "™",
                larr: "←",
                uarr: "↑",
                rarr: "→",
                darr: "↓",
                harr: "↔",
                crarr: "↵",
                lceil: "⌈",
                rceil: "⌉",
                lfloor: "⌊",
                rfloor: "⌋",
                loz: "◊",
                spades: "♠",
                clubs: "♣",
                hearts: "♥",
                diams: "♦"
            });
            t.entityMap = t.HTML_ENTITIES
        }));
        Er.XML_ENTITIES;
        Er.HTML_ENTITIES;
        Er.entityMap;
        var wr = ri.NAMESPACE;
        var kr = /[A-Z_a-z\xC0-\xD6\xD8-\xF6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/;
        var Cr = new RegExp("[\\-\\.0-9" + kr.source.slice(1, -1) + "\\u00B7\\u0300-\\u036F\\u203F-\\u2040]");
        var Ir = new RegExp("^" + kr.source + Cr.source + "*(?::" + kr.source + Cr.source + "*)?$");
        var Ar = 0;
        var xr = 1;
        var Pr = 2;
        var Or = 3;
        var Dr = 4;
        var Lr = 5;
        var Nr = 6;
        var Rr = 7;

        function Mr(e, t) {
            this.message = e;
            this.locator = t;
            if (Error.captureStackTrace) Error.captureStackTrace(this, Mr)
        }
        Mr.prototype = new Error;
        Mr.prototype.name = Mr.name;

        function Ur() {}
        Ur.prototype = {
            parse: function(e, t, i) {
                var r = this.domBuilder;
                r.startDocument();
                Wr(t, t = {});
                Br(e, t, i, r, this.errorHandler);
                r.endDocument()
            }
        };

        function Br(e, t, i, r, n) {
            function a(e) {
                if (e > 65535) {
                    e -= 65536;
                    var t = 55296 + (e >> 10),
                        i = 56320 + (e & 1023);
                    return String.fromCharCode(t, i)
                } else {
                    return String.fromCharCode(e)
                }
            }

            function s(e) {
                var t = e.slice(1, -1);
                if (t in i) {
                    return i[t]
                } else if (t.charAt(0) === "#") {
                    return a(parseInt(t.substr(1).replace("x", "0x")))
                } else {
                    n.error("entity not found:" + e);
                    return e
                }
            }

            function o(t) {
                if (t > m) {
                    var i = e.substring(m, t).replace(/&#?\w+;/g, s);
                    d && u(m);
                    r.characters(i, 0, t - m);
                    m = t
                }
            }

            function u(t, i) {
                while (t >= c && (i = f.exec(e))) {
                    l = i.index;
                    c = l + i[0].length;
                    d.lineNumber++
                }
                d.columnNumber = t - l + 1
            }
            var l = 0;
            var c = 0;
            var f = /.*(?:\r\n?|\n)|.*$/g;
            var d = r.locator;
            var h = [{
                currentNSMap: t
            }];
            var p = {};
            var m = 0;
            while (true) {
                try {
                    var v = e.indexOf("<", m);
                    if (v < 0) {
                        if (!e.substr(m).match(/^\s*$/)) {
                            var g = r.doc;
                            var y = g.createTextNode(e.substr(m));
                            g.appendChild(y);
                            r.currentElement = y
                        }
                        return
                    }
                    if (v > m) {
                        o(v)
                    }
                    switch (e.charAt(v + 1)) {
                        case "/":
                            var _ = e.indexOf(">", v + 3);
                            var b = e.substring(v + 2, _).replace(/[ \t\n\r]+$/g, "");
                            var T = h.pop();
                            if (_ < 0) {
                                b = e.substring(v + 2).replace(/[\s<].*/, "");
                                n.error("end tag name: " + b + " is not complete:" + T.tagName);
                                _ = v + 1 + b.length
                            } else if (b.match(/\s</)) {
                                b = b.replace(/[\s<].*/, "");
                                n.error("end tag name: " + b + " maybe not complete");
                                _ = v + 1 + b.length
                            }
                            var S = T.localNSMap;
                            var E = T.tagName == b;
                            var w = E || T.tagName && T.tagName.toLowerCase() == b.toLowerCase();
                            if (w) {
                                r.endElement(T.uri, T.localName, b);
                                if (S) {
                                    for (var k in S) {
                                        r.endPrefixMapping(k)
                                    }
                                }
                                if (!E) {
                                    n.fatalError("end tag name: " + b + " is not match the current start tagName:" + T.tagName)
                                }
                            } else {
                                h.push(T)
                            }
                            _++;
                            break;
                        case "?":
                            d && u(v);
                            _ = Xr(e, v, r);
                            break;
                        case "!":
                            d && u(v);
                            _ = Gr(e, v, r, n);
                            break;
                        default:
                            d && u(v);
                            var C = new zr;
                            var I = h[h.length - 1].currentNSMap;
                            var _ = jr(e, v, C, I, s, n);
                            var A = C.length;
                            if (!C.closed && Vr(e, _, C.tagName, p)) {
                                C.closed = true;
                                if (!i.nbsp) {
                                    n.warning("unclosed xml attribute")
                                }
                            }
                            if (d && A) {
                                var x = Fr(d, {});
                                for (var P = 0; P < A; P++) {
                                    var O = C[P];
                                    u(O.offset);
                                    O.locator = Fr(d, {})
                                }
                                r.locator = x;
                                if (Hr(C, r, I)) {
                                    h.push(C)
                                }
                                r.locator = d
                            } else {
                                if (Hr(C, r, I)) {
                                    h.push(C)
                                }
                            }
                            if (wr.isHTML(C.uri) && !C.closed) {
                                _ = qr(e, _, C.tagName, s, r)
                            } else {
                                _++
                            }
                    }
                } catch (e) {
                    if (e instanceof Mr) {
                        throw e
                    }
                    n.error("element parse error: " + e);
                    _ = -1
                }
                if (_ > m) {
                    m = _
                } else {
                    o(Math.max(v, m) + 1)
                }
            }
        }

        function Fr(e, t) {
            t.lineNumber = e.lineNumber;
            t.columnNumber = e.columnNumber;
            return t
        }

        function jr(e, t, i, r, n, a) {
            function s(e, t, r) {
                if (i.attributeNames.hasOwnProperty(e)) {
                    a.fatalError("Attribute " + e + " redefined")
                }
                i.addValue(e, t, r)
            }
            var o;
            var u;
            var l = ++t;
            var c = Ar;
            while (true) {
                var f = e.charAt(l);
                switch (f) {
                    case "=":
                        if (c === xr) {
                            o = e.slice(t, l);
                            c = Or
                        } else if (c === Pr) {
                            c = Or
                        } else {
                            throw new Error("attribute equal must after attrName")
                        }
                        break;
                    case "'":
                    case '"':
                        if (c === Or || c === xr) {
                            if (c === xr) {
                                a.warning('attribute value must after "="');
                                o = e.slice(t, l)
                            }
                            t = l + 1;
                            l = e.indexOf(f, t);
                            if (l > 0) {
                                u = e.slice(t, l).replace(/&#?\w+;/g, n);
                                s(o, u, t - 1);
                                c = Lr
                            } else {
                                throw new Error("attribute value no end '" + f + "' match")
                            }
                        } else if (c == Dr) {
                            u = e.slice(t, l).replace(/&#?\w+;/g, n);
                            s(o, u, t);
                            a.warning('attribute "' + o + '" missed start quot(' + f + ")!!");
                            t = l + 1;
                            c = Lr
                        } else {
                            throw new Error('attribute value must after "="')
                        }
                        break;
                    case "/":
                        switch (c) {
                            case Ar:
                                i.setTagName(e.slice(t, l));
                            case Lr:
                            case Nr:
                            case Rr:
                                c = Rr;
                                i.closed = true;
                            case Dr:
                            case xr:
                            case Pr:
                                break;
                            default:
                                throw new Error("attribute invalid close char('/')")
                        }
                        break;
                    case "":
                        a.error("unexpected end of input");
                        if (c == Ar) {
                            i.setTagName(e.slice(t, l))
                        }
                        return l;
                    case ">":
                        switch (c) {
                            case Ar:
                                i.setTagName(e.slice(t, l));
                            case Lr:
                            case Nr:
                            case Rr:
                                break;
                            case Dr:
                            case xr:
                                u = e.slice(t, l);
                                if (u.slice(-1) === "/") {
                                    i.closed = true;
                                    u = u.slice(0, -1)
                                }
                                case Pr:
                                    if (c === Pr) {
                                        u = o
                                    }
                                    if (c == Dr) {
                                        a.warning('attribute "' + u + '" missed quot(")!');
                                        s(o, u.replace(/&#?\w+;/g, n), t)
                                    } else {
                                        if (!wr.isHTML(r[""]) || !u.match(/^(?:disabled|checked|selected)$/i)) {
                                            a.warning('attribute "' + u + '" missed value!! "' + u + '" instead!!')
                                        }
                                        s(u, u, t)
                                    }
                                    break;
                                case Or:
                                    throw new Error("attribute value missed!!")
                        }
                        return l;
                    case "":
                        f = " ";
                    default:
                        if (f <= " ") {
                            switch (c) {
                                case Ar:
                                    i.setTagName(e.slice(t, l));
                                    c = Nr;
                                    break;
                                case xr:
                                    o = e.slice(t, l);
                                    c = Pr;
                                    break;
                                case Dr:
                                    var u = e.slice(t, l).replace(/&#?\w+;/g, n);
                                    a.warning('attribute "' + u + '" missed quot(")!!');
                                    s(o, u, t);
                                case Lr:
                                    c = Nr;
                                    break
                            }
                        } else {
                            switch (c) {
                                case Pr:
                                    i.tagName;
                                    if (!wr.isHTML(r[""]) || !o.match(/^(?:disabled|checked|selected)$/i)) {
                                        a.warning('attribute "' + o + '" missed value!! "' + o + '" instead2!!')
                                    }
                                    s(o, o, t);
                                    t = l;
                                    c = xr;
                                    break;
                                case Lr:
                                    a.warning('attribute space is required"' + o + '"!!');
                                case Nr:
                                    c = xr;
                                    t = l;
                                    break;
                                case Or:
                                    c = Dr;
                                    t = l;
                                    break;
                                case Rr:
                                    throw new Error("elements closed character '/' and '>' must be connected to")
                            }
                        }
                }
                l++
            }
        }

        function Hr(e, t, i) {
            var r = e.tagName;
            var n = null;
            var a = e.length;
            while (a--) {
                var s = e[a];
                var o = s.qName;
                var u = s.value;
                var l = o.indexOf(":");
                if (l > 0) {
                    var c = s.prefix = o.slice(0, l);
                    var f = o.slice(l + 1);
                    var d = c === "xmlns" && f
                } else {
                    f = o;
                    c = null;
                    d = o === "xmlns" && ""
                }
                s.localName = f;
                if (d !== false) {
                    if (n == null) {
                        n = {};
                        Wr(i, i = {})
                    }
                    i[d] = n[d] = u;
                    s.uri = wr.XMLNS;
                    t.startPrefixMapping(d, u)
                }
            }
            var a = e.length;
            while (a--) {
                s = e[a];
                var c = s.prefix;
                if (c) {
                    if (c === "xml") {
                        s.uri = wr.XML
                    }
                    if (c !== "xmlns") {
                        s.uri = i[c || ""]
                    }
                }
            }
            var l = r.indexOf(":");
            if (l > 0) {
                c = e.prefix = r.slice(0, l);
                f = e.localName = r.slice(l + 1)
            } else {
                c = null;
                f = e.localName = r
            }
            var h = e.uri = i[c || ""];
            t.startElement(h, f, r, e);
            if (e.closed) {
                t.endElement(h, f, r);
                if (n) {
                    for (c in n) {
                        t.endPrefixMapping(c)
                    }
                }
            } else {
                e.currentNSMap = i;
                e.localNSMap = n;
                return true
            }
        }

        function qr(e, t, i, r, n) {
            if (/^(?:script|textarea)$/i.test(i)) {
                var a = e.indexOf("</" + i + ">", t);
                var s = e.substring(t + 1, a);
                if (/[&<]/.test(s)) {
                    if (/^script$/i.test(i)) {
                        n.characters(s, 0, s.length);
                        return a
                    }
                    s = s.replace(/&#?\w+;/g, r);
                    n.characters(s, 0, s.length);
                    return a
                }
            }
            return t + 1
        }

        function Vr(e, t, i, r) {
            var n = r[i];
            if (n == null) {
                n = e.lastIndexOf("</" + i + ">");
                if (n < t) {
                    n = e.lastIndexOf("</" + i)
                }
                r[i] = n
            }
            return n < t
        }

        function Wr(e, t) {
            for (var i in e) {
                t[i] = e[i]
            }
        }

        function Gr(e, t, i, r) {
            var n = e.charAt(t + 2);
            switch (n) {
                case "-":
                    if (e.charAt(t + 3) === "-") {
                        var a = e.indexOf("--\x3e", t + 4);
                        if (a > t) {
                            i.comment(e, t + 4, a - t - 4);
                            return a + 3
                        } else {
                            r.error("Unclosed comment");
                            return -1
                        }
                    } else {
                        return -1
                    }
                    default:
                        if (e.substr(t + 3, 6) == "CDATA[") {
                            var a = e.indexOf("]]>", t + 9);
                            i.startCDATA();
                            i.characters(e, t + 9, a - t - 9);
                            i.endCDATA();
                            return a + 3
                        }
                        var s = Kr(e, t);
                        var o = s.length;
                        if (o > 1 && /!doctype/i.test(s[0][0])) {
                            var u = s[1][0];
                            var l = false;
                            var c = false;
                            if (o > 3) {
                                if (/^public$/i.test(s[2][0])) {
                                    l = s[3][0];
                                    c = o > 4 && s[4][0]
                                } else if (/^system$/i.test(s[2][0])) {
                                    c = s[3][0]
                                }
                            }
                            var f = s[o - 1];
                            i.startDTD(u, l, c);
                            i.endDTD();
                            return f.index + f[0].length
                        }
            }
            return -1
        }

        function Xr(e, t, i) {
            var r = e.indexOf("?>", t);
            if (r) {
                var n = e.substring(t, r).match(/^<\?(\S*)\s*([\s\S]*?)\s*$/);
                if (n) {
                    n[0].length;
                    i.processingInstruction(n[1], n[2]);
                    return r + 2
                } else {
                    return -1
                }
            }
            return -1
        }

        function zr() {
            this.attributeNames = {}
        }
        zr.prototype = {
            setTagName: function(e) {
                if (!Ir.test(e)) {
                    throw new Error("invalid tagName:" + e)
                }
                this.tagName = e
            },
            addValue: function(e, t, i) {
                if (!Ir.test(e)) {
                    throw new Error("invalid attribute:" + e)
                }
                this.attributeNames[e] = this.length;
                this[this.length++] = {
                    qName: e,
                    value: t,
                    offset: i
                }
            },
            length: 0,
            getLocalName: function(e) {
                return this[e].localName
            },
            getLocator: function(e) {
                return this[e].locator
            },
            getQName: function(e) {
                return this[e].qName
            },
            getURI: function(e) {
                return this[e].uri
            },
            getValue: function(e) {
                return this[e].value
            }
        };

        function Kr(e, t) {
            var i;
            var r = [];
            var n = /'[^']+'|"[^"]+"|[^\s<>\/=]+=?|(\/?\s*>|<)/g;
            n.lastIndex = t;
            n.exec(e);
            while (i = n.exec(e)) {
                r.push(i);
                if (i[1]) return r
            }
        }
        var Yr = Ur;
        var $r = Mr;
        var Qr = {
            XMLReader: Yr,
            ParseError: $r
        };
        var Jr = Sr.DOMImplementation;
        var Zr = ri.NAMESPACE;
        var en = Qr.ParseError;
        var tn = Qr.XMLReader;

        function rn(e) {
            this.options = e || {
                locator: {}
            }
        }
        rn.prototype.parseFromString = function(e, t) {
            var i = this.options;
            var r = new tn;
            var n = i.domBuilder || new an;
            var a = i.errorHandler;
            var s = i.locator;
            var o = i.xmlns || {};
            var u = /\/x?html?$/.test(t);
            var l = u ? Er.HTML_ENTITIES : Er.XML_ENTITIES;
            if (s) {
                n.setDocumentLocator(s)
            }
            r.errorHandler = nn(a, n, s);
            r.domBuilder = i.domBuilder || n;
            if (u) {
                o[""] = Zr.HTML
            }
            o.xml = o.xml || Zr.XML;
            if (e && typeof e === "string") {
                r.parse(e, o, l)
            } else {
                r.errorHandler.error("invalid doc source")
            }
            return n.doc
        };

        function nn(e, t, i) {
            if (!e) {
                if (t instanceof an) {
                    return t
                }
                e = t
            }
            var r = {};
            var n = e instanceof Function;
            i = i || {};

            function a(t) {
                var a = e[t];
                if (!a && n) {
                    a = e.length == 2 ? function(i) {
                        e(t, i)
                    } : e
                }
                r[t] = a && function(e) {
                    a("[xmldom " + t + "]\t" + e + on(i))
                } || function() {}
            }
            a("warning");
            a("error");
            a("fatalError");
            return r
        }

        function an() {
            this.cdata = false
        }

        function sn(e, t) {
            t.lineNumber = e.lineNumber;
            t.columnNumber = e.columnNumber
        }
        an.prototype = {
            startDocument: function() {
                this.doc = (new Jr).createDocument(null, null, null);
                if (this.locator) {
                    this.doc.documentURI = this.locator.systemId
                }
            },
            startElement: function(e, t, i, r) {
                var n = this.doc;
                var a = n.createElementNS(e, i || t);
                var s = r.length;
                ln(this, a);
                this.currentElement = a;
                this.locator && sn(this.locator, a);
                for (var o = 0; o < s; o++) {
                    var e = r.getURI(o);
                    var u = r.getValue(o);
                    var i = r.getQName(o);
                    var l = n.createAttributeNS(e, i);
                    this.locator && sn(r.getLocator(o), l);
                    l.value = l.nodeValue = u;
                    a.setAttributeNode(l)
                }
            },
            endElement: function(e, t, i) {
                var r = this.currentElement;
                r.tagName;
                this.currentElement = r.parentNode
            },
            startPrefixMapping: function(e, t) {},
            endPrefixMapping: function(e) {},
            processingInstruction: function(e, t) {
                var i = this.doc.createProcessingInstruction(e, t);
                this.locator && sn(this.locator, i);
                ln(this, i)
            },
            ignorableWhitespace: function(e, t, i) {},
            characters: function(e, t, i) {
                e = un.apply(this, arguments);
                if (e) {
                    if (this.cdata) {
                        var r = this.doc.createCDATASection(e)
                    } else {
                        var r = this.doc.createTextNode(e)
                    }
                    if (this.currentElement) {
                        this.currentElement.appendChild(r)
                    } else if (/^\s*$/.test(e)) {
                        this.doc.appendChild(r)
                    }
                    this.locator && sn(this.locator, r)
                }
            },
            skippedEntity: function(e) {},
            endDocument: function() {
                this.doc.normalize()
            },
            setDocumentLocator: function(e) {
                if (this.locator = e) {
                    e.lineNumber = 0
                }
            },
            comment: function(e, t, i) {
                e = un.apply(this, arguments);
                var r = this.doc.createComment(e);
                this.locator && sn(this.locator, r);
                ln(this, r)
            },
            startCDATA: function() {
                this.cdata = true
            },
            endCDATA: function() {
                this.cdata = false
            },
            startDTD: function(e, t, i) {
                var r = this.doc.implementation;
                if (r && r.createDocumentType) {
                    var n = r.createDocumentType(e, t, i);
                    this.locator && sn(this.locator, n);
                    ln(this, n);
                    this.doc.doctype = n
                }
            },
            warning: function(e) {
                console.warn("[xmldom warning]\t" + e, on(this.locator))
            },
            error: function(e) {
                console.error("[xmldom error]\t" + e, on(this.locator))
            },
            fatalError: function(e) {
                throw new en(e, this.locator)
            }
        };

        function on(e) {
            if (e) {
                return "\n@" + (e.systemId || "") + "#[line:" + e.lineNumber + ",col:" + e.columnNumber + "]"
            }
        }

        function un(e, t, i) {
            if (typeof e == "string") {
                return e.substr(t, i)
            } else {
                if (e.length >= t + i || t) {
                    return new java.lang.String(e, t, i) + ""
                }
                return e
            }
        }
        "endDTD,startEntity,endEntity,attributeDecl,elementDecl,externalEntityDecl,internalEntityDecl,resolveEntity,getExternalSubset,notationDecl,unparsedEntityDecl".replace(/\w+/g, (function(e) {
            an.prototype[e] = function() {
                return null
            }
        }));

        function ln(e, t) {
            if (!e.currentElement) {
                e.doc.appendChild(t)
            } else {
                e.currentElement.appendChild(t)
            }
        }
        var cn = an;
        var fn = rn;
        var dn = Sr.DOMImplementation;
        var hn = Sr.XMLSerializer;
        var pn = {
            __DOMHandler: cn,
            DOMParser: fn,
            DOMImplementation: dn,
            XMLSerializer: hn
        };
        var mn = Sr.DOMImplementation;
        var vn = Sr.XMLSerializer;
        var gn = pn.DOMParser;
        var yn = {
            DOMImplementation: mn,
            XMLSerializer: vn,
            DOMParser: gn
        };
        var _n = function e(t) {
            return !!t && typeof t === "object"
        };
        var bn = function e() {
            for (var t = arguments.length, i = new Array(t), r = 0; r < t; r++) {
                i[r] = arguments[r]
            }
            return i.reduce((function(t, i) {
                if (typeof i !== "object") {
                    return t
                }
                Object.keys(i).forEach((function(r) {
                    if (Array.isArray(t[r]) && Array.isArray(i[r])) {
                        t[r] = t[r].concat(i[r])
                    } else if (_n(t[r]) && _n(i[r])) {
                        t[r] = e(t[r], i[r])
                    } else {
                        t[r] = i[r]
                    }
                }));
                return t
            }), {})
        };
        var Tn = function e(t) {
            return Object.keys(t).map((function(e) {
                return t[e]
            }))
        };
        var Sn = function e(t, i) {
            var r = [];
            for (var n = t; n < i; n++) {
                r.push(n)
            }
            return r
        };
        var En = function e(t) {
            return t.reduce((function(e, t) {
                return e.concat(t)
            }), [])
        };
        var wn = function e(t) {
            if (!t.length) {
                return []
            }
            var i = [];
            for (var r = 0; r < t.length; r++) {
                i.push(t[r])
            }
            return i
        };
        var kn = function e(t, i) {
            return t.reduce((function(e, t, r) {
                if (t[i]) {
                    e.push(r)
                }
                return e
            }), [])
        };
        var Cn = function e(t, i) {
            for (var r = 0; r < t.length; r++) {
                if (i(t[r])) {
                    return r
                }
            }
            return -1
        };
        var In = function e(t, i) {
            return Tn(t.reduce((function(e, t) {
                t.forEach((function(t) {
                    e[i(t)] = t
                }));
                return e
            }), {}))
        };
        var An = {
            INVALID_NUMBER_OF_PERIOD: "INVALID_NUMBER_OF_PERIOD",
            DASH_EMPTY_MANIFEST: "DASH_EMPTY_MANIFEST",
            DASH_INVALID_XML: "DASH_INVALID_XML",
            NO_BASE_URL: "NO_BASE_URL",
            MISSING_SEGMENT_INFORMATION: "MISSING_SEGMENT_INFORMATION",
            SEGMENT_TIME_UNSPECIFIED: "SEGMENT_TIME_UNSPECIFIED",
            UNSUPPORTED_UTC_TIMING_SCHEME: "UNSUPPORTED_UTC_TIMING_SCHEME"
        };
        var xn = function e(t) {
            var i = t.baseUrl,
                r = i === void 0 ? "" : i,
                n = t.source,
                a = n === void 0 ? "" : n,
                o = t.range,
                u = o === void 0 ? "" : o,
                l = t.indexRange,
                c = l === void 0 ? "" : l;
            var f = {
                uri: a,
                resolvedUri: ut(r || "", a)
            };
            if (u || c) {
                var d = u ? u : c;
                var h = d.split("-");
                var p = s.BigInt ? s.BigInt(h[0]) : parseInt(h[0], 10);
                var m = s.BigInt ? s.BigInt(h[1]) : parseInt(h[1], 10);
                if (p < Number.MAX_SAFE_INTEGER && typeof p === "bigint") {
                    p = Number(p)
                }
                if (m < Number.MAX_SAFE_INTEGER && typeof m === "bigint") {
                    m = Number(m)
                }
                var v;
                if (typeof m === "bigint" || typeof p === "bigint") {
                    v = s.BigInt(m) - s.BigInt(p) + s.BigInt(1)
                } else {
                    v = m - p + 1
                }
                if (typeof v === "bigint" && v < Number.MAX_SAFE_INTEGER) {
                    v = Number(v)
                }
                f.byterange = {
                    length: v,
                    offset: p
                }
            }
            return f
        };
        var Pn = function e(t) {
            var i;
            if (typeof t.offset === "bigint" || typeof t.length === "bigint") {
                i = s.BigInt(t.offset) + s.BigInt(t.length) - s.BigInt(1)
            } else {
                i = t.offset + t.length - 1
            }
            return t.offset + "-" + i
        };
        var On = function e(t) {
            if (t && typeof t !== "number") {
                t = parseInt(t, 10)
            }
            if (isNaN(t)) {
                return null
            }
            return t
        };
        var Dn = {
            static: function e(t) {
                var i = t.duration,
                    r = t.timescale,
                    n = r === void 0 ? 1 : r,
                    a = t.sourceDuration,
                    s = t.periodDuration;
                var o = On(t.endNumber);
                var u = i / n;
                if (typeof o === "number") {
                    return {
                        start: 0,
                        end: o
                    }
                }
                if (typeof s === "number") {
                    return {
                        start: 0,
                        end: s / u
                    }
                }
                return {
                    start: 0,
                    end: a / u
                }
            },
            dynamic: function e(t) {
                var i = t.NOW,
                    r = t.clientOffset,
                    n = t.availabilityStartTime,
                    a = t.timescale,
                    s = a === void 0 ? 1 : a,
                    o = t.duration,
                    u = t.periodStart,
                    l = u === void 0 ? 0 : u,
                    c = t.minimumUpdatePeriod,
                    f = c === void 0 ? 0 : c,
                    d = t.timeShiftBufferDepth,
                    h = d === void 0 ? Infinity : d;
                var p = On(t.endNumber);
                var m = (i + r) / 1e3;
                var v = n + l;
                var g = m + f;
                var y = g - v;
                var _ = Math.ceil(y * s / o);
                var b = Math.floor((m - v - h) * s / o);
                var T = Math.floor((m - v) * s / o);
                return {
                    start: Math.max(0, b),
                    end: typeof p === "number" ? p : Math.min(_, T)
                }
            }
        };
        var Ln = function e(t) {
            return function(e) {
                var i = t.duration,
                    r = t.timescale,
                    n = r === void 0 ? 1 : r,
                    a = t.periodStart,
                    s = t.startNumber,
                    o = s === void 0 ? 1 : s;
                return {
                    number: o + e,
                    duration: i / n,
                    timeline: a,
                    time: e * i
                }
            }
        };
        var Nn = function e(t) {
            var i = t.type,
                r = t.duration,
                n = t.timescale,
                a = n === void 0 ? 1 : n,
                s = t.periodDuration,
                o = t.sourceDuration;
            var u = Dn[i](t),
                l = u.start,
                c = u.end;
            var f = Sn(l, c).map(Ln(t));
            if (i === "static") {
                var d = f.length - 1;
                var h = typeof s === "number" ? s : o;
                f[d].duration = h - r / a * d
            }
            return f
        };
        var Rn = function e(t) {
            var i = t.baseUrl,
                r = t.initialization,
                n = r === void 0 ? {} : r,
                a = t.sourceDuration,
                s = t.indexRange,
                o = s === void 0 ? "" : s,
                u = t.periodStart,
                l = t.presentationTime,
                c = t.number,
                f = c === void 0 ? 0 : c,
                d = t.duration;
            if (!i) {
                throw new Error(An.NO_BASE_URL)
            }
            var h = xn({
                baseUrl: i,
                source: n.sourceURL,
                range: n.range
            });
            var p = xn({
                baseUrl: i,
                source: i,
                indexRange: o
            });
            p.map = h;
            if (d) {
                var m = Nn(t);
                if (m.length) {
                    p.duration = m[0].duration;
                    p.timeline = m[0].timeline
                }
            } else if (a) {
                p.duration = a;
                p.timeline = u
            }
            p.presentationTime = l || u;
            p.number = f;
            return [p]
        };
        var Mn = function e(t, i, r) {
            var n = t.sidx.map ? t.sidx.map : null;
            var a = t.sidx.duration;
            var o = t.timeline || 0;
            var u = t.sidx.byterange;
            var l = u.offset + u.length;
            var c = i.timescale;
            var f = i.references.filter((function(e) {
                return e.referenceType !== 1
            }));
            var d = [];
            var h = t.endList ? "static" : "dynamic";
            var p = t.sidx.timeline;
            var m = p;
            var v = t.mediaSequence || 0;
            var g;
            if (typeof i.firstOffset === "bigint") {
                g = s.BigInt(l) + i.firstOffset
            } else {
                g = l + i.firstOffset
            }
            for (var y = 0; y < f.length; y++) {
                var _ = i.references[y];
                var b = _.referencedSize;
                var T = _.subsegmentDuration;
                var S = void 0;
                if (typeof g === "bigint") {
                    S = g + s.BigInt(b) - s.BigInt(1)
                } else {
                    S = g + b - 1
                }
                var E = g + "-" + S;
                var w = {
                    baseUrl: r,
                    timescale: c,
                    timeline: o,
                    periodStart: p,
                    presentationTime: m,
                    number: v,
                    duration: T,
                    sourceDuration: a,
                    indexRange: E,
                    type: h
                };
                var k = Rn(w)[0];
                if (n) {
                    k.map = n
                }
                d.push(k);
                if (typeof g === "bigint") {
                    g += s.BigInt(b)
                } else {
                    g += b
                }
                m += T / c;
                v++
            }
            t.segments = d;
            return t
        };
        var Un = ["AUDIO", "SUBTITLES"];
        var Bn = 1 / 60;
        var Fn = function e(t) {
            return In(t, (function(e) {
                var t = e.timeline;
                return t
            })).sort((function(e, t) {
                return e.timeline > t.timeline ? 1 : -1
            }))
        };
        var jn = function e(t, i) {
            for (var r = 0; r < t.length; r++) {
                if (t[r].attributes.NAME === i) {
                    return t[r]
                }
            }
            return null
        };
        var Hn = function e(t) {
            var i = [];
            $t(t, Un, (function(e, t, r, n) {
                i = i.concat(e.playlists || [])
            }));
            return i
        };
        var qn = function e(t) {
            var i = t.playlist,
                r = t.mediaSequence;
            i.mediaSequence = r;
            i.segments.forEach((function(e, t) {
                e.number = i.mediaSequence + t
            }))
        };
        var Vn = function e(t) {
            var i = t.oldPlaylists,
                r = t.newPlaylists,
                n = t.timelineStarts;
            r.forEach((function(e) {
                e.discontinuitySequence = Cn(n, (function(t) {
                    var i = t.timeline;
                    return i === e.timeline
                }));
                var t = jn(i, e.attributes.NAME);
                if (!t) {
                    return
                }
                if (e.sidx) {
                    return
                }
                var r = e.segments[0];
                var a = Cn(t.segments, (function(e) {
                    return Math.abs(e.presentationTime - r.presentationTime) < Bn
                }));
                if (a === -1) {
                    qn({
                        playlist: e,
                        mediaSequence: t.mediaSequence + t.segments.length
                    });
                    e.segments[0].discontinuity = true;
                    e.discontinuityStarts.unshift(0);
                    if (!t.segments.length && e.timeline > t.timeline || t.segments.length && e.timeline > t.segments[t.segments.length - 1].timeline) {
                        e.discontinuitySequence--
                    }
                    return
                }
                var s = t.segments[a];
                if (s.discontinuity && !r.discontinuity) {
                    r.discontinuity = true;
                    e.discontinuityStarts.unshift(0);
                    e.discontinuitySequence--
                }
                qn({
                    playlist: e,
                    mediaSequence: t.segments[a].number
                })
            }))
        };
        var Wn = function e(t) {
            var i = t.oldManifest,
                r = t.newManifest;
            var n = i.playlists.concat(Hn(i));
            var a = r.playlists.concat(Hn(r));
            r.timelineStarts = Fn([i.timelineStarts, r.timelineStarts]);
            Vn({
                oldPlaylists: n,
                newPlaylists: a,
                timelineStarts: r.timelineStarts
            });
            return r
        };
        var Gn = function e(t) {
            return t && t.uri + "-" + Pn(t.byterange)
        };
        var Xn = function e(t) {
            var i = Tn(t.reduce((function(e, t) {
                var i = t.attributes.id + (t.attributes.lang || "");
                if (!e[i]) {
                    e[i] = t;
                    e[i].attributes.timelineStarts = []
                } else {
                    if (t.segments) {
                        var r;
                        if (t.segments[0]) {
                            t.segments[0].discontinuity = true
                        }(r = e[i].segments).push.apply(r, t.segments)
                    }
                    if (t.attributes.contentProtection) {
                        e[i].attributes.contentProtection = t.attributes.contentProtection
                    }
                }
                e[i].attributes.timelineStarts.push({
                    start: t.attributes.periodStart,
                    timeline: t.attributes.periodStart
                });
                return e
            }), {}));
            return i.map((function(e) {
                e.discontinuityStarts = kn(e.segments || [], "discontinuity");
                return e
            }))
        };
        var zn = function e(t, i) {
            var r = Gn(t.sidx);
            var n = r && i[r] && i[r].sidx;
            if (n) {
                Mn(t, n, t.sidx.resolvedUri)
            }
            return t
        };
        var Kn = function e(t, i) {
            if (i === void 0) {
                i = {}
            }
            if (!Object.keys(i).length) {
                return t
            }
            for (var r in t) {
                t[r] = zn(t[r], i)
            }
            return t
        };
        var Yn = function e(t, i) {
            var r;
            var n = t.attributes,
                a = t.segments,
                s = t.sidx,
                o = t.mediaSequence,
                u = t.discontinuitySequence,
                l = t.discontinuityStarts;
            var c = {
                attributes: (r = {
                    NAME: n.id,
                    BANDWIDTH: n.bandwidth,
                    CODECS: n.codecs
                }, r["PROGRAM-ID"] = 1, r),
                uri: "",
                endList: n.type === "static",
                timeline: n.periodStart,
                resolvedUri: "",
                targetDuration: n.duration,
                discontinuitySequence: u,
                discontinuityStarts: l,
                timelineStarts: n.timelineStarts,
                mediaSequence: o,
                segments: a
            };
            if (n.contentProtection) {
                c.contentProtection = n.contentProtection
            }
            if (s) {
                c.sidx = s
            }
            if (i) {
                c.attributes.AUDIO = "audio";
                c.attributes.SUBTITLES = "subs"
            }
            return c
        };
        var $n = function e(t) {
            var i;
            var r = t.attributes,
                n = t.segments,
                a = t.mediaSequence,
                s = t.discontinuityStarts,
                o = t.discontinuitySequence;
            if (typeof n === "undefined") {
                n = [{
                    uri: r.baseUrl,
                    timeline: r.periodStart,
                    resolvedUri: r.baseUrl || "",
                    duration: r.sourceDuration,
                    number: 0
                }];
                r.duration = r.sourceDuration
            }
            var u = (i = {
                NAME: r.id,
                BANDWIDTH: r.bandwidth
            }, i["PROGRAM-ID"] = 1, i);
            if (r.codecs) {
                u.CODECS = r.codecs
            }
            return {
                attributes: u,
                uri: "",
                endList: r.type === "static",
                timeline: r.periodStart,
                resolvedUri: r.baseUrl || "",
                targetDuration: r.duration,
                timelineStarts: r.timelineStarts,
                discontinuityStarts: s,
                discontinuitySequence: o,
                mediaSequence: a,
                segments: n
            }
        };
        var Qn = function e(t, i, r) {
            if (i === void 0) {
                i = {}
            }
            if (r === void 0) {
                r = false
            }
            var n;
            var a = t.reduce((function(e, t) {
                var a = t.attributes.role && t.attributes.role.value || "";
                var s = t.attributes.lang || "";
                var o = t.attributes.label || "main";
                if (s && !t.attributes.label) {
                    var u = a ? " (" + a + ")" : "";
                    o = "" + t.attributes.lang + u
                }
                if (!e[o]) {
                    e[o] = {
                        language: s,
                        autoselect: true,
                        default: a === "main",
                        playlists: [],
                        uri: ""
                    }
                }
                var l = zn(Yn(t, r), i);
                e[o].playlists.push(l);
                if (typeof n === "undefined" && a === "main") {
                    n = t;
                    n.default = true
                }
                return e
            }), {});
            if (!n) {
                var s = Object.keys(a)[0];
                a[s].default = true
            }
            return a
        };
        var Jn = function e(t, i) {
            if (i === void 0) {
                i = {}
            }
            return t.reduce((function(e, t) {
                var r = t.attributes.lang || "text";
                if (!e[r]) {
                    e[r] = {
                        language: r,
                        default: false,
                        autoselect: false,
                        playlists: [],
                        uri: ""
                    }
                }
                e[r].playlists.push(zn($n(t), i));
                return e
            }), {})
        };
        var Zn = function e(t) {
            return t.reduce((function(e, t) {
                if (!t) {
                    return e
                }
                t.forEach((function(t) {
                    var i = t.channel,
                        r = t.language;
                    e[r] = {
                        autoselect: false,
                        default: false,
                        instreamId: i,
                        language: r
                    };
                    if (t.hasOwnProperty("aspectRatio")) {
                        e[r].aspectRatio = t.aspectRatio
                    }
                    if (t.hasOwnProperty("easyReader")) {
                        e[r].easyReader = t.easyReader
                    }
                    if (t.hasOwnProperty("3D")) {
                        e[r]["3D"] = t["3D"]
                    }
                }));
                return e
            }), {})
        };
        var ea = function e(t) {
            var i;
            var r = t.attributes,
                n = t.segments,
                a = t.sidx,
                s = t.discontinuityStarts;
            var o = {
                attributes: (i = {
                    NAME: r.id,
                    AUDIO: "audio",
                    SUBTITLES: "subs",
                    RESOLUTION: {
                        width: r.width,
                        height: r.height
                    },
                    CODECS: r.codecs,
                    BANDWIDTH: r.bandwidth
                }, i["PROGRAM-ID"] = 1, i),
                uri: "",
                endList: r.type === "static",
                timeline: r.periodStart,
                resolvedUri: "",
                targetDuration: r.duration,
                discontinuityStarts: s,
                timelineStarts: r.timelineStarts,
                segments: n
            };
            if (r.contentProtection) {
                o.contentProtection = r.contentProtection
            }
            if (a) {
                o.sidx = a
            }
            return o
        };
        var ta = function e(t) {
            var i = t.attributes;
            return i.mimeType === "video/mp4" || i.mimeType === "video/webm" || i.contentType === "video"
        };
        var ia = function e(t) {
            var i = t.attributes;
            return i.mimeType === "audio/mp4" || i.mimeType === "audio/webm" || i.contentType === "audio"
        };
        var ra = function e(t) {
            var i = t.attributes;
            return i.mimeType === "text/vtt" || i.contentType === "text"
        };
        var na = function e(t, i) {
            t.forEach((function(e) {
                e.mediaSequence = 0;
                e.discontinuitySequence = Cn(i, (function(t) {
                    var i = t.timeline;
                    return i === e.timeline
                }));
                if (!e.segments) {
                    return
                }
                e.segments.forEach((function(e, t) {
                    e.number = t
                }))
            }))
        };
        var aa = function e(t) {
            if (!t) {
                return []
            }
            return Object.keys(t).reduce((function(e, i) {
                var r = t[i];
                return e.concat(r.playlists)
            }), [])
        };
        var sa = function e(t) {
            var i;
            var r = t.dashPlaylists,
                n = t.locations,
                a = t.sidxMapping,
                s = a === void 0 ? {} : a,
                o = t.previousManifest;
            if (!r.length) {
                return {}
            }
            var u = r[0].attributes,
                l = u.sourceDuration,
                c = u.type,
                f = u.suggestedPresentationDelay,
                d = u.minimumUpdatePeriod;
            var h = Xn(r.filter(ta)).map(ea);
            var p = Xn(r.filter(ia));
            var m = Xn(r.filter(ra));
            var v = r.map((function(e) {
                return e.attributes.captionServices
            })).filter(Boolean);
            var g = {
                allowCache: true,
                discontinuityStarts: [],
                segments: [],
                endList: true,
                mediaGroups: (i = {
                    AUDIO: {},
                    VIDEO: {}
                }, i["CLOSED-CAPTIONS"] = {}, i.SUBTITLES = {}, i),
                uri: "",
                duration: l,
                playlists: Kn(h, s)
            };
            if (d >= 0) {
                g.minimumUpdatePeriod = d * 1e3
            }
            if (n) {
                g.locations = n
            }
            if (c === "dynamic") {
                g.suggestedPresentationDelay = f
            }
            var y = g.playlists.length === 0;
            var _ = p.length ? Qn(p, s, y) : null;
            var b = m.length ? Jn(m, s) : null;
            var T = h.concat(aa(_), aa(b));
            var S = T.map((function(e) {
                var t = e.timelineStarts;
                return t
            }));
            g.timelineStarts = Fn(S);
            na(T, g.timelineStarts);
            if (_) {
                g.mediaGroups.AUDIO.audio = _
            }
            if (b) {
                g.mediaGroups.SUBTITLES.subs = b
            }
            if (v.length) {
                g.mediaGroups["CLOSED-CAPTIONS"].cc = Zn(v)
            }
            if (o) {
                return Wn({
                    oldManifest: o,
                    newManifest: g
                })
            }
            return g
        };
        var oa = function e(t, i, r) {
            var n = t.NOW,
                a = t.clientOffset,
                s = t.availabilityStartTime,
                o = t.timescale,
                u = o === void 0 ? 1 : o,
                l = t.periodStart,
                c = l === void 0 ? 0 : l,
                f = t.minimumUpdatePeriod,
                d = f === void 0 ? 0 : f;
            var h = (n + a) / 1e3;
            var p = s + c;
            var m = h + d;
            var v = m - p;
            return Math.ceil((v * u - i) / r)
        };
        var ua = function e(t, i) {
            var r = t.type,
                n = t.minimumUpdatePeriod,
                a = n === void 0 ? 0 : n,
                s = t.media,
                o = s === void 0 ? "" : s,
                u = t.sourceDuration,
                l = t.timescale,
                c = l === void 0 ? 1 : l,
                f = t.startNumber,
                d = f === void 0 ? 1 : f,
                h = t.periodStart;
            var p = [];
            var m = -1;
            for (var v = 0; v < i.length; v++) {
                var g = i[v];
                var y = g.d;
                var _ = g.r || 0;
                var b = g.t || 0;
                if (m < 0) {
                    m = b
                }
                if (b && b > m) {
                    m = b
                }
                var T = void 0;
                if (_ < 0) {
                    var S = v + 1;
                    if (S === i.length) {
                        if (r === "dynamic" && a > 0 && o.indexOf("$Number$") > 0) {
                            T = oa(t, m, y)
                        } else {
                            T = (u * c - m) / y
                        }
                    } else {
                        T = (i[S].t - m) / y
                    }
                } else {
                    T = _ + 1
                }
                var E = d + p.length + T;
                var w = d + p.length;
                while (w < E) {
                    p.push({
                        number: w,
                        duration: y / c,
                        time: m,
                        timeline: h
                    });
                    m += y;
                    w++
                }
            }
            return p
        };
        var la = /\$([A-z]*)(?:(%0)([0-9]+)d)?\$/g;
        var ca = function e(t) {
            return function(e, i, r, n) {
                if (e === "$$") {
                    return "$"
                }
                if (typeof t[i] === "undefined") {
                    return e
                }
                var a = "" + t[i];
                if (i === "RepresentationID") {
                    return a
                }
                if (!r) {
                    n = 1
                } else {
                    n = parseInt(n, 10)
                }
                if (a.length >= n) {
                    return a
                }
                return "" + new Array(n - a.length + 1).join("0") + a
            }
        };
        var fa = function e(t, i) {
            return t.replace(la, ca(i))
        };
        var da = function e(t, i) {
            if (!t.duration && !i) {
                return [{
                    number: t.startNumber || 1,
                    duration: t.sourceDuration,
                    time: 0,
                    timeline: t.periodStart
                }]
            }
            if (t.duration) {
                return Nn(t)
            }
            return ua(t, i)
        };
        var ha = function e(t, i) {
            var r = {
                RepresentationID: t.id,
                Bandwidth: t.bandwidth || 0
            };
            var n = t.initialization,
                a = n === void 0 ? {
                    sourceURL: "",
                    range: ""
                } : n;
            var s = xn({
                baseUrl: t.baseUrl,
                source: fa(a.sourceURL, r),
                range: a.range
            });
            var o = da(t, i);
            return o.map((function(e) {
                r.Number = e.number;
                r.Time = e.time;
                var i = fa(t.media || "", r);
                var n = t.timescale || 1;
                var a = t.presentationTimeOffset || 0;
                var o = t.periodStart + (e.time - a) / n;
                var u = {
                    uri: i,
                    timeline: e.timeline,
                    duration: e.duration,
                    resolvedUri: ut(t.baseUrl || "", i),
                    map: s,
                    number: e.number,
                    presentationTime: o
                };
                return u
            }))
        };
        var pa = function e(t, i) {
            var r = t.baseUrl,
                n = t.initialization,
                a = n === void 0 ? {} : n;
            var s = xn({
                baseUrl: r,
                source: a.sourceURL,
                range: a.range
            });
            var o = xn({
                baseUrl: r,
                source: i.media,
                range: i.mediaRange
            });
            o.map = s;
            return o
        };
        var ma = function e(t, i) {
            var r = t.duration,
                n = t.segmentUrls,
                a = n === void 0 ? [] : n,
                s = t.periodStart;
            if (!r && !i || r && i) {
                throw new Error(An.SEGMENT_TIME_UNSPECIFIED)
            }
            var o = a.map((function(e) {
                return pa(t, e)
            }));
            var u;
            if (r) {
                u = Nn(t)
            }
            if (i) {
                u = ua(t, i)
            }
            var l = u.map((function(e, i) {
                if (o[i]) {
                    var r = o[i];
                    var n = t.timescale || 1;
                    var a = t.presentationTimeOffset || 0;
                    r.timeline = e.timeline;
                    r.duration = e.duration;
                    r.number = e.number;
                    r.presentationTime = s + (e.time - a) / n;
                    return r
                }
            })).filter((function(e) {
                return e
            }));
            return l
        };
        var va = function e(t) {
            var i = t.attributes,
                r = t.segmentInfo;
            var n;
            var a;
            if (r.template) {
                a = ha;
                n = bn(i, r.template)
            } else if (r.base) {
                a = Rn;
                n = bn(i, r.base)
            } else if (r.list) {
                a = ma;
                n = bn(i, r.list)
            }
            var s = {
                attributes: i
            };
            if (!a) {
                return s
            }
            var o = a(n, r.segmentTimeline);
            if (n.duration) {
                var u = n,
                    l = u.duration,
                    c = u.timescale,
                    f = c === void 0 ? 1 : c;
                n.duration = l / f
            } else if (o.length) {
                n.duration = o.reduce((function(e, t) {
                    return Math.max(e, Math.ceil(t.duration))
                }), 0)
            } else {
                n.duration = 0
            }
            s.attributes = n;
            s.segments = o;
            if (r.base && n.indexRange) {
                s.sidx = o[0];
                s.segments = []
            }
            return s
        };
        var ga = function e(t) {
            return t.map(va)
        };
        var ya = function e(t, i) {
            return wn(t.childNodes).filter((function(e) {
                var t = e.tagName;
                return t === i
            }))
        };
        var _a = function e(t) {
            return t.textContent.trim()
        };
        var ba = function e(t) {
            var i = 365 * 24 * 60 * 60;
            var r = 30 * 24 * 60 * 60;
            var n = 24 * 60 * 60;
            var a = 60 * 60;
            var s = 60;
            var o = /P(?:(\d*)Y)?(?:(\d*)M)?(?:(\d*)D)?(?:T(?:(\d*)H)?(?:(\d*)M)?(?:([\d.]*)S)?)?/;
            var u = o.exec(t);
            if (!u) {
                return 0
            }
            var l = u.slice(1),
                c = l[0],
                f = l[1],
                d = l[2],
                h = l[3],
                p = l[4],
                m = l[5];
            return parseFloat(c || 0) * i + parseFloat(f || 0) * r + parseFloat(d || 0) * n + parseFloat(h || 0) * a + parseFloat(p || 0) * s + parseFloat(m || 0)
        };
        var Ta = function e(t) {
            var i = /^\d+-\d+-\d+T\d+:\d+:\d+(\.\d+)?$/;
            if (i.test(t)) {
                t += "Z"
            }
            return Date.parse(t)
        };
        var Sa = {
            mediaPresentationDuration: function e(t) {
                return ba(t)
            },
            availabilityStartTime: function e(t) {
                return Ta(t) / 1e3
            },
            minimumUpdatePeriod: function e(t) {
                return ba(t)
            },
            suggestedPresentationDelay: function e(t) {
                return ba(t)
            },
            type: function e(t) {
                return t
            },
            timeShiftBufferDepth: function e(t) {
                return ba(t)
            },
            start: function e(t) {
                return ba(t)
            },
            width: function e(t) {
                return parseInt(t, 10)
            },
            height: function e(t) {
                return parseInt(t, 10)
            },
            bandwidth: function e(t) {
                return parseInt(t, 10)
            },
            startNumber: function e(t) {
                return parseInt(t, 10)
            },
            timescale: function e(t) {
                return parseInt(t, 10)
            },
            presentationTimeOffset: function e(t) {
                return parseInt(t, 10)
            },
            duration: function e(t) {
                var i = parseInt(t, 10);
                if (isNaN(i)) {
                    return ba(t)
                }
                return i
            },
            d: function e(t) {
                return parseInt(t, 10)
            },
            t: function e(t) {
                return parseInt(t, 10)
            },
            r: function e(t) {
                return parseInt(t, 10)
            },
            DEFAULT: function e(t) {
                return t
            }
        };
        var Ea = function e(t) {
            if (!(t && t.attributes)) {
                return {}
            }
            return wn(t.attributes).reduce((function(e, t) {
                var i = Sa[t.name] || Sa.DEFAULT;
                e[t.name] = i(t.value);
                return e
            }), {})
        };
        var wa = {
            "urn:uuid:1077efec-c0b2-4d02-ace3-3c1e52e2fb4b": "org.w3.clearkey",
            "urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed": "com.widevine.alpha",
            "urn:uuid:9a04f079-9840-4286-ab92-e65be0885f95": "com.microsoft.playready",
            "urn:uuid:f239e769-efa3-4850-9c16-a903c6932efb": "com.adobe.primetime"
        };
        var ka = function e(t, i) {
            if (!i.length) {
                return t
            }
            return En(t.map((function(e) {
                return i.map((function(t) {
                    return ut(e, _a(t))
                }))
            })))
        };
        var Ca = function e(t) {
            var i = ya(t, "SegmentTemplate")[0];
            var r = ya(t, "SegmentList")[0];
            var n = r && ya(r, "SegmentURL").map((function(e) {
                return bn({
                    tag: "SegmentURL"
                }, Ea(e))
            }));
            var a = ya(t, "SegmentBase")[0];
            var s = r || i;
            var o = s && ya(s, "SegmentTimeline")[0];
            var u = r || a || i;
            var l = u && ya(u, "Initialization")[0];
            var c = i && Ea(i);
            if (c && l) {
                c.initialization = l && Ea(l)
            } else if (c && c.initialization) {
                c.initialization = {
                    sourceURL: c.initialization
                }
            }
            var f = {
                template: c,
                segmentTimeline: o && ya(o, "S").map((function(e) {
                    return Ea(e)
                })),
                list: r && bn(Ea(r), {
                    segmentUrls: n,
                    initialization: Ea(l)
                }),
                base: a && bn(Ea(a), {
                    initialization: Ea(l)
                })
            };
            Object.keys(f).forEach((function(e) {
                if (!f[e]) {
                    delete f[e]
                }
            }));
            return f
        };
        var Ia = function e(t, i, r) {
            return function(e) {
                var n = ya(e, "BaseURL");
                var a = ka(i, n);
                var s = bn(t, Ea(e));
                var o = Ca(e);
                return a.map((function(e) {
                    return {
                        segmentInfo: bn(r, o),
                        attributes: bn(s, {
                            baseUrl: e
                        })
                    }
                }))
            }
        };
        var Aa = function e(t) {
            return t.reduce((function(e, t) {
                var i = Ea(t);
                if (i.schemeIdUri) {
                    i.schemeIdUri = i.schemeIdUri.toLowerCase()
                }
                var r = wa[i.schemeIdUri];
                if (r) {
                    e[r] = {
                        attributes: i
                    };
                    var n = ya(t, "cenc:pssh")[0];
                    if (n) {
                        var a = _a(n);
                        e[r].pssh = a && ft(a)
                    }
                }
                return e
            }), {})
        };
        var xa = function e(t) {
            if (t.schemeIdUri === "urn:scte:dash:cc:cea-608:2015") {
                var i = typeof t.value !== "string" ? [] : t.value.split(";");
                return i.map((function(e) {
                    var t;
                    var i;
                    i = e;
                    if (/^CC\d=/.test(e)) {
                        var r = e.split("=");
                        t = r[0];
                        i = r[1]
                    } else if (/^CC\d$/.test(e)) {
                        t = e
                    }
                    return {
                        channel: t,
                        language: i
                    }
                }))
            } else if (t.schemeIdUri === "urn:scte:dash:cc:cea-708:2015") {
                var r = typeof t.value !== "string" ? [] : t.value.split(";");
                return r.map((function(e) {
                    var t = {
                        channel: undefined,
                        language: undefined,
                        aspectRatio: 1,
                        easyReader: 0,
                        "3D": 0
                    };
                    if (/=/.test(e)) {
                        var i = e.split("="),
                            r = i[0],
                            n = i[1],
                            a = n === void 0 ? "" : n;
                        t.channel = r;
                        t.language = e;
                        a.split(",").forEach((function(e) {
                            var i = e.split(":"),
                                r = i[0],
                                n = i[1];
                            if (r === "lang") {
                                t.language = n
                            } else if (r === "er") {
                                t.easyReader = Number(n)
                            } else if (r === "war") {
                                t.aspectRatio = Number(n)
                            } else if (r === "3D") {
                                t["3D"] = Number(n)
                            }
                        }))
                    } else {
                        t.language = e
                    }
                    if (t.channel) {
                        t.channel = "SERVICE" + t.channel
                    }
                    return t
                }))
            }
        };
        var Pa = function e(t, i, r) {
            return function(e) {
                var n = Ea(e);
                var a = ka(i, ya(e, "BaseURL"));
                var s = ya(e, "Role")[0];
                var o = {
                    role: Ea(s)
                };
                var u = bn(t, n, o);
                var l = ya(e, "Accessibility")[0];
                var c = xa(Ea(l));
                if (c) {
                    u = bn(u, {
                        captionServices: c
                    })
                }
                var f = ya(e, "Label")[0];
                if (f && f.childNodes.length) {
                    var d = f.childNodes[0].nodeValue.trim();
                    u = bn(u, {
                        label: d
                    })
                }
                var h = Aa(ya(e, "ContentProtection"));
                if (Object.keys(h).length) {
                    u = bn(u, {
                        contentProtection: h
                    })
                }
                var p = Ca(e);
                var m = ya(e, "Representation");
                var v = bn(r, p);
                return En(m.map(Ia(u, a, v)))
            }
        };
        var Oa = function e(t, i) {
            return function(e, r) {
                var n = ka(i, ya(e.node, "BaseURL"));
                var a = bn(t, {
                    periodStart: e.attributes.start
                });
                if (typeof e.attributes.duration === "number") {
                    a.periodDuration = e.attributes.duration
                }
                var s = ya(e.node, "AdaptationSet");
                var o = Ca(e.node);
                return En(s.map(Pa(a, n, o)))
            }
        };
        var Da = function e(t) {
            var i = t.attributes,
                r = t.priorPeriodAttributes,
                n = t.mpdType;
            if (typeof i.start === "number") {
                return i.start
            }
            if (r && typeof r.start === "number" && typeof r.duration === "number") {
                return r.start + r.duration
            }
            if (!r && n === "static") {
                return 0
            }
            return null
        };
        var La = function e(t, i) {
            if (i === void 0) {
                i = {}
            }
            var r = i,
                n = r.manifestUri,
                a = n === void 0 ? "" : n,
                s = r.NOW,
                o = s === void 0 ? Date.now() : s,
                u = r.clientOffset,
                l = u === void 0 ? 0 : u;
            var c = ya(t, "Period");
            if (!c.length) {
                throw new Error(An.INVALID_NUMBER_OF_PERIOD)
            }
            var f = ya(t, "Location");
            var d = Ea(t);
            var h = ka([a], ya(t, "BaseURL"));
            d.type = d.type || "static";
            d.sourceDuration = d.mediaPresentationDuration || 0;
            d.NOW = o;
            d.clientOffset = l;
            if (f.length) {
                d.locations = f.map(_a)
            }
            var p = [];
            c.forEach((function(e, t) {
                var i = Ea(e);
                var r = p[t - 1];
                i.start = Da({
                    attributes: i,
                    priorPeriodAttributes: r ? r.attributes : null,
                    mpdType: d.type
                });
                p.push({
                    node: e,
                    attributes: i
                })
            }));
            return {
                locations: d.locations,
                representationInfo: En(p.map(Oa(d, h)))
            }
        };
        var Na = function e(t) {
            if (t === "") {
                throw new Error(An.DASH_EMPTY_MANIFEST)
            }
            var i = new gn;
            var r;
            var n;
            try {
                r = i.parseFromString(t, "application/xml");
                n = r && r.documentElement.tagName === "MPD" ? r.documentElement : null
            } catch (e) {}
            if (!n || n && n.getElementsByTagName("parsererror").length > 0) {
                throw new Error(An.DASH_INVALID_XML)
            }
            return n
        };
        var Ra = function e(t) {
            var i = ya(t, "UTCTiming")[0];
            if (!i) {
                return null
            }
            var r = Ea(i);
            switch (r.schemeIdUri) {
                case "urn:mpeg:dash:utc:http-head:2014":
                case "urn:mpeg:dash:utc:http-head:2012":
                    r.method = "HEAD";
                    break;
                case "urn:mpeg:dash:utc:http-xsdate:2014":
                case "urn:mpeg:dash:utc:http-iso:2014":
                case "urn:mpeg:dash:utc:http-xsdate:2012":
                case "urn:mpeg:dash:utc:http-iso:2012":
                    r.method = "GET";
                    break;
                case "urn:mpeg:dash:utc:direct:2014":
                case "urn:mpeg:dash:utc:direct:2012":
                    r.method = "DIRECT";
                    r.value = Date.parse(r.value);
                    break;
                case "urn:mpeg:dash:utc:http-ntp:2014":
                case "urn:mpeg:dash:utc:ntp:2014":
                case "urn:mpeg:dash:utc:sntp:2014":
                default:
                    throw new Error(An.UNSUPPORTED_UTC_TIMING_SCHEME)
            }
            return r
        };
        var Ma = function e(t, i) {
            if (i === void 0) {
                i = {}
            }
            var r = La(Na(t), i);
            var n = ga(r.representationInfo);
            return sa({
                dashPlaylists: n,
                locations: r.locations,
                sidxMapping: i.sidxMapping,
                previousManifest: i.previousManifest
            })
        };
        var Ua = function e(t) {
            return Ra(Na(t))
        };
        var Ba = Math.pow(2, 32);
        var Fa = function(e) {
            var t = new DataView(e.buffer, e.byteOffset, e.byteLength);
            var i;
            if (t.getBigUint64) {
                i = t.getBigUint64(0);
                if (i < Number.MAX_SAFE_INTEGER) {
                    return Number(i)
                }
                return i
            }
            return t.getUint32(0) * Ba + t.getUint32(4)
        };
        var ja = {
            getUint64: Fa,
            MAX_UINT32: Ba
        };
        var Ha = ja.getUint64;
        var qa = function(e) {
            var t = new DataView(e.buffer, e.byteOffset, e.byteLength),
                i = {
                    version: e[0],
                    flags: new Uint8Array(e.subarray(1, 4)),
                    references: [],
                    referenceId: t.getUint32(4),
                    timescale: t.getUint32(8)
                },
                r = 12;
            if (i.version === 0) {
                i.earliestPresentationTime = t.getUint32(r);
                i.firstOffset = t.getUint32(r + 4);
                r += 8
            } else {
                i.earliestPresentationTime = Ha(e.subarray(r));
                i.firstOffset = Ha(e.subarray(r + 8));
                r += 16
            }
            r += 2;
            var n = t.getUint16(r);
            r += 2;
            for (; n > 0; r += 12, n--) {
                i.references.push({
                    referenceType: (e[r] & 128) >>> 7,
                    referencedSize: t.getUint32(r) & 2147483647,
                    subsegmentDuration: t.getUint32(r + 4),
                    startsWithSap: !!(e[r + 8] & 128),
                    sapType: (e[r + 8] & 112) >>> 4,
                    sapDeltaTime: t.getUint32(r + 8) & 268435455
                })
            }
            return i
        };
        var Va = qa;
        var Wa = qt([73, 68, 51]);
        var Ga = function e(t, i) {
            if (i === void 0) {
                i = 0
            }
            t = qt(t);
            var r = t[i + 5];
            var n = t[i + 6] << 21 | t[i + 7] << 14 | t[i + 8] << 7 | t[i + 9];
            var a = (r & 16) >> 4;
            if (a) {
                return n + 20
            }
            return n + 10
        };
        var Xa = function e(t, i) {
            if (i === void 0) {
                i = 0
            }
            t = qt(t);
            if (t.length - i < 10 || !Yt(t, Wa, {
                    offset: i
                })) {
                return i
            }
            i += Ga(t, i);
            return e(t, i)
        };
        var za = function e(t) {
            if (typeof t === "string") {
                return zt(t)
            }
            if (typeof t === "number") {
                return t
            }
            return t
        };
        var Ka = function e(t) {
            if (!Array.isArray(t)) {
                return [za(t)]
            }
            return t.map((function(e) {
                return za(e)
            }))
        };
        var Ya = function e(t, i, r) {
            if (r === void 0) {
                r = false
            }
            i = Ka(i);
            t = qt(t);
            var n = [];
            if (!i.length) {
                return n
            }
            var a = 0;
            while (a < t.length) {
                var s = (t[a] << 24 | t[a + 1] << 16 | t[a + 2] << 8 | t[a + 3]) >>> 0;
                var o = t.subarray(a + 4, a + 8);
                if (s === 0) {
                    break
                }
                var u = a + s;
                if (u > t.length) {
                    if (r) {
                        break
                    }
                    u = t.length
                }
                var l = t.subarray(a + 8, u);
                if (Yt(o, i[0])) {
                    if (i.length === 1) {
                        n.push(l)
                    } else {
                        n.push.apply(n, e(l, i.slice(1), r))
                    }
                }
                a = u
            }
            return n
        };
        var $a = {
            EBML: qt([26, 69, 223, 163]),
            DocType: qt([66, 130]),
            Segment: qt([24, 83, 128, 103]),
            SegmentInfo: qt([21, 73, 169, 102]),
            Tracks: qt([22, 84, 174, 107]),
            Track: qt([174]),
            TrackNumber: qt([215]),
            DefaultDuration: qt([35, 227, 131]),
            TrackEntry: qt([174]),
            TrackType: qt([131]),
            FlagDefault: qt([136]),
            CodecID: qt([134]),
            CodecPrivate: qt([99, 162]),
            VideoTrack: qt([224]),
            AudioTrack: qt([225]),
            Cluster: qt([31, 67, 182, 117]),
            Timestamp: qt([231]),
            TimestampScale: qt([42, 215, 177]),
            BlockGroup: qt([160]),
            BlockDuration: qt([155]),
            Block: qt([161]),
            SimpleBlock: qt([163])
        };
        var Qa = [128, 64, 32, 16, 8, 4, 2, 1];
        var Ja = function e(t) {
            var i = 1;
            for (var r = 0; r < Qa.length; r++) {
                if (t & Qa[r]) {
                    break
                }
                i++
            }
            return i
        };
        var Za = function e(t, i, r, n) {
            if (r === void 0) {
                r = true
            }
            if (n === void 0) {
                n = false
            }
            var a = Ja(t[i]);
            var s = t.subarray(i, i + a);
            if (r) {
                s = Array.prototype.slice.call(t, i, i + a);
                s[0] ^= Qa[a - 1]
            }
            return {
                length: a,
                value: Gt(s, {
                    signed: n
                }),
                bytes: s
            }
        };
        var es = function e(t) {
            if (typeof t === "string") {
                return t.match(/.{1,2}/g).map((function(t) {
                    return e(t)
                }))
            }
            if (typeof t === "number") {
                return Xt(t)
            }
            return t
        };
        var ts = function e(t) {
            if (!Array.isArray(t)) {
                return [es(t)]
            }
            return t.map((function(e) {
                return es(e)
            }))
        };
        var is = function e(t, i, r) {
            if (r >= i.length) {
                return i.length
            }
            var n = Za(i, r, false);
            if (Yt(t.bytes, n.bytes)) {
                return r
            }
            var a = Za(i, r + n.length);
            return e(t, i, r + a.length + a.value + n.length)
        };
        var rs = function e(t, i) {
            i = ts(i);
            t = qt(t);
            var r = [];
            if (!i.length) {
                return r
            }
            var n = 0;
            while (n < t.length) {
                var a = Za(t, n, false);
                var s = Za(t, n + a.length);
                var o = n + a.length + s.length;
                if (s.value === 127) {
                    s.value = is(a, t, o);
                    if (s.value !== t.length) {
                        s.value -= o
                    }
                }
                var u = o + s.value > t.length ? t.length : o + s.value;
                var l = t.subarray(o, u);
                if (Yt(i[0], a.bytes)) {
                    if (i.length === 1) {
                        r.push(l)
                    } else {
                        r = r.concat(e(l, i.slice(1)))
                    }
                }
                var c = a.length + s.length + l.length;
                n += c
            }
            return r
        };
        var ns = qt([0, 0, 0, 1]);
        var as = qt([0, 0, 1]);
        var ss = qt([0, 0, 3]);
        var os = function e(t) {
            var i = [];
            var r = 1;
            while (r < t.length - 2) {
                if (Yt(t.subarray(r, r + 3), ss)) {
                    i.push(r + 2);
                    r++
                }
                r++
            }
            if (i.length === 0) {
                return t
            }
            var n = t.length - i.length;
            var a = new Uint8Array(n);
            var s = 0;
            for (r = 0; r < n; s++, r++) {
                if (s === i[0]) {
                    s++;
                    i.shift()
                }
                a[r] = t[s]
            }
            return a
        };
        var us = function e(t, i, r, n) {
            if (n === void 0) {
                n = Infinity
            }
            t = qt(t);
            r = [].concat(r);
            var a = 0;
            var s;
            var o = 0;
            while (a < t.length && (o < n || s)) {
                var u = void 0;
                if (Yt(t.subarray(a), ns)) {
                    u = 4
                } else if (Yt(t.subarray(a), as)) {
                    u = 3
                }
                if (!u) {
                    a++;
                    continue
                }
                o++;
                if (s) {
                    return os(t.subarray(s, a))
                }
                var l = void 0;
                if (i === "h264") {
                    l = t[a + u] & 31
                } else if (i === "h265") {
                    l = t[a + u] >> 1 & 63
                }
                if (r.indexOf(l) !== -1) {
                    s = a + u
                }
                a += u + (i === "h264" ? 1 : 2)
            }
            return t.subarray(0, 0)
        };
        var ls = function e(t, i, r) {
            return us(t, "h264", i, r)
        };
        var cs = function e(t, i, r) {
            return us(t, "h265", i, r)
        };
        var fs = {
            webm: qt([119, 101, 98, 109]),
            matroska: qt([109, 97, 116, 114, 111, 115, 107, 97]),
            flac: qt([102, 76, 97, 67]),
            ogg: qt([79, 103, 103, 83]),
            ac3: qt([11, 119]),
            riff: qt([82, 73, 70, 70]),
            avi: qt([65, 86, 73]),
            wav: qt([87, 65, 86, 69]),
            "3gp": qt([102, 116, 121, 112, 51, 103]),
            mp4: qt([102, 116, 121, 112]),
            fmp4: qt([115, 116, 121, 112]),
            mov: qt([102, 116, 121, 112, 113, 116]),
            moov: qt([109, 111, 111, 118]),
            moof: qt([109, 111, 111, 102])
        };
        var ds = {
            aac: function e(t) {
                var i = Xa(t);
                return Yt(t, [255, 16], {
                    offset: i,
                    mask: [255, 22]
                })
            },
            mp3: function e(t) {
                var i = Xa(t);
                return Yt(t, [255, 2], {
                    offset: i,
                    mask: [255, 6]
                })
            },
            webm: function e(t) {
                var i = rs(t, [$a.EBML, $a.DocType])[0];
                return Yt(i, fs.webm)
            },
            mkv: function e(t) {
                var i = rs(t, [$a.EBML, $a.DocType])[0];
                return Yt(i, fs.matroska)
            },
            mp4: function e(t) {
                if (ds["3gp"](t) || ds.mov(t)) {
                    return false
                }
                if (Yt(t, fs.mp4, {
                        offset: 4
                    }) || Yt(t, fs.fmp4, {
                        offset: 4
                    })) {
                    return true
                }
                if (Yt(t, fs.moof, {
                        offset: 4
                    }) || Yt(t, fs.moov, {
                        offset: 4
                    })) {
                    return true
                }
            },
            mov: function e(t) {
                return Yt(t, fs.mov, {
                    offset: 4
                })
            },
            "3gp": function e(t) {
                return Yt(t, fs["3gp"], {
                    offset: 4
                })
            },
            ac3: function e(t) {
                var i = Xa(t);
                return Yt(t, fs.ac3, {
                    offset: i
                })
            },
            ts: function e(t) {
                if (t.length < 189 && t.length >= 1) {
                    return t[0] === 71
                }
                var i = 0;
                while (i + 188 < t.length && i < 188) {
                    if (t[i] === 71 && t[i + 188] === 71) {
                        return true
                    }
                    i += 1
                }
                return false
            },
            flac: function e(t) {
                var i = Xa(t);
                return Yt(t, fs.flac, {
                    offset: i
                })
            },
            ogg: function e(t) {
                return Yt(t, fs.ogg)
            },
            avi: function e(t) {
                return Yt(t, fs.riff) && Yt(t, fs.avi, {
                    offset: 8
                })
            },
            wav: function e(t) {
                return Yt(t, fs.riff) && Yt(t, fs.wav, {
                    offset: 8
                })
            },
            h264: function e(t) {
                return ls(t, 7, 3).length
            },
            h265: function e(t) {
                return cs(t, [32, 33], 3).length
            }
        };
        var hs = Object.keys(ds).filter((function(e) {
            return e !== "ts" && e !== "h264" && e !== "h265"
        })).concat(["ts", "h264", "h265"]);
        hs.forEach((function(e) {
            var t = ds[e];
            ds[e] = function(e) {
                return t(qt(e))
            }
        }));
        var ps = ds;
        var ms = function e(t) {
            t = qt(t);
            for (var i = 0; i < hs.length; i++) {
                var r = hs[i];
                if (ps[r](t)) {
                    return r
                }
            }
            return ""
        };
        var vs = function e(t) {
            return Ya(t, ["moof"]).length > 0
        };
        var gs = 9e4,
            ys, _s, bs, Ts, Ss, Es, ws;
        ys = function(e) {
            return e * gs
        };
        _s = function(e, t) {
            return e * t
        };
        bs = function(e) {
            return e / gs
        };
        Ts = function(e, t) {
            return e / t
        };
        Ss = function(e, t) {
            return ys(Ts(e, t))
        };
        Es = function(e, t) {
            return _s(bs(e), t)
        };
        ws = function(e, t, i) {
            return bs(i ? e : e - t)
        };
        var ks = {
            ONE_SECOND_IN_TS: gs,
            secondsToVideoTs: ys,
            secondsToAudioTs: _s,
            videoTsToSeconds: bs,
            audioTsToSeconds: Ts,
            audioTsToVideoTs: Ss,
            videoTsToAudioTs: Es,
            metadataTsToSeconds: ws
        };
        var Cs = ks.ONE_SECOND_IN_TS;
        var Is = "7.20.1";
        var As = {};
        var xs = function e(t, i) {
            As[t] = As[t] || [];
            if (i) {
                As[t] = As[t].concat(i)
            }
            return As[t]
        };
        var Ps = function e(t, i) {
            xs(t, i)
        };
        var Os = function e(t, i) {
            var r = xs(t).indexOf(i);
            if (r <= -1) {
                return false
            }
            As[t] = As[t].slice();
            As[t].splice(r, 1);
            return true
        };
        var Ds = function e(t, i) {
            xs(t, [].concat(i).map((function(e) {
                var i = function i() {
                    Os(t, i);
                    return e.apply(void 0, arguments)
                };
                return i
            })))
        };
        var Ls = {
            prefixed: true
        };
        var Ns = [
            ["requestFullscreen", "exitFullscreen", "fullscreenElement", "fullscreenEnabled", "fullscreenchange", "fullscreenerror", "fullscreen"],
            ["webkitRequestFullscreen", "webkitExitFullscreen", "webkitFullscreenElement", "webkitFullscreenEnabled", "webkitfullscreenchange", "webkitfullscreenerror", "-webkit-full-screen"],
            ["mozRequestFullScreen", "mozCancelFullScreen", "mozFullScreenElement", "mozFullScreenEnabled", "mozfullscreenchange", "mozfullscreenerror", "-moz-full-screen"],
            ["msRequestFullscreen", "msExitFullscreen", "msFullscreenElement", "msFullscreenEnabled", "MSFullscreenChange", "MSFullscreenError", "-ms-fullscreen"]
        ];
        var Rs = Ns[0];
        var Ms;
        for (var Us = 0; Us < Ns.length; Us++) {
            if (Ns[Us][1] in W) {
                Ms = Ns[Us];
                break
            }
        }
        if (Ms) {
            for (var Bs = 0; Bs < Ms.length; Bs++) {
                Ls[Rs[Bs]] = Ms[Bs]
            }
            Ls.prefixed = Ms[0] !== Rs[0]
        }
        var Fs = [];
        var js = function e(t, i) {
            return function(e, r, n) {
                var a = i.levels[r];
                var o = new RegExp("^(" + a + ")$");
                if (e !== "log") {
                    n.unshift(e.toUpperCase() + ":")
                }
                n.unshift(t + ":");
                if (Fs) {
                    Fs.push([].concat(n));
                    var u = Fs.length - 1e3;
                    Fs.splice(0, u > 0 ? u : 0)
                }
                if (!s.console) {
                    return
                }
                var l = s.console[e];
                if (!l && e === "debug") {
                    l = s.console.info || s.console.log
                }
                if (!l || !a || !o.test(e)) {
                    return
                }
                l[Array.isArray(n) ? "apply" : "call"](s.console, n)
            }
        };

        function Hs(e) {
            var t = "info";
            var i;
            var r = function e() {
                for (var r = arguments.length, n = new Array(r), a = 0; a < r; a++) {
                    n[a] = arguments[a]
                }
                i("log", t, n)
            };
            i = js(e, r);
            r.createLogger = function(t) {
                return Hs(e + ": " + t)
            };
            r.levels = {
                all: "debug|log|warn|error",
                off: "",
                debug: "debug|log|warn|error",
                info: "log|warn|error",
                warn: "warn|error",
                error: "error",
                DEFAULT: t
            };
            r.level = function(e) {
                if (typeof e === "string") {
                    if (!r.levels.hasOwnProperty(e)) {
                        throw new Error('"' + e + '" in not a valid log level')
                    }
                    t = e
                }
                return t
            };
            r.history = function() {
                return Fs ? [].concat(Fs) : []
            };
            r.history.filter = function(e) {
                return (Fs || []).filter((function(t) {
                    return new RegExp(".*" + e + ".*").test(t[0])
                }))
            };
            r.history.clear = function() {
                if (Fs) {
                    Fs.length = 0
                }
            };
            r.history.disable = function() {
                if (Fs !== null) {
                    Fs.length = 0;
                    Fs = null
                }
            };
            r.history.enable = function() {
                if (Fs === null) {
                    Fs = []
                }
            };
            r.error = function() {
                for (var e = arguments.length, r = new Array(e), n = 0; n < e; n++) {
                    r[n] = arguments[n]
                }
                return i("error", t, r)
            };
            r.warn = function() {
                for (var e = arguments.length, r = new Array(e), n = 0; n < e; n++) {
                    r[n] = arguments[n]
                }
                return i("warn", t, r)
            };
            r.debug = function() {
                for (var e = arguments.length, r = new Array(e), n = 0; n < e; n++) {
                    r[n] = arguments[n]
                }
                return i("debug", t, r)
            };
            return r
        }
        var qs = Hs("VIDEOJS");
        var Vs = qs.createLogger;
        var Ws = Object.prototype.toString;
        var Gs = function e(t) {
            return Ys(t) ? Object.keys(t) : []
        };

        function Xs(e, t) {
            Gs(e).forEach((function(i) {
                return t(e[i], i)
            }))
        }

        function zs(e, t, i) {
            if (i === void 0) {
                i = 0
            }
            return Gs(e).reduce((function(i, r) {
                return t(i, e[r], r)
            }), i)
        }

        function Ks(e) {
            for (var t = arguments.length, i = new Array(t > 1 ? t - 1 : 0), r = 1; r < t; r++) {
                i[r - 1] = arguments[r]
            }
            if (Object.assign) {
                return X.apply(void 0, [e].concat(i))
            }
            i.forEach((function(t) {
                if (!t) {
                    return
                }
                Xs(t, (function(t, i) {
                    e[i] = t
                }))
            }));
            return e
        }

        function Ys(e) {
            return !!e && typeof e === "object"
        }

        function $s(e) {
            return Ys(e) && Ws.call(e) === "[object Object]" && e.constructor === Object
        }

        function Qs(e, t) {
            if (!e || !t) {
                return ""
            }
            if (typeof s.getComputedStyle === "function") {
                var i;
                try {
                    i = s.getComputedStyle(e)
                } catch (e) {
                    return ""
                }
                return i ? i.getPropertyValue(t) || i[t] : ""
            }
            return ""
        }
        var Js = s.navigator && s.navigator.userAgent || "";
        var Zs = /AppleWebKit\/([\d.]+)/i.exec(Js);
        var eo = Zs ? parseFloat(Zs.pop()) : null;
        var to = /iPod/i.test(Js);
        var io = function() {
            var e = Js.match(/OS (\d+)_/i);
            if (e && e[1]) {
                return e[1]
            }
            return null
        }();
        var ro = /Android/i.test(Js);
        var no = function() {
            var e = Js.match(/Android (\d+)(?:\.(\d+))?(?:\.(\d+))*/i);
            if (!e) {
                return null
            }
            var t = e[1] && parseFloat(e[1]);
            var i = e[2] && parseFloat(e[2]);
            if (t && i) {
                return parseFloat(e[1] + "." + e[2])
            } else if (t) {
                return t
            }
            return null
        }();
        var ao = ro && no < 5 && eo < 537;
        var so = /Firefox/i.test(Js);
        var oo = /Edg/i.test(Js);
        var uo = !oo && (/Chrome/i.test(Js) || /CriOS/i.test(Js));
        var lo = function() {
            var e = Js.match(/(Chrome|CriOS)\/(\d+)/);
            if (e && e[2]) {
                return parseFloat(e[2])
            }
            return null
        }();
        var co = function() {
            var e = /MSIE\s(\d+)\.\d/.exec(Js);
            var t = e && parseFloat(e[1]);
            if (!t && /Trident\/7.0/i.test(Js) && /rv:11.0/.test(Js)) {
                t = 11
            }
            return t
        }();
        var fo = /Safari/i.test(Js) && !uo && !ro && !oo;
        var ho = /Windows/i.test(Js);
        var po = Boolean(Eo() && ("ontouchstart" in s || s.navigator.maxTouchPoints || s.DocumentTouch && s.document instanceof s.DocumentTouch));
        var mo = /iPad/i.test(Js) || fo && po && !/iPhone/i.test(Js);
        var vo = /iPhone/i.test(Js) && !mo;
        var go = vo || mo || to;
        var yo = (fo || go) && !uo;
        var _o = Object.freeze({
            __proto__: null,
            IS_IPOD: to,
            IOS_VERSION: io,
            IS_ANDROID: ro,
            ANDROID_VERSION: no,
            IS_NATIVE_ANDROID: ao,
            IS_FIREFOX: so,
            IS_EDGE: oo,
            IS_CHROME: uo,
            CHROME_VERSION: lo,
            IE_VERSION: co,
            IS_SAFARI: fo,
            IS_WINDOWS: ho,
            TOUCH_ENABLED: po,
            IS_IPAD: mo,
            IS_IPHONE: vo,
            IS_IOS: go,
            IS_ANY_SAFARI: yo
        });

        function bo(e) {
            return typeof e === "string" && Boolean(e.trim())
        }

        function To(e) {
            if (e.indexOf(" ") >= 0) {
                throw new Error("class has illegal whitespace characters")
            }
        }

        function So(e) {
            return new RegExp("(^|\\s)" + e + "($|\\s)")
        }

        function Eo() {
            return W === s.document
        }

        function wo(e) {
            return Ys(e) && e.nodeType === 1
        }

        function ko() {
            try {
                return s.parent !== s.self
            } catch (e) {
                return true
            }
        }

        function Co(e) {
            return function(t, i) {
                if (!bo(t)) {
                    return W[e](null)
                }
                if (bo(i)) {
                    i = W.querySelector(i)
                }
                var r = wo(i) ? i : W;
                return r[e] && r[e](t)
            }
        }

        function Io(e, t, i, r) {
            if (e === void 0) {
                e = "div"
            }
            if (t === void 0) {
                t = {}
            }
            if (i === void 0) {
                i = {}
            }
            var n = W.createElement(e);
            Object.getOwnPropertyNames(t).forEach((function(e) {
                var i = t[e];
                if (e.indexOf("aria-") !== -1 || e === "role" || e === "type") {
                    qs.warn("Setting attributes in the second argument of createEl()\n" + "has been deprecated. Use the third argument instead.\n" + ("createEl(type, properties, attributes). Attempting to set " + e + " to " + i + "."));
                    n.setAttribute(e, i)
                } else if (e === "textContent") {
                    Ao(n, i)
                } else if (n[e] !== i || e === "tabIndex") {
                    n[e] = i
                }
            }));
            Object.getOwnPropertyNames(i).forEach((function(e) {
                n.setAttribute(e, i[e])
            }));
            if (r) {
                zo(n, r)
            }
            return n
        }

        function Ao(e, t) {
            if (typeof e.textContent === "undefined") {
                e.innerText = t
            } else {
                e.textContent = t
            }
            return e
        }

        function xo(e, t) {
            if (t.firstChild) {
                t.insertBefore(e, t.firstChild)
            } else {
                t.appendChild(e)
            }
        }

        function Po(e, t) {
            To(t);
            if (e.classList) {
                return e.classList.contains(t)
            }
            return So(t).test(e.className)
        }

        function Oo(e, t) {
            if (e.classList) {
                e.classList.add(t)
            } else if (!Po(e, t)) {
                e.className = (e.className + " " + t).trim()
            }
            return e
        }

        function Do(e, t) {
            if (!e) {
                qs.warn("removeClass was called with an element that doesn't exist");
                return null
            }
            if (e.classList) {
                e.classList.remove(t)
            } else {
                To(t);
                e.className = e.className.split(/\s+/).filter((function(e) {
                    return e !== t
                })).join(" ")
            }
            return e
        }

        function Lo(e, t, i) {
            var r = Po(e, t);
            if (typeof i === "function") {
                i = i(e, t)
            }
            if (typeof i !== "boolean") {
                i = !r
            }
            if (i === r) {
                return
            }
            if (i) {
                Oo(e, t)
            } else {
                Do(e, t)
            }
            return e
        }

        function No(e, t) {
            Object.getOwnPropertyNames(t).forEach((function(i) {
                var r = t[i];
                if (r === null || typeof r === "undefined" || r === false) {
                    e.removeAttribute(i)
                } else {
                    e.setAttribute(i, r === true ? "" : r)
                }
            }))
        }

        function Ro(e) {
            var t = {};
            var i = "," + "autoplay,controls,playsinline,loop,muted,default,defaultMuted" + ",";
            if (e && e.attributes && e.attributes.length > 0) {
                var r = e.attributes;
                for (var n = r.length - 1; n >= 0; n--) {
                    var a = r[n].name;
                    var s = r[n].value;
                    if (typeof e[a] === "boolean" || i.indexOf("," + a + ",") !== -1) {
                        s = s !== null ? true : false
                    }
                    t[a] = s
                }
            }
            return t
        }

        function Mo(e, t) {
            return e.getAttribute(t)
        }

        function Uo(e, t, i) {
            e.setAttribute(t, i)
        }

        function Bo(e, t) {
            e.removeAttribute(t)
        }

        function Fo() {
            W.body.focus();
            W.onselectstart = function() {
                return false
            }
        }

        function jo() {
            W.onselectstart = function() {
                return true
            }
        }

        function Ho(e) {
            if (e && e.getBoundingClientRect && e.parentNode) {
                var t = e.getBoundingClientRect();
                var i = {};
                ["bottom", "height", "left", "right", "top", "width"].forEach((function(e) {
                    if (t[e] !== undefined) {
                        i[e] = t[e]
                    }
                }));
                if (!i.height) {
                    i.height = parseFloat(Qs(e, "height"))
                }
                if (!i.width) {
                    i.width = parseFloat(Qs(e, "width"))
                }
                return i
            }
        }

        function qo(e) {
            if (!e || e && !e.offsetParent) {
                return {
                    left: 0,
                    top: 0,
                    width: 0,
                    height: 0
                }
            }
            var t = e.offsetWidth;
            var i = e.offsetHeight;
            var r = 0;
            var n = 0;
            while (e.offsetParent && e !== W[Ls.fullscreenElement]) {
                r += e.offsetLeft;
                n += e.offsetTop;
                e = e.offsetParent
            }
            return {
                left: r,
                top: n,
                width: t,
                height: i
            }
        }

        function Vo(e, t) {
            var i = {
                x: 0,
                y: 0
            };
            if (go) {
                var r = e;
                while (r && r.nodeName.toLowerCase() !== "html") {
                    var n = Qs(r, "transform");
                    if (/^matrix/.test(n)) {
                        var a = n.slice(7, -1).split(/,\s/).map(Number);
                        i.x += a[4];
                        i.y += a[5]
                    } else if (/^matrix3d/.test(n)) {
                        var s = n.slice(9, -1).split(/,\s/).map(Number);
                        i.x += s[12];
                        i.y += s[13]
                    }
                    r = r.parentNode
                }
            }
            var o = {};
            var u = qo(t.target);
            var l = qo(e);
            var c = l.width;
            var f = l.height;
            var d = t.offsetY - (l.top - u.top);
            var h = t.offsetX - (l.left - u.left);
            if (t.changedTouches) {
                h = t.changedTouches[0].pageX - l.left;
                d = t.changedTouches[0].pageY + l.top;
                if (go) {
                    h -= i.x;
                    d -= i.y
                }
            }
            o.y = 1 - Math.max(0, Math.min(1, d / f));
            o.x = Math.max(0, Math.min(1, h / c));
            return o
        }

        function Wo(e) {
            return Ys(e) && e.nodeType === 3
        }

        function Go(e) {
            while (e.firstChild) {
                e.removeChild(e.firstChild)
            }
            return e
        }

        function Xo(e) {
            if (typeof e === "function") {
                e = e()
            }
            return (Array.isArray(e) ? e : [e]).map((function(e) {
                if (typeof e === "function") {
                    e = e()
                }
                if (wo(e) || Wo(e)) {
                    return e
                }
                if (typeof e === "string" && /\S/.test(e)) {
                    return W.createTextNode(e)
                }
            })).filter((function(e) {
                return e
            }))
        }

        function zo(e, t) {
            Xo(t).forEach((function(t) {
                return e.appendChild(t)
            }));
            return e
        }

        function Ko(e, t) {
            return zo(Go(e), t)
        }

        function Yo(e) {
            if (e.button === undefined && e.buttons === undefined) {
                return true
            }
            if (e.button === 0 && e.buttons === undefined) {
                return true
            }
            if (e.type === "mouseup" && e.button === 0 && e.buttons === 0) {
                return true
            }
            if (e.button !== 0 || e.buttons !== 1) {
                return false
            }
            return true
        }
        var $o = Co("querySelector");
        var Qo = Co("querySelectorAll");
        var Jo = Object.freeze({
            __proto__: null,
            isReal: Eo,
            isEl: wo,
            isInFrame: ko,
            createEl: Io,
            textContent: Ao,
            prependTo: xo,
            hasClass: Po,
            addClass: Oo,
            removeClass: Do,
            toggleClass: Lo,
            setAttributes: No,
            getAttributes: Ro,
            getAttribute: Mo,
            setAttribute: Uo,
            removeAttribute: Bo,
            blockTextSelection: Fo,
            unblockTextSelection: jo,
            getBoundingClientRect: Ho,
            findPosition: qo,
            getPointerPosition: Vo,
            isTextNode: Wo,
            emptyEl: Go,
            normalizeContent: Xo,
            appendContent: zo,
            insertContent: Ko,
            isSingleLeftClick: Yo,
            $: $o,
            $$: Qo
        });
        var Zo = false;
        var eu;
        var tu = function e() {
            if (eu.options.autoSetup === false) {
                return
            }
            var t = Array.prototype.slice.call(W.getElementsByTagName("video"));
            var i = Array.prototype.slice.call(W.getElementsByTagName("audio"));
            var r = Array.prototype.slice.call(W.getElementsByTagName("video-js"));
            var n = t.concat(i, r);
            if (n && n.length > 0) {
                for (var a = 0, s = n.length; a < s; a++) {
                    var o = n[a];
                    if (o && o.getAttribute) {
                        if (o.player === undefined) {
                            var u = o.getAttribute("data-setup");
                            if (u !== null) {
                                eu(o)
                            }
                        }
                    } else {
                        iu(1);
                        break
                    }
                }
            } else if (!Zo) {
                iu(1)
            }
        };

        function iu(e, t) {
            if (!Eo()) {
                return
            }
            if (t) {
                eu = t
            }
            s.setTimeout(tu, e)
        }

        function ru() {
            Zo = true;
            s.removeEventListener("load", ru)
        }
        if (Eo()) {
            if (W.readyState === "complete") {
                ru()
            } else {
                s.addEventListener("load", ru)
            }
        }
        var nu = function e(t) {
            var i = W.createElement("style");
            i.className = t;
            return i
        };
        var au = function e(t, i) {
            if (t.styleSheet) {
                t.styleSheet.cssText = i
            } else {
                t.textContent = i
            }
        };
        var su = 3;
        var ou = su;

        function uu() {
            return ou++
        }
        var lu;
        if (!s.WeakMap) {
            lu = function() {
                function e() {
                    this.vdata = "vdata" + Math.floor(s.performance && s.performance.now() || Date.now());
                    this.data = {}
                }
                var t = e.prototype;
                t.set = function e(t, i) {
                    var r = t[this.vdata] || uu();
                    if (!t[this.vdata]) {
                        t[this.vdata] = r
                    }
                    this.data[r] = i;
                    return this
                };
                t.get = function e(t) {
                    var i = t[this.vdata];
                    if (i) {
                        return this.data[i]
                    }
                    qs("We have no data for this element", t);
                    return undefined
                };
                t.has = function e(t) {
                    var i = t[this.vdata];
                    return i in this.data
                };
                t["delete"] = function e(t) {
                    var i = t[this.vdata];
                    if (i) {
                        delete this.data[i];
                        delete t[this.vdata]
                    }
                };
                return e
            }()
        }
        var cu = s.WeakMap ? new WeakMap : new lu;

        function fu(e, t) {
            if (!cu.has(e)) {
                return
            }
            var i = cu.get(e);
            if (i.handlers[t].length === 0) {
                delete i.handlers[t];
                if (e.removeEventListener) {
                    e.removeEventListener(t, i.dispatcher, false)
                } else if (e.detachEvent) {
                    e.detachEvent("on" + t, i.dispatcher)
                }
            }
            if (Object.getOwnPropertyNames(i.handlers).length <= 0) {
                delete i.handlers;
                delete i.dispatcher;
                delete i.disabled
            }
            if (Object.getOwnPropertyNames(i).length === 0) {
                cu["delete"](e)
            }
        }

        function du(e, t, i, r) {
            i.forEach((function(i) {
                e(t, i, r)
            }))
        }

        function hu(e) {
            if (e.fixed_) {
                return e
            }

            function t() {
                return true
            }

            function i() {
                return false
            }
            if (!e || !e.isPropagationStopped || !e.isImmediatePropagationStopped) {
                var r = e || s.event;
                e = {};
                for (var n in r) {
                    if (n !== "layerX" && n !== "layerY" && n !== "keyLocation" && n !== "webkitMovementX" && n !== "webkitMovementY" && n !== "path") {
                        if (!(n === "returnValue" && r.preventDefault)) {
                            e[n] = r[n]
                        }
                    }
                }
                if (!e.target) {
                    e.target = e.srcElement || W
                }
                if (!e.relatedTarget) {
                    e.relatedTarget = e.fromElement === e.target ? e.toElement : e.fromElement
                }
                e.preventDefault = function() {
                    if (r.preventDefault) {
                        r.preventDefault()
                    }
                    e.returnValue = false;
                    r.returnValue = false;
                    e.defaultPrevented = true
                };
                e.defaultPrevented = false;
                e.stopPropagation = function() {
                    if (r.stopPropagation) {
                        r.stopPropagation()
                    }
                    e.cancelBubble = true;
                    r.cancelBubble = true;
                    e.isPropagationStopped = t
                };
                e.isPropagationStopped = i;
                e.stopImmediatePropagation = function() {
                    if (r.stopImmediatePropagation) {
                        r.stopImmediatePropagation()
                    }
                    e.isImmediatePropagationStopped = t;
                    e.stopPropagation()
                };
                e.isImmediatePropagationStopped = i;
                if (e.clientX !== null && e.clientX !== undefined) {
                    var a = W.documentElement;
                    var o = W.body;
                    e.pageX = e.clientX + (a && a.scrollLeft || o && o.scrollLeft || 0) - (a && a.clientLeft || o && o.clientLeft || 0);
                    e.pageY = e.clientY + (a && a.scrollTop || o && o.scrollTop || 0) - (a && a.clientTop || o && o.clientTop || 0)
                }
                e.which = e.charCode || e.keyCode;
                if (e.button !== null && e.button !== undefined) {
                    e.button = e.button & 1 ? 0 : e.button & 4 ? 1 : e.button & 2 ? 2 : 0
                }
            }
            e.fixed_ = true;
            return e
        }
        var pu;
        var mu = function e() {
            if (typeof pu !== "boolean") {
                pu = false;
                try {
                    var t = Object.defineProperty({}, "passive", {
                        get: function e() {
                            pu = true
                        }
                    });
                    s.addEventListener("test", null, t);
                    s.removeEventListener("test", null, t)
                } catch (e) {}
            }
            return pu
        };
        var vu = ["touchstart", "touchmove"];

        function gu(e, t, i) {
            if (Array.isArray(t)) {
                return du(gu, e, t, i)
            }
            if (!cu.has(e)) {
                cu.set(e, {})
            }
            var r = cu.get(e);
            if (!r.handlers) {
                r.handlers = {}
            }
            if (!r.handlers[t]) {
                r.handlers[t] = []
            }
            if (!i.guid) {
                i.guid = uu()
            }
            r.handlers[t].push(i);
            if (!r.dispatcher) {
                r.disabled = false;
                r.dispatcher = function(t, i) {
                    if (r.disabled) {
                        return
                    }
                    t = hu(t);
                    var n = r.handlers[t.type];
                    if (n) {
                        var a = n.slice(0);
                        for (var s = 0, o = a.length; s < o; s++) {
                            if (t.isImmediatePropagationStopped()) {
                                break
                            } else {
                                try {
                                    a[s].call(e, t, i)
                                } catch (e) {
                                    qs.error(e)
                                }
                            }
                        }
                    }
                }
            }
            if (r.handlers[t].length === 1) {
                if (e.addEventListener) {
                    var n = false;
                    if (mu() && vu.indexOf(t) > -1) {
                        n = {
                            passive: true
                        }
                    }
                    e.addEventListener(t, r.dispatcher, n)
                } else if (e.attachEvent) {
                    e.attachEvent("on" + t, r.dispatcher)
                }
            }
        }

        function yu(e, t, i) {
            if (!cu.has(e)) {
                return
            }
            var r = cu.get(e);
            if (!r.handlers) {
                return
            }
            if (Array.isArray(t)) {
                return du(yu, e, t, i)
            }
            var n = function e(t, i) {
                r.handlers[i] = [];
                fu(t, i)
            };
            if (t === undefined) {
                for (var a in r.handlers) {
                    if (Object.prototype.hasOwnProperty.call(r.handlers || {}, a)) {
                        n(e, a)
                    }
                }
                return
            }
            var s = r.handlers[t];
            if (!s) {
                return
            }
            if (!i) {
                n(e, t);
                return
            }
            if (i.guid) {
                for (var o = 0; o < s.length; o++) {
                    if (s[o].guid === i.guid) {
                        s.splice(o--, 1)
                    }
                }
            }
            fu(e, t)
        }

        function _u(e, t, i) {
            var r = cu.has(e) ? cu.get(e) : {};
            var n = e.parentNode || e.ownerDocument;
            if (typeof t === "string") {
                t = {
                    type: t,
                    target: e
                }
            } else if (!t.target) {
                t.target = e
            }
            t = hu(t);
            if (r.dispatcher) {
                r.dispatcher.call(e, t, i)
            }
            if (n && !t.isPropagationStopped() && t.bubbles === true) {
                _u.call(null, n, t, i)
            } else if (!n && !t.defaultPrevented && t.target && t.target[t.type]) {
                if (!cu.has(t.target)) {
                    cu.set(t.target, {})
                }
                var a = cu.get(t.target);
                if (t.target[t.type]) {
                    a.disabled = true;
                    if (typeof t.target[t.type] === "function") {
                        t.target[t.type]()
                    }
                    a.disabled = false
                }
            }
            return !t.defaultPrevented
        }

        function bu(e, t, i) {
            if (Array.isArray(t)) {
                return du(bu, e, t, i)
            }
            var r = function r() {
                yu(e, t, r);
                i.apply(this, arguments)
            };
            r.guid = i.guid = i.guid || uu();
            gu(e, t, r)
        }

        function Tu(e, t, i) {
            var r = function r() {
                yu(e, t, r);
                i.apply(this, arguments)
            };
            r.guid = i.guid = i.guid || uu();
            gu(e, t, r)
        }
        var Su = Object.freeze({
            __proto__: null,
            fixEvent: hu,
            on: gu,
            off: yu,
            trigger: _u,
            one: bu,
            any: Tu
        });
        var Eu = 30;
        var wu = function e(t, i, r) {
            if (!i.guid) {
                i.guid = uu()
            }
            var n = i.bind(t);
            n.guid = r ? r + "_" + i.guid : i.guid;
            return n
        };
        var ku = function e(t, i) {
            var r = s.performance.now();
            var n = function e() {
                var n = s.performance.now();
                if (n - r >= i) {
                    t.apply(void 0, arguments);
                    r = n
                }
            };
            return n
        };
        var Cu = function e(t, i, r, n) {
            if (n === void 0) {
                n = s
            }
            var a;
            var o = function e() {
                n.clearTimeout(a);
                a = null
            };
            var u = function e() {
                var s = this;
                var o = arguments;
                var u = function e() {
                    a = null;
                    u = null;
                    if (!r) {
                        t.apply(s, o)
                    }
                };
                if (!a && r) {
                    t.apply(s, o)
                }
                n.clearTimeout(a);
                a = n.setTimeout(u, i)
            };
            u.cancel = o;
            return u
        };
        var Iu = function e() {};
        Iu.prototype.allowedEvents_ = {};
        Iu.prototype.on = function(e, t) {
            var i = this.addEventListener;
            this.addEventListener = function() {};
            gu(this, e, t);
            this.addEventListener = i
        };
        Iu.prototype.addEventListener = Iu.prototype.on;
        Iu.prototype.off = function(e, t) {
            yu(this, e, t)
        };
        Iu.prototype.removeEventListener = Iu.prototype.off;
        Iu.prototype.one = function(e, t) {
            var i = this.addEventListener;
            this.addEventListener = function() {};
            bu(this, e, t);
            this.addEventListener = i
        };
        Iu.prototype.any = function(e, t) {
            var i = this.addEventListener;
            this.addEventListener = function() {};
            Tu(this, e, t);
            this.addEventListener = i
        };
        Iu.prototype.trigger = function(e) {
            var t = e.type || e;
            if (typeof e === "string") {
                e = {
                    type: t
                }
            }
            e = hu(e);
            if (this.allowedEvents_[t] && this["on" + t]) {
                this["on" + t](e)
            }
            _u(this, e)
        };
        Iu.prototype.dispatchEvent = Iu.prototype.trigger;
        var Au;
        Iu.prototype.queueTrigger = function(e) {
            var t = this;
            if (!Au) {
                Au = new Map
            }
            var i = e.type || e;
            var r = Au.get(this);
            if (!r) {
                r = new Map;
                Au.set(this, r)
            }
            var n = r.get(i);
            r["delete"](i);
            s.clearTimeout(n);
            var a = s.setTimeout((function() {
                if (r.size === 0) {
                    r = null;
                    Au["delete"](t)
                }
                t.trigger(e)
            }), 0);
            r.set(i, a)
        };
        var xu = function e(t) {
            if (typeof t.name === "function") {
                return t.name()
            }
            if (typeof t.name === "string") {
                return t.name
            }
            if (t.name_) {
                return t.name_
            }
            if (t.constructor && t.constructor.name) {
                return t.constructor.name
            }
            return typeof t
        };
        var Pu = function e(t) {
            return t instanceof Iu || !!t.eventBusEl_ && ["on", "one", "off", "trigger"].every((function(e) {
                return typeof t[e] === "function"
            }))
        };
        var Ou = function e(t, i) {
            if (Pu(t)) {
                i()
            } else {
                if (!t.eventedCallbacks) {
                    t.eventedCallbacks = []
                }
                t.eventedCallbacks.push(i)
            }
        };
        var Du = function e(t) {
            return typeof t === "string" && /\S/.test(t) || Array.isArray(t) && !!t.length
        };
        var Lu = function e(t, i, r) {
            if (!t || !t.nodeName && !Pu(t)) {
                throw new Error("Invalid target for " + xu(i) + "#" + r + "; must be a DOM node or evented object.")
            }
        };
        var Nu = function e(t, i, r) {
            if (!Du(t)) {
                throw new Error("Invalid event type for " + xu(i) + "#" + r + "; must be a non-empty string or array.")
            }
        };
        var Ru = function e(t, i, r) {
            if (typeof t !== "function") {
                throw new Error("Invalid listener for " + xu(i) + "#" + r + "; must be a function.")
            }
        };
        var Mu = function e(t, i, r) {
            var n = i.length < 3 || i[0] === t || i[0] === t.eventBusEl_;
            var a;
            var s;
            var o;
            if (n) {
                a = t.eventBusEl_;
                if (i.length >= 3) {
                    i.shift()
                }
                s = i[0];
                o = i[1]
            } else {
                a = i[0];
                s = i[1];
                o = i[2]
            }
            Lu(a, t, r);
            Nu(s, t, r);
            Ru(o, t, r);
            o = wu(t, o);
            return {
                isTargetingSelf: n,
                target: a,
                type: s,
                listener: o
            }
        };
        var Uu = function e(t, i, r, n) {
            Lu(t, t, i);
            if (t.nodeName) {
                Su[i](t, r, n)
            } else {
                t[i](r, n)
            }
        };
        var Bu = {
            on: function e() {
                var t = this;
                for (var i = arguments.length, r = new Array(i), n = 0; n < i; n++) {
                    r[n] = arguments[n]
                }
                var a = Mu(this, r, "on"),
                    s = a.isTargetingSelf,
                    o = a.target,
                    u = a.type,
                    l = a.listener;
                Uu(o, "on", u, l);
                if (!s) {
                    var c = function e() {
                        return t.off(o, u, l)
                    };
                    c.guid = l.guid;
                    var f = function e() {
                        return t.off("dispose", c)
                    };
                    f.guid = l.guid;
                    Uu(this, "on", "dispose", c);
                    Uu(o, "on", "dispose", f)
                }
            },
            one: function e() {
                var t = this;
                for (var i = arguments.length, r = new Array(i), n = 0; n < i; n++) {
                    r[n] = arguments[n]
                }
                var a = Mu(this, r, "one"),
                    s = a.isTargetingSelf,
                    o = a.target,
                    u = a.type,
                    l = a.listener;
                if (s) {
                    Uu(o, "one", u, l)
                } else {
                    var c = function e() {
                        t.off(o, u, e);
                        for (var i = arguments.length, r = new Array(i), n = 0; n < i; n++) {
                            r[n] = arguments[n]
                        }
                        l.apply(null, r)
                    };
                    c.guid = l.guid;
                    Uu(o, "one", u, c)
                }
            },
            any: function e() {
                var t = this;
                for (var i = arguments.length, r = new Array(i), n = 0; n < i; n++) {
                    r[n] = arguments[n]
                }
                var a = Mu(this, r, "any"),
                    s = a.isTargetingSelf,
                    o = a.target,
                    u = a.type,
                    l = a.listener;
                if (s) {
                    Uu(o, "any", u, l)
                } else {
                    var c = function e() {
                        t.off(o, u, e);
                        for (var i = arguments.length, r = new Array(i), n = 0; n < i; n++) {
                            r[n] = arguments[n]
                        }
                        l.apply(null, r)
                    };
                    c.guid = l.guid;
                    Uu(o, "any", u, c)
                }
            },
            off: function e(t, i, r) {
                if (!t || Du(t)) {
                    yu(this.eventBusEl_, t, i)
                } else {
                    var n = t;
                    var a = i;
                    Lu(n, this, "off");
                    Nu(a, this, "off");
                    Ru(r, this, "off");
                    r = wu(this, r);
                    this.off("dispose", r);
                    if (n.nodeName) {
                        yu(n, a, r);
                        yu(n, "dispose", r)
                    } else if (Pu(n)) {
                        n.off(a, r);
                        n.off("dispose", r)
                    }
                }
            },
            trigger: function e(t, i) {
                Lu(this.eventBusEl_, this, "trigger");
                var r = t && typeof t !== "string" ? t.type : t;
                if (!Du(r)) {
                    var n = "Invalid event type for " + xu(this) + "#trigger; " + "must be a non-empty string or object with a type key that has a non-empty value.";
                    if (t) {
                        (this.log || qs).error(n)
                    } else {
                        throw new Error(n)
                    }
                }
                return _u(this.eventBusEl_, t, i)
            }
        };

        function Fu(e, t) {
            if (t === void 0) {
                t = {}
            }
            var i = t,
                r = i.eventBusKey;
            if (r) {
                if (!e[r].nodeName) {
                    throw new Error('The eventBusKey "' + r + '" does not refer to an element.')
                }
                e.eventBusEl_ = e[r]
            } else {
                e.eventBusEl_ = Io("span", {
                    className: "vjs-event-bus"
                })
            }
            Ks(e, Bu);
            if (e.eventedCallbacks) {
                e.eventedCallbacks.forEach((function(e) {
                    e()
                }))
            }
            e.on("dispose", (function() {
                e.off();
                [e, e.el_, e.eventBusEl_].forEach((function(e) {
                    if (e && cu.has(e)) {
                        cu["delete"](e)
                    }
                }));
                s.setTimeout((function() {
                    e.eventBusEl_ = null
                }), 0)
            }));
            return e
        }
        var ju = {
            state: {},
            setState: function e(t) {
                var i = this;
                if (typeof t === "function") {
                    t = t()
                }
                var r;
                Xs(t, (function(e, t) {
                    if (i.state[t] !== e) {
                        r = r || {};
                        r[t] = {
                            from: i.state[t],
                            to: e
                        }
                    }
                    i.state[t] = e
                }));
                if (r && Pu(this)) {
                    this.trigger({
                        changes: r,
                        type: "statechanged"
                    })
                }
                return r
            }
        };

        function Hu(e, t) {
            Ks(e, ju);
            e.state = Ks({}, e.state, t);
            if (typeof e.handleStateChanged === "function" && Pu(e)) {
                e.on("statechanged", e.handleStateChanged)
            }
            return e
        }
        var qu = function e(t) {
            if (typeof t !== "string") {
                return t
            }
            return t.replace(/./, (function(e) {
                return e.toLowerCase()
            }))
        };
        var Vu = function e(t) {
            if (typeof t !== "string") {
                return t
            }
            return t.replace(/./, (function(e) {
                return e.toUpperCase()
            }))
        };
        var Wu = function e(t, i) {
            return Vu(t) === Vu(i)
        };

        function Gu() {
            var e = {};
            for (var t = arguments.length, i = new Array(t), r = 0; r < t; r++) {
                i[r] = arguments[r]
            }
            i.forEach((function(t) {
                if (!t) {
                    return
                }
                Xs(t, (function(t, i) {
                    if (!$s(t)) {
                        e[i] = t;
                        return
                    }
                    if (!$s(e[i])) {
                        e[i] = {}
                    }
                    e[i] = Gu(e[i], t)
                }))
            }));
            return e
        }
        var Xu = function() {
            function e() {
                this.map_ = {}
            }
            var t = e.prototype;
            t.has = function e(t) {
                return t in this.map_
            };
            t["delete"] = function e(t) {
                var i = this.has(t);
                delete this.map_[t];
                return i
            };
            t.set = function e(t, i) {
                this.map_[t] = i;
                return this
            };
            t.forEach = function e(t, i) {
                for (var r in this.map_) {
                    t.call(i, this.map_[r], r, this)
                }
            };
            return e
        }();
        var zu = s.Map ? s.Map : Xu;
        var Ku = function() {
            function e() {
                this.set_ = {}
            }
            var t = e.prototype;
            t.has = function e(t) {
                return t in this.set_
            };
            t["delete"] = function e(t) {
                var i = this.has(t);
                delete this.set_[t];
                return i
            };
            t.add = function e(t) {
                this.set_[t] = 1;
                return this
            };
            t.forEach = function e(t, i) {
                for (var r in this.set_) {
                    t.call(i, r, r, this)
                }
            };
            return e
        }();
        var Yu = s.Set ? s.Set : Ku;
        var $u = function() {
            function e(e, t, i) {
                var r = this;
                if (!e && this.play) {
                    this.player_ = e = this
                } else {
                    this.player_ = e
                }
                this.isDisposed_ = false;
                this.parentComponent_ = null;
                this.options_ = Gu({}, this.options_);
                t = this.options_ = Gu(this.options_, t);
                this.id_ = t.id || t.el && t.el.id;
                if (!this.id_) {
                    var n = e && e.id && e.id() || "no_player";
                    this.id_ = n + "_component_" + uu()
                }
                this.name_ = t.name || null;
                if (t.el) {
                    this.el_ = t.el
                } else if (t.createEl !== false) {
                    this.el_ = this.createEl()
                }
                if (t.className && this.el_) {
                    t.className.split(" ").forEach((function(e) {
                        return r.addClass(e)
                    }))
                }
                if (t.evented !== false) {
                    Fu(this, {
                        eventBusKey: this.el_ ? "el_" : null
                    });
                    this.handleLanguagechange = this.handleLanguagechange.bind(this);
                    this.on(this.player_, "languagechange", this.handleLanguagechange)
                }
                Hu(this, this.constructor.defaultState);
                this.children_ = [];
                this.childIndex_ = {};
                this.childNameIndex_ = {};
                this.setTimeoutIds_ = new Yu;
                this.setIntervalIds_ = new Yu;
                this.rafIds_ = new Yu;
                this.namedRafs_ = new zu;
                this.clearingTimersOnDispose_ = false;
                if (t.initChildren !== false) {
                    this.initChildren()
                }
                this.ready(i);
                if (t.reportTouchActivity !== false) {
                    this.enableTouchActivity()
                }
            }
            var t = e.prototype;
            t.dispose = function e(t) {
                if (t === void 0) {
                    t = {}
                }
                if (this.isDisposed_) {
                    return
                }
                if (this.readyQueue_) {
                    this.readyQueue_.length = 0
                }
                this.trigger({
                    type: "dispose",
                    bubbles: false
                });
                this.isDisposed_ = true;
                if (this.children_) {
                    for (var i = this.children_.length - 1; i >= 0; i--) {
                        if (this.children_[i].dispose) {
                            this.children_[i].dispose()
                        }
                    }
                }
                this.children_ = null;
                this.childIndex_ = null;
                this.childNameIndex_ = null;
                this.parentComponent_ = null;
                if (this.el_) {
                    if (this.el_.parentNode) {
                        if (t.restoreEl) {
                            this.el_.parentNode.replaceChild(t.restoreEl, this.el_)
                        } else {
                            this.el_.parentNode.removeChild(this.el_)
                        }
                    }
                    this.el_ = null
                }
                this.player_ = null
            };
            t.isDisposed = function e() {
                return Boolean(this.isDisposed_)
            };
            t.player = function e() {
                return this.player_
            };
            t.options = function e(t) {
                if (!t) {
                    return this.options_
                }
                this.options_ = Gu(this.options_, t);
                return this.options_
            };
            t.el = function e() {
                return this.el_
            };
            t.createEl = function e(t, i, r) {
                return Io(t, i, r)
            };
            t.localize = function e(t, i, r) {
                if (r === void 0) {
                    r = t
                }
                var n = this.player_.language && this.player_.language();
                var a = this.player_.languages && this.player_.languages();
                var s = a && a[n];
                var o = n && n.split("-")[0];
                var u = a && a[o];
                var l = r;
                if (s && s[t]) {
                    l = s[t]
                } else if (u && u[t]) {
                    l = u[t]
                }
                if (i) {
                    l = l.replace(/\{(\d+)\}/g, (function(e, t) {
                        var r = i[t - 1];
                        var n = r;
                        if (typeof r === "undefined") {
                            n = e
                        }
                        return n
                    }))
                }
                return l
            };
            t.handleLanguagechange = function e() {};
            t.contentEl = function e() {
                return this.contentEl_ || this.el_
            };
            t.id = function e() {
                return this.id_
            };
            t.name = function e() {
                return this.name_
            };
            t.children = function e() {
                return this.children_
            };
            t.getChildById = function e(t) {
                return this.childIndex_[t]
            };
            t.getChild = function e(t) {
                if (!t) {
                    return
                }
                return this.childNameIndex_[t]
            };
            t.getDescendant = function e() {
                for (var t = arguments.length, i = new Array(t), r = 0; r < t; r++) {
                    i[r] = arguments[r]
                }
                i = i.reduce((function(e, t) {
                    return e.concat(t)
                }), []);
                var n = this;
                for (var a = 0; a < i.length; a++) {
                    n = n.getChild(i[a]);
                    if (!n || !n.getChild) {
                        return
                    }
                }
                return n
            };
            t.addChild = function t(i, r, n) {
                if (r === void 0) {
                    r = {}
                }
                if (n === void 0) {
                    n = this.children_.length
                }
                var a;
                var s;
                if (typeof i === "string") {
                    s = Vu(i);
                    var o = r.componentClass || s;
                    r.name = s;
                    var u = e.getComponent(o);
                    if (!u) {
                        throw new Error("Component " + o + " does not exist")
                    }
                    if (typeof u !== "function") {
                        return null
                    }
                    a = new u(this.player_ || this, r)
                } else {
                    a = i
                }
                if (a.parentComponent_) {
                    a.parentComponent_.removeChild(a)
                }
                this.children_.splice(n, 0, a);
                a.parentComponent_ = this;
                if (typeof a.id === "function") {
                    this.childIndex_[a.id()] = a
                }
                s = s || a.name && Vu(a.name());
                if (s) {
                    this.childNameIndex_[s] = a;
                    this.childNameIndex_[qu(s)] = a
                }
                if (typeof a.el === "function" && a.el()) {
                    var l = null;
                    if (this.children_[n + 1]) {
                        if (this.children_[n + 1].el_) {
                            l = this.children_[n + 1].el_
                        } else if (wo(this.children_[n + 1])) {
                            l = this.children_[n + 1]
                        }
                    }
                    this.contentEl().insertBefore(a.el(), l)
                }
                return a
            };
            t.removeChild = function e(t) {
                if (typeof t === "string") {
                    t = this.getChild(t)
                }
                if (!t || !this.children_) {
                    return
                }
                var i = false;
                for (var r = this.children_.length - 1; r >= 0; r--) {
                    if (this.children_[r] === t) {
                        i = true;
                        this.children_.splice(r, 1);
                        break
                    }
                }
                if (!i) {
                    return
                }
                t.parentComponent_ = null;
                this.childIndex_[t.id()] = null;
                this.childNameIndex_[Vu(t.name())] = null;
                this.childNameIndex_[qu(t.name())] = null;
                var n = t.el();
                if (n && n.parentNode === this.contentEl()) {
                    this.contentEl().removeChild(t.el())
                }
            };
            t.initChildren = function t() {
                var i = this;
                var r = this.options_.children;
                if (r) {
                    var n = this.options_;
                    var a = function e(t) {
                        var r = t.name;
                        var a = t.opts;
                        if (n[r] !== undefined) {
                            a = n[r]
                        }
                        if (a === false) {
                            return
                        }
                        if (a === true) {
                            a = {}
                        }
                        a.playerOptions = i.options_.playerOptions;
                        var s = i.addChild(r, a);
                        if (s) {
                            i[r] = s
                        }
                    };
                    var s;
                    var o = e.getComponent("Tech");
                    if (Array.isArray(r)) {
                        s = r
                    } else {
                        s = Object.keys(r)
                    }
                    s.concat(Object.keys(this.options_).filter((function(e) {
                        return !s.some((function(t) {
                            if (typeof t === "string") {
                                return e === t
                            }
                            return e === t.name
                        }))
                    }))).map((function(e) {
                        var t;
                        var n;
                        if (typeof e === "string") {
                            t = e;
                            n = r[t] || i.options_[t] || {}
                        } else {
                            t = e.name;
                            n = e
                        }
                        return {
                            name: t,
                            opts: n
                        }
                    })).filter((function(t) {
                        var i = e.getComponent(t.opts.componentClass || Vu(t.name));
                        return i && !o.isTech(i)
                    })).forEach(a)
                }
            };
            t.buildCSSClass = function e() {
                return ""
            };
            t.ready = function e(t, i) {
                if (i === void 0) {
                    i = false
                }
                if (!t) {
                    return
                }
                if (!this.isReady_) {
                    this.readyQueue_ = this.readyQueue_ || [];
                    this.readyQueue_.push(t);
                    return
                }
                if (i) {
                    t.call(this)
                } else {
                    this.setTimeout(t, 1)
                }
            };
            t.triggerReady = function e() {
                this.isReady_ = true;
                this.setTimeout((function() {
                    var e = this.readyQueue_;
                    this.readyQueue_ = [];
                    if (e && e.length > 0) {
                        e.forEach((function(e) {
                            e.call(this)
                        }), this)
                    }
                    this.trigger("ready")
                }), 1)
            };
            t.$ = function e(t, i) {
                return $o(t, i || this.contentEl())
            };
            t.$$ = function e(t, i) {
                return Qo(t, i || this.contentEl())
            };
            t.hasClass = function e(t) {
                return Po(this.el_, t)
            };
            t.addClass = function e(t) {
                Oo(this.el_, t)
            };
            t.removeClass = function e(t) {
                Do(this.el_, t)
            };
            t.toggleClass = function e(t, i) {
                Lo(this.el_, t, i)
            };
            t.show = function e() {
                this.removeClass("vjs-hidden")
            };
            t.hide = function e() {
                this.addClass("vjs-hidden")
            };
            t.lockShowing = function e() {
                this.addClass("vjs-lock-showing")
            };
            t.unlockShowing = function e() {
                this.removeClass("vjs-lock-showing")
            };
            t.getAttribute = function e(t) {
                return Mo(this.el_, t)
            };
            t.setAttribute = function e(t, i) {
                Uo(this.el_, t, i)
            };
            t.removeAttribute = function e(t) {
                Bo(this.el_, t)
            };
            t.width = function e(t, i) {
                return this.dimension("width", t, i)
            };
            t.height = function e(t, i) {
                return this.dimension("height", t, i)
            };
            t.dimensions = function e(t, i) {
                this.width(t, true);
                this.height(i)
            };
            t.dimension = function e(t, i, r) {
                if (i !== undefined) {
                    if (i === null || i !== i) {
                        i = 0
                    }
                    if (("" + i).indexOf("%") !== -1 || ("" + i).indexOf("px") !== -1) {
                        this.el_.style[t] = i
                    } else if (i === "auto") {
                        this.el_.style[t] = ""
                    } else {
                        this.el_.style[t] = i + "px"
                    }
                    if (!r) {
                        this.trigger("componentresize")
                    }
                    return
                }
                if (!this.el_) {
                    return 0
                }
                var n = this.el_.style[t];
                var a = n.indexOf("px");
                if (a !== -1) {
                    return parseInt(n.slice(0, a), 10)
                }
                return parseInt(this.el_["offset" + Vu(t)], 10)
            };
            t.currentDimension = function e(t) {
                var i = 0;
                if (t !== "width" && t !== "height") {
                    throw new Error("currentDimension only accepts width or height value")
                }
                i = Qs(this.el_, t);
                i = parseFloat(i);
                if (i === 0 || isNaN(i)) {
                    var r = "offset" + Vu(t);
                    i = this.el_[r]
                }
                return i
            };
            t.currentDimensions = function e() {
                return {
                    width: this.currentDimension("width"),
                    height: this.currentDimension("height")
                }
            };
            t.currentWidth = function e() {
                return this.currentDimension("width")
            };
            t.currentHeight = function e() {
                return this.currentDimension("height")
            };
            t.focus = function e() {
                this.el_.focus()
            };
            t.blur = function e() {
                this.el_.blur()
            };
            t.handleKeyDown = function e(t) {
                if (this.player_) {
                    if (!z.isEventKey(t, "Tab")) {
                        t.stopPropagation()
                    }
                    this.player_.handleKeyDown(t)
                }
            };
            t.handleKeyPress = function e(t) {
                this.handleKeyDown(t)
            };
            t.emitTapEvents = function e() {
                var t = 0;
                var i = null;
                var r = 10;
                var n = 200;
                var a;
                this.on("touchstart", (function(e) {
                    if (e.touches.length === 1) {
                        i = {
                            pageX: e.touches[0].pageX,
                            pageY: e.touches[0].pageY
                        };
                        t = s.performance.now();
                        a = true
                    }
                }));
                this.on("touchmove", (function(e) {
                    if (e.touches.length > 1) {
                        a = false
                    } else if (i) {
                        var t = e.touches[0].pageX - i.pageX;
                        var n = e.touches[0].pageY - i.pageY;
                        var s = Math.sqrt(t * t + n * n);
                        if (s > r) {
                            a = false
                        }
                    }
                }));
                var o = function e() {
                    a = false
                };
                this.on("touchleave", o);
                this.on("touchcancel", o);
                this.on("touchend", (function(e) {
                    i = null;
                    if (a === true) {
                        var r = s.performance.now() - t;
                        if (r < n) {
                            e.preventDefault();
                            this.trigger("tap")
                        }
                    }
                }))
            };
            t.enableTouchActivity = function e() {
                if (!this.player() || !this.player().reportUserActivity) {
                    return
                }
                var t = wu(this.player(), this.player().reportUserActivity);
                var i;
                this.on("touchstart", (function() {
                    t();
                    this.clearInterval(i);
                    i = this.setInterval(t, 250)
                }));
                var r = function e(r) {
                    t();
                    this.clearInterval(i)
                };
                this.on("touchmove", t);
                this.on("touchend", r);
                this.on("touchcancel", r)
            };
            t.setTimeout = function e(t, i) {
                var r = this;
                var n;
                t = wu(this, t);
                this.clearTimersOnDispose_();
                n = s.setTimeout((function() {
                    if (r.setTimeoutIds_.has(n)) {
                        r.setTimeoutIds_["delete"](n)
                    }
                    t()
                }), i);
                this.setTimeoutIds_.add(n);
                return n
            };
            t.clearTimeout = function e(t) {
                if (this.setTimeoutIds_.has(t)) {
                    this.setTimeoutIds_["delete"](t);
                    s.clearTimeout(t)
                }
                return t
            };
            t.setInterval = function e(t, i) {
                t = wu(this, t);
                this.clearTimersOnDispose_();
                var r = s.setInterval(t, i);
                this.setIntervalIds_.add(r);
                return r
            };
            t.clearInterval = function e(t) {
                if (this.setIntervalIds_.has(t)) {
                    this.setIntervalIds_["delete"](t);
                    s.clearInterval(t)
                }
                return t
            };
            t.requestAnimationFrame = function e(t) {
                var i = this;
                if (!this.supportsRaf_) {
                    return this.setTimeout(t, 1e3 / 60)
                }
                this.clearTimersOnDispose_();
                var r;
                t = wu(this, t);
                r = s.requestAnimationFrame((function() {
                    if (i.rafIds_.has(r)) {
                        i.rafIds_["delete"](r)
                    }
                    t()
                }));
                this.rafIds_.add(r);
                return r
            };
            t.requestNamedAnimationFrame = function e(t, i) {
                var r = this;
                if (this.namedRafs_.has(t)) {
                    return
                }
                this.clearTimersOnDispose_();
                i = wu(this, i);
                var n = this.requestAnimationFrame((function() {
                    i();
                    if (r.namedRafs_.has(t)) {
                        r.namedRafs_["delete"](t)
                    }
                }));
                this.namedRafs_.set(t, n);
                return t
            };
            t.cancelNamedAnimationFrame = function e(t) {
                if (!this.namedRafs_.has(t)) {
                    return
                }
                this.cancelAnimationFrame(this.namedRafs_.get(t));
                this.namedRafs_["delete"](t)
            };
            t.cancelAnimationFrame = function e(t) {
                if (!this.supportsRaf_) {
                    return this.clearTimeout(t)
                }
                if (this.rafIds_.has(t)) {
                    this.rafIds_["delete"](t);
                    s.cancelAnimationFrame(t)
                }
                return t
            };
            t.clearTimersOnDispose_ = function e() {
                var t = this;
                if (this.clearingTimersOnDispose_) {
                    return
                }
                this.clearingTimersOnDispose_ = true;
                this.one("dispose", (function() {
                    [
                        ["namedRafs_", "cancelNamedAnimationFrame"],
                        ["rafIds_", "cancelAnimationFrame"],
                        ["setTimeoutIds_", "clearTimeout"],
                        ["setIntervalIds_", "clearInterval"]
                    ].forEach((function(e) {
                        var i = e[0],
                            r = e[1];
                        t[i].forEach((function(e, i) {
                            return t[r](i)
                        }))
                    }));
                    t.clearingTimersOnDispose_ = false
                }))
            };
            e.registerComponent = function t(i, r) {
                if (typeof i !== "string" || !i) {
                    throw new Error('Illegal component name, "' + i + '"; must be a non-empty string.')
                }
                var n = e.getComponent("Tech");
                var a = n && n.isTech(r);
                var s = e === r || e.prototype.isPrototypeOf(r.prototype);
                if (a || !s) {
                    var o;
                    if (a) {
                        o = "techs must be registered using Tech.registerTech()"
                    } else {
                        o = "must be a Component subclass"
                    }
                    throw new Error('Illegal component, "' + i + '"; ' + o + ".")
                }
                i = Vu(i);
                if (!e.components_) {
                    e.components_ = {}
                }
                var u = e.getComponent("Player");
                if (i === "Player" && u && u.players) {
                    var l = u.players;
                    var c = Object.keys(l);
                    if (l && c.length > 0 && c.map((function(e) {
                            return l[e]
                        })).every(Boolean)) {
                        throw new Error("Can not register Player component after player has been created.")
                    }
                }
                e.components_[i] = r;
                e.components_[qu(i)] = r;
                return r
            };
            e.getComponent = function t(i) {
                if (!i || !e.components_) {
                    return
                }
                return e.components_[i]
            };
            return e
        }();
        $u.prototype.supportsRaf_ = typeof s.requestAnimationFrame === "function" && typeof s.cancelAnimationFrame === "function";
        $u.registerComponent("Component", $u);

        function Qu(e, t, i) {
            if (typeof t !== "number" || t < 0 || t > i) {
                throw new Error("Failed to execute '" + e + "' on 'TimeRanges': The index provided (" + t + ") is non-numeric or out of bounds (0-" + i + ").")
            }
        }

        function Ju(e, t, i, r) {
            Qu(e, r, i.length - 1);
            return i[r][t]
        }

        function Zu(e) {
            var t;
            if (e === undefined || e.length === 0) {
                t = {
                    length: 0,
                    start: function e() {
                        throw new Error("This TimeRanges object is empty")
                    },
                    end: function e() {
                        throw new Error("This TimeRanges object is empty")
                    }
                }
            } else {
                t = {
                    length: e.length,
                    start: Ju.bind(null, "start", 0, e),
                    end: Ju.bind(null, "end", 1, e)
                }
            }
            if (s.Symbol && s.Symbol.iterator) {
                t[s.Symbol.iterator] = function() {
                    return (e || []).values()
                }
            }
            return t
        }

        function el(e, t) {
            if (Array.isArray(e)) {
                return Zu(e)
            } else if (e === undefined || t === undefined) {
                return Zu()
            }
            return Zu([
                [e, t]
            ])
        }

        function tl(e, t) {
            var i = 0;
            var r;
            var n;
            if (!t) {
                return 0
            }
            if (!e || !e.length) {
                e = el(0, 0)
            }
            for (var a = 0; a < e.length; a++) {
                r = e.start(a);
                n = e.end(a);
                if (n > t) {
                    n = t
                }
                i += n - r
            }
            return i / t
        }

        function il(e) {
            if (e instanceof il) {
                return e
            }
            if (typeof e === "number") {
                this.code = e
            } else if (typeof e === "string") {
                this.message = e
            } else if (Ys(e)) {
                if (typeof e.code === "number") {
                    this.code = e.code
                }
                Ks(this, e)
            }
            if (!this.message) {
                this.message = il.defaultMessages[this.code] || ""
            }
        }
        il.prototype.code = 0;
        il.prototype.message = "";
        il.prototype.status = null;
        il.errorTypes = ["MEDIA_ERR_CUSTOM", "MEDIA_ERR_ABORTED", "MEDIA_ERR_NETWORK", "MEDIA_ERR_DECODE", "MEDIA_ERR_SRC_NOT_SUPPORTED", "MEDIA_ERR_ENCRYPTED"];
        il.defaultMessages = {
            1: "You aborted the media playback",
            2: "A network error caused the media download to fail part-way.",
            3: "The media playback was aborted due to a corruption problem or because the media used features your browser did not support.",
            4: "The media could not be loaded, either because the server or network failed or because the format is not supported.",
            5: "The media is encrypted and we do not have the keys to decrypt it."
        };
        for (var rl = 0; rl < il.errorTypes.length; rl++) {
            il[il.errorTypes[rl]] = rl;
            il.prototype[il.errorTypes[rl]] = rl
        }

        function nl(e) {
            return e !== undefined && e !== null && typeof e.then === "function"
        }

        function al(e) {
            if (nl(e)) {
                e.then(null, (function(e) {}))
            }
        }
        var sl = function e(t) {
            var i = ["kind", "label", "language", "id", "inBandMetadataTrackDispatchType", "mode", "src"].reduce((function(e, i, r) {
                if (t[i]) {
                    e[i] = t[i]
                }
                return e
            }), {
                cues: t.cues && Array.prototype.map.call(t.cues, (function(e) {
                    return {
                        startTime: e.startTime,
                        endTime: e.endTime,
                        text: e.text,
                        id: e.id
                    }
                }))
            });
            return i
        };
        var ol = function e(t) {
            var i = t.$$("track");
            var r = Array.prototype.map.call(i, (function(e) {
                return e.track
            }));
            var n = Array.prototype.map.call(i, (function(e) {
                var t = sl(e.track);
                if (e.src) {
                    t.src = e.src
                }
                return t
            }));
            return n.concat(Array.prototype.filter.call(t.textTracks(), (function(e) {
                return r.indexOf(e) === -1
            })).map(sl))
        };
        var ul = function e(t, i) {
            t.forEach((function(e) {
                var t = i.addRemoteTextTrack(e).track;
                if (!e.src && e.cues) {
                    e.cues.forEach((function(e) {
                        return t.addCue(e)
                    }))
                }
            }));
            return i.textTracks()
        };
        var ll = {
            textTracksToJson: ol,
            jsonToTextTracks: ul,
            trackToJson_: sl
        };
        var cl = "vjs-modal-dialog";
        var fl = function(e) {
            J(t, e);

            function t(t, i) {
                var r;
                r = e.call(this, t, i) || this;
                r.handleKeyDown_ = function(e) {
                    return r.handleKeyDown(e)
                };
                r.close_ = function(e) {
                    return r.close(e)
                };
                r.opened_ = r.hasBeenOpened_ = r.hasBeenFilled_ = false;
                r.closeable(!r.options_.uncloseable);
                r.content(r.options_.content);
                r.contentEl_ = Io("div", {
                    className: cl + "-content"
                }, {
                    role: "document"
                });
                r.descEl_ = Io("p", {
                    className: cl + "-description vjs-control-text",
                    id: r.el().getAttribute("aria-describedby")
                });
                Ao(r.descEl_, r.description());
                r.el_.appendChild(r.descEl_);
                r.el_.appendChild(r.contentEl_);
                return r
            }
            var i = t.prototype;
            i.createEl = function t() {
                return e.prototype.createEl.call(this, "div", {
                    className: this.buildCSSClass(),
                    tabIndex: -1
                }, {
                    "aria-describedby": this.id() + "_description",
                    "aria-hidden": "true",
                    "aria-label": this.label(),
                    role: "dialog"
                })
            };
            i.dispose = function t() {
                this.contentEl_ = null;
                this.descEl_ = null;
                this.previouslyActiveEl_ = null;
                e.prototype.dispose.call(this)
            };
            i.buildCSSClass = function t() {
                return cl + " vjs-hidden " + e.prototype.buildCSSClass.call(this)
            };
            i.label = function e() {
                return this.localize(this.options_.label || "Modal Window")
            };
            i.description = function e() {
                var t = this.options_.description || this.localize("This is a modal window.");
                if (this.closeable()) {
                    t += " " + this.localize("This modal can be closed by pressing the Escape key or activating the close button.")
                }
                return t
            };
            i.open = function e() {
                if (!this.opened_) {
                    var t = this.player();
                    this.trigger("beforemodalopen");
                    this.opened_ = true;
                    if (this.options_.fillAlways || !this.hasBeenOpened_ && !this.hasBeenFilled_) {
                        this.fill()
                    }
                    this.wasPlaying_ = !t.paused();
                    if (this.options_.pauseOnOpen && this.wasPlaying_) {
                        t.pause()
                    }
                    this.on("keydown", this.handleKeyDown_);
                    this.hadControls_ = t.controls();
                    t.controls(false);
                    this.show();
                    this.conditionalFocus_();
                    this.el().setAttribute("aria-hidden", "false");
                    this.trigger("modalopen");
                    this.hasBeenOpened_ = true
                }
            };
            i.opened = function e(t) {
                if (typeof t === "boolean") {
                    this[t ? "open" : "close"]()
                }
                return this.opened_
            };
            i.close = function e() {
                if (!this.opened_) {
                    return
                }
                var t = this.player();
                this.trigger("beforemodalclose");
                this.opened_ = false;
                if (this.wasPlaying_ && this.options_.pauseOnOpen) {
                    t.play()
                }
                this.off("keydown", this.handleKeyDown_);
                if (this.hadControls_) {
                    t.controls(true)
                }
                this.hide();
                this.el().setAttribute("aria-hidden", "true");
                this.trigger("modalclose");
                this.conditionalBlur_();
                if (this.options_.temporary) {
                    this.dispose()
                }
            };
            i.closeable = function e(t) {
                if (typeof t === "boolean") {
                    var e = this.closeable_ = !!t;
                    var i = this.getChild("closeButton");
                    if (e && !i) {
                        var r = this.contentEl_;
                        this.contentEl_ = this.el_;
                        i = this.addChild("closeButton", {
                            controlText: "Close Modal Dialog"
                        });
                        this.contentEl_ = r;
                        this.on(i, "close", this.close_)
                    }
                    if (!e && i) {
                        this.off(i, "close", this.close_);
                        this.removeChild(i);
                        i.dispose()
                    }
                }
                return this.closeable_
            };
            i.fill = function e() {
                this.fillWith(this.content())
            };
            i.fillWith = function e(t) {
                var i = this.contentEl();
                var r = i.parentNode;
                var n = i.nextSibling;
                this.trigger("beforemodalfill");
                this.hasBeenFilled_ = true;
                r.removeChild(i);
                this.empty();
                Ko(i, t);
                this.trigger("modalfill");
                if (n) {
                    r.insertBefore(i, n)
                } else {
                    r.appendChild(i)
                }
                var a = this.getChild("closeButton");
                if (a) {
                    r.appendChild(a.el_)
                }
            };
            i.empty = function e() {
                this.trigger("beforemodalempty");
                Go(this.contentEl());
                this.trigger("modalempty")
            };
            i.content = function e(t) {
                if (typeof t !== "undefined") {
                    this.content_ = t
                }
                return this.content_
            };
            i.conditionalFocus_ = function e() {
                var t = W.activeElement;
                var i = this.player_.el_;
                this.previouslyActiveEl_ = null;
                if (i.contains(t) || i === t) {
                    this.previouslyActiveEl_ = t;
                    this.focus()
                }
            };
            i.conditionalBlur_ = function e() {
                if (this.previouslyActiveEl_) {
                    this.previouslyActiveEl_.focus();
                    this.previouslyActiveEl_ = null
                }
            };
            i.handleKeyDown = function e(t) {
                t.stopPropagation();
                if (z.isEventKey(t, "Escape") && this.closeable()) {
                    t.preventDefault();
                    this.close();
                    return
                }
                if (!z.isEventKey(t, "Tab")) {
                    return
                }
                var i = this.focusableEls_();
                var r = this.el_.querySelector(":focus");
                var n;
                for (var a = 0; a < i.length; a++) {
                    if (r === i[a]) {
                        n = a;
                        break
                    }
                }
                if (W.activeElement === this.el_) {
                    n = 0
                }
                if (t.shiftKey && n === 0) {
                    i[i.length - 1].focus();
                    t.preventDefault()
                } else if (!t.shiftKey && n === i.length - 1) {
                    i[0].focus();
                    t.preventDefault()
                }
            };
            i.focusableEls_ = function e() {
                var t = this.el_.querySelectorAll("*");
                return Array.prototype.filter.call(t, (function(e) {
                    return (e instanceof s.HTMLAnchorElement || e instanceof s.HTMLAreaElement) && e.hasAttribute("href") || (e instanceof s.HTMLInputElement || e instanceof s.HTMLSelectElement || e instanceof s.HTMLTextAreaElement || e instanceof s.HTMLButtonElement) && !e.hasAttribute("disabled") || e instanceof s.HTMLIFrameElement || e instanceof s.HTMLObjectElement || e instanceof s.HTMLEmbedElement || e.hasAttribute("tabindex") && e.getAttribute("tabindex") !== -1 || e.hasAttribute("contenteditable")
                }))
            };
            return t
        }($u);
        fl.prototype.options_ = {
            pauseOnOpen: true,
            temporary: true
        };
        $u.registerComponent("ModalDialog", fl);
        var dl = function(e) {
            J(t, e);

            function t(t) {
                var i;
                if (t === void 0) {
                    t = []
                }
                i = e.call(this) || this;
                i.tracks_ = [];
                Object.defineProperty(Y(i), "length", {
                    get: function e() {
                        return this.tracks_.length
                    }
                });
                for (var r = 0; r < t.length; r++) {
                    i.addTrack(t[r])
                }
                return i
            }
            var i = t.prototype;
            i.addTrack = function e(t) {
                var i = this;
                var r = this.tracks_.length;
                if (!("" + r in this)) {
                    Object.defineProperty(this, r, {
                        get: function e() {
                            return this.tracks_[r]
                        }
                    })
                }
                if (this.tracks_.indexOf(t) === -1) {
                    this.tracks_.push(t);
                    this.trigger({
                        track: t,
                        type: "addtrack",
                        target: this
                    })
                }
                t.labelchange_ = function() {
                    i.trigger({
                        track: t,
                        type: "labelchange",
                        target: i
                    })
                };
                if (Pu(t)) {
                    t.addEventListener("labelchange", t.labelchange_)
                }
            };
            i.removeTrack = function e(t) {
                var i;
                for (var r = 0, n = this.length; r < n; r++) {
                    if (this[r] === t) {
                        i = this[r];
                        if (i.off) {
                            i.off()
                        }
                        this.tracks_.splice(r, 1);
                        break
                    }
                }
                if (!i) {
                    return
                }
                this.trigger({
                    track: i,
                    type: "removetrack",
                    target: this
                })
            };
            i.getTrackById = function e(t) {
                var i = null;
                for (var r = 0, n = this.length; r < n; r++) {
                    var a = this[r];
                    if (a.id === t) {
                        i = a;
                        break
                    }
                }
                return i
            };
            return t
        }(Iu);
        dl.prototype.allowedEvents_ = {
            change: "change",
            addtrack: "addtrack",
            removetrack: "removetrack",
            labelchange: "labelchange"
        };
        for (var hl in dl.prototype.allowedEvents_) {
            dl.prototype["on" + hl] = null
        }
        var pl = function e(t, i) {
            for (var r = 0; r < t.length; r++) {
                if (!Object.keys(t[r]).length || i.id === t[r].id) {
                    continue
                }
                t[r].enabled = false
            }
        };
        var ml = function(e) {
            J(t, e);

            function t(t) {
                var i;
                if (t === void 0) {
                    t = []
                }
                for (var r = t.length - 1; r >= 0; r--) {
                    if (t[r].enabled) {
                        pl(t, t[r]);
                        break
                    }
                }
                i = e.call(this, t) || this;
                i.changing_ = false;
                return i
            }
            var i = t.prototype;
            i.addTrack = function t(i) {
                var r = this;
                if (i.enabled) {
                    pl(this, i)
                }
                e.prototype.addTrack.call(this, i);
                if (!i.addEventListener) {
                    return
                }
                i.enabledChange_ = function() {
                    if (r.changing_) {
                        return
                    }
                    r.changing_ = true;
                    pl(r, i);
                    r.changing_ = false;
                    r.trigger("change")
                };
                i.addEventListener("enabledchange", i.enabledChange_)
            };
            i.removeTrack = function t(i) {
                e.prototype.removeTrack.call(this, i);
                if (i.removeEventListener && i.enabledChange_) {
                    i.removeEventListener("enabledchange", i.enabledChange_);
                    i.enabledChange_ = null
                }
            };
            return t
        }(dl);
        var vl = function e(t, i) {
            for (var r = 0; r < t.length; r++) {
                if (!Object.keys(t[r]).length || i.id === t[r].id) {
                    continue
                }
                t[r].selected = false
            }
        };
        var gl = function(e) {
            J(t, e);

            function t(t) {
                var i;
                if (t === void 0) {
                    t = []
                }
                for (var r = t.length - 1; r >= 0; r--) {
                    if (t[r].selected) {
                        vl(t, t[r]);
                        break
                    }
                }
                i = e.call(this, t) || this;
                i.changing_ = false;
                Object.defineProperty(Y(i), "selectedIndex", {
                    get: function e() {
                        for (var t = 0; t < this.length; t++) {
                            if (this[t].selected) {
                                return t
                            }
                        }
                        return -1
                    },
                    set: function e() {}
                });
                return i
            }
            var i = t.prototype;
            i.addTrack = function t(i) {
                var r = this;
                if (i.selected) {
                    vl(this, i)
                }
                e.prototype.addTrack.call(this, i);
                if (!i.addEventListener) {
                    return
                }
                i.selectedChange_ = function() {
                    if (r.changing_) {
                        return
                    }
                    r.changing_ = true;
                    vl(r, i);
                    r.changing_ = false;
                    r.trigger("change")
                };
                i.addEventListener("selectedchange", i.selectedChange_)
            };
            i.removeTrack = function t(i) {
                e.prototype.removeTrack.call(this, i);
                if (i.removeEventListener && i.selectedChange_) {
                    i.removeEventListener("selectedchange", i.selectedChange_);
                    i.selectedChange_ = null
                }
            };
            return t
        }(dl);
        var yl = function(e) {
            J(t, e);

            function t() {
                return e.apply(this, arguments) || this
            }
            var i = t.prototype;
            i.addTrack = function t(i) {
                var r = this;
                e.prototype.addTrack.call(this, i);
                if (!this.queueChange_) {
                    this.queueChange_ = function() {
                        return r.queueTrigger("change")
                    }
                }
                if (!this.triggerSelectedlanguagechange) {
                    this.triggerSelectedlanguagechange_ = function() {
                        return r.trigger("selectedlanguagechange")
                    }
                }
                i.addEventListener("modechange", this.queueChange_);
                var n = ["metadata", "chapters"];
                if (n.indexOf(i.kind) === -1) {
                    i.addEventListener("modechange", this.triggerSelectedlanguagechange_)
                }
            };
            i.removeTrack = function t(i) {
                e.prototype.removeTrack.call(this, i);
                if (i.removeEventListener) {
                    if (this.queueChange_) {
                        i.removeEventListener("modechange", this.queueChange_)
                    }
                    if (this.selectedlanguagechange_) {
                        i.removeEventListener("modechange", this.triggerSelectedlanguagechange_)
                    }
                }
            };
            return t
        }(dl);
        var _l = function() {
            function e(e) {
                if (e === void 0) {
                    e = []
                }
                this.trackElements_ = [];
                Object.defineProperty(this, "length", {
                    get: function e() {
                        return this.trackElements_.length
                    }
                });
                for (var t = 0, i = e.length; t < i; t++) {
                    this.addTrackElement_(e[t])
                }
            }
            var t = e.prototype;
            t.addTrackElement_ = function e(t) {
                var i = this.trackElements_.length;
                if (!("" + i in this)) {
                    Object.defineProperty(this, i, {
                        get: function e() {
                            return this.trackElements_[i]
                        }
                    })
                }
                if (this.trackElements_.indexOf(t) === -1) {
                    this.trackElements_.push(t)
                }
            };
            t.getTrackElementByTrack_ = function e(t) {
                var i;
                for (var r = 0, n = this.trackElements_.length; r < n; r++) {
                    if (t === this.trackElements_[r].track) {
                        i = this.trackElements_[r];
                        break
                    }
                }
                return i
            };
            t.removeTrackElement_ = function e(t) {
                for (var i = 0, r = this.trackElements_.length; i < r; i++) {
                    if (t === this.trackElements_[i]) {
                        if (this.trackElements_[i].track && typeof this.trackElements_[i].track.off === "function") {
                            this.trackElements_[i].track.off()
                        }
                        if (typeof this.trackElements_[i].off === "function") {
                            this.trackElements_[i].off()
                        }
                        this.trackElements_.splice(i, 1);
                        break
                    }
                }
            };
            return e
        }();
        var bl = function() {
            function e(t) {
                e.prototype.setCues_.call(this, t);
                Object.defineProperty(this, "length", {
                    get: function e() {
                        return this.length_
                    }
                })
            }
            var t = e.prototype;
            t.setCues_ = function e(t) {
                var i = this.length || 0;
                var r = 0;
                var n = t.length;
                this.cues_ = t;
                this.length_ = t.length;
                var a = function e(t) {
                    if (!("" + t in this)) {
                        Object.defineProperty(this, "" + t, {
                            get: function e() {
                                return this.cues_[t]
                            }
                        })
                    }
                };
                if (i < n) {
                    r = i;
                    for (; r < n; r++) {
                        a.call(this, r)
                    }
                }
            };
            t.getCueById = function e(t) {
                var i = null;
                for (var r = 0, n = this.length; r < n; r++) {
                    var a = this[r];
                    if (a.id === t) {
                        i = a;
                        break
                    }
                }
                return i
            };
            return e
        }();
        var Tl = {
            alternative: "alternative",
            captions: "captions",
            main: "main",
            sign: "sign",
            subtitles: "subtitles",
            commentary: "commentary"
        };
        var Sl = {
            alternative: "alternative",
            descriptions: "descriptions",
            main: "main",
            "main-desc": "main-desc",
            translation: "translation",
            commentary: "commentary"
        };
        var El = {
            subtitles: "subtitles",
            captions: "captions",
            descriptions: "descriptions",
            chapters: "chapters",
            metadata: "metadata"
        };
        var wl = {
            disabled: "disabled",
            hidden: "hidden",
            showing: "showing"
        };
        var kl = function(e) {
            J(t, e);

            function t(t) {
                var i;
                if (t === void 0) {
                    t = {}
                }
                i = e.call(this) || this;
                var r = {
                    id: t.id || "vjs_track_" + uu(),
                    kind: t.kind || "",
                    language: t.language || ""
                };
                var n = t.label || "";
                var a = function e(t) {
                    Object.defineProperty(Y(i), t, {
                        get: function e() {
                            return r[t]
                        },
                        set: function e() {}
                    })
                };
                for (var s in r) {
                    a(s)
                }
                Object.defineProperty(Y(i), "label", {
                    get: function e() {
                        return n
                    },
                    set: function e(t) {
                        if (t !== n) {
                            n = t;
                            this.trigger("labelchange")
                        }
                    }
                });
                return i
            }
            return t
        }(Iu);
        var Cl = function e(t) {
            var i = ["protocol", "hostname", "port", "pathname", "search", "hash", "host"];
            var r = W.createElement("a");
            r.href = t;
            var n = {};
            for (var a = 0; a < i.length; a++) {
                n[i[a]] = r[i[a]]
            }
            if (n.protocol === "http:") {
                n.host = n.host.replace(/:80$/, "")
            }
            if (n.protocol === "https:") {
                n.host = n.host.replace(/:443$/, "")
            }
            if (!n.protocol) {
                n.protocol = s.location.protocol
            }
            if (!n.host) {
                n.host = s.location.host
            }
            return n
        };
        var Il = function e(t) {
            if (!t.match(/^https?:\/\//)) {
                var i = W.createElement("a");
                i.href = t;
                t = i.href
            }
            return t
        };
        var Al = function e(t) {
            if (typeof t === "string") {
                var i = /^(\/?)([\s\S]*?)((?:\.{1,2}|[^\/]+?)(\.([^\.\/\?]+)))(?:[\/]*|[\?].*)$/;
                var r = i.exec(t);
                if (r) {
                    return r.pop().toLowerCase()
                }
            }
            return ""
        };
        var xl = function e(t, i) {
            if (i === void 0) {
                i = s.location
            }
            var r = Cl(t);
            var n = r.protocol === ":" ? i.protocol : r.protocol;
            var a = n + r.host !== i.protocol + i.host;
            return a
        };
        var Pl = Object.freeze({
            __proto__: null,
            parseUrl: Cl,
            getAbsoluteURL: Il,
            getFileExtension: Al,
            isCrossOrigin: xl
        });
        var Ol = function e(t, i) {
            var r = new s.WebVTT.Parser(s, s.vttjs, s.WebVTT.StringDecoder());
            var n = [];
            r.oncue = function(e) {
                i.addCue(e)
            };
            r.onparsingerror = function(e) {
                n.push(e)
            };
            r.onflush = function() {
                i.trigger({
                    type: "loadeddata",
                    target: i
                })
            };
            r.parse(t);
            if (n.length > 0) {
                if (s.console && s.console.groupCollapsed) {
                    s.console.groupCollapsed("Text Track parsing errors for " + i.src)
                }
                n.forEach((function(e) {
                    return qs.error(e)
                }));
                if (s.console && s.console.groupEnd) {
                    s.console.groupEnd()
                }
            }
            r.flush()
        };
        var Dl = function e(t, i) {
            var r = {
                uri: t
            };
            var n = xl(t);
            if (n) {
                r.cors = n
            }
            var a = i.tech_.crossOrigin() === "use-credentials";
            if (a) {
                r.withCredentials = a
            }
            ue(r, wu(this, (function(e, t, r) {
                if (e) {
                    return qs.error(e, t)
                }
                i.loaded_ = true;
                if (typeof s.WebVTT !== "function") {
                    if (i.tech_) {
                        i.tech_.any(["vttjsloaded", "vttjserror"], (function(e) {
                            if (e.type === "vttjserror") {
                                qs.error("vttjs failed to load, stopping trying to process " + i.src);
                                return
                            }
                            return Ol(r, i)
                        }))
                    }
                } else {
                    Ol(r, i)
                }
            })))
        };
        var Ll = function(e) {
            J(t, e);

            function t(t) {
                var i;
                if (t === void 0) {
                    t = {}
                }
                if (!t.tech) {
                    throw new Error("A tech was not provided.")
                }
                var r = Gu(t, {
                    kind: El[t.kind] || "subtitles",
                    language: t.language || t.srclang || ""
                });
                var n = wl[r.mode] || "disabled";
                var a = r["default"];
                if (r.kind === "metadata" || r.kind === "chapters") {
                    n = "hidden"
                }
                i = e.call(this, r) || this;
                i.tech_ = r.tech;
                i.cues_ = [];
                i.activeCues_ = [];
                i.preload_ = i.tech_.preloadTextTracks !== false;
                var s = new bl(i.cues_);
                var o = new bl(i.activeCues_);
                var u = false;
                i.timeupdateHandler = wu(Y(i), (function() {
                    if (this.tech_.isDisposed()) {
                        return
                    }
                    if (!this.tech_.isReady_) {
                        this.rvf_ = this.tech_.requestVideoFrameCallback(this.timeupdateHandler);
                        return
                    }
                    this.activeCues = this.activeCues;
                    if (u) {
                        this.trigger("cuechange");
                        u = false
                    }
                    this.rvf_ = this.tech_.requestVideoFrameCallback(this.timeupdateHandler)
                }));
                var l = function e() {
                    i.stopTracking()
                };
                i.tech_.one("dispose", l);
                if (n !== "disabled") {
                    i.startTracking()
                }
                Object.defineProperties(Y(i), {
                    default: {
                        get: function e() {
                            return a
                        },
                        set: function e() {}
                    },
                    mode: {
                        get: function e() {
                            return n
                        },
                        set: function e(t) {
                            if (!wl[t]) {
                                return
                            }
                            if (n === t) {
                                return
                            }
                            n = t;
                            if (!this.preload_ && n !== "disabled" && this.cues.length === 0) {
                                Dl(this.src, this)
                            }
                            this.stopTracking();
                            if (n !== "disabled") {
                                this.startTracking()
                            }
                            this.trigger("modechange")
                        }
                    },
                    cues: {
                        get: function e() {
                            if (!this.loaded_) {
                                return null
                            }
                            return s
                        },
                        set: function e() {}
                    },
                    activeCues: {
                        get: function e() {
                            if (!this.loaded_) {
                                return null
                            }
                            if (this.cues.length === 0) {
                                return o
                            }
                            var t = this.tech_.currentTime();
                            var i = [];
                            for (var r = 0, n = this.cues.length; r < n; r++) {
                                var a = this.cues[r];
                                if (a.startTime <= t && a.endTime >= t) {
                                    i.push(a)
                                } else if (a.startTime === a.endTime && a.startTime <= t && a.startTime + .5 >= t) {
                                    i.push(a)
                                }
                            }
                            u = false;
                            if (i.length !== this.activeCues_.length) {
                                u = true
                            } else {
                                for (var s = 0; s < i.length; s++) {
                                    if (this.activeCues_.indexOf(i[s]) === -1) {
                                        u = true
                                    }
                                }
                            }
                            this.activeCues_ = i;
                            o.setCues_(this.activeCues_);
                            return o
                        },
                        set: function e() {}
                    }
                });
                if (r.src) {
                    i.src = r.src;
                    if (!i.preload_) {
                        i.loaded_ = true
                    }
                    if (i.preload_ || r.kind !== "subtitles" && r.kind !== "captions") {
                        Dl(i.src, Y(i))
                    }
                } else {
                    i.loaded_ = true
                }
                return i
            }
            var i = t.prototype;
            i.startTracking = function e() {
                this.rvf_ = this.tech_.requestVideoFrameCallback(this.timeupdateHandler)
            };
            i.stopTracking = function e() {
                if (this.rvf_) {
                    this.tech_.cancelVideoFrameCallback(this.rvf_);
                    this.rvf_ = undefined
                }
            };
            i.addCue = function e(t) {
                var i = t;
                if (s.vttjs && !(t instanceof s.vttjs.VTTCue)) {
                    i = new s.vttjs.VTTCue(t.startTime, t.endTime, t.text);
                    for (var r in t) {
                        if (!(r in i)) {
                            i[r] = t[r]
                        }
                    }
                    i.id = t.id;
                    i.originalCue_ = t
                }
                var n = this.tech_.textTracks();
                for (var a = 0; a < n.length; a++) {
                    if (n[a] !== this) {
                        n[a].removeCue(i)
                    }
                }
                this.cues_.push(i);
                this.cues.setCues_(this.cues_)
            };
            i.removeCue = function e(t) {
                var i = this.cues_.length;
                while (i--) {
                    var r = this.cues_[i];
                    if (r === t || r.originalCue_ && r.originalCue_ === t) {
                        this.cues_.splice(i, 1);
                        this.cues.setCues_(this.cues_);
                        break
                    }
                }
            };
            return t
        }(kl);
        Ll.prototype.allowedEvents_ = {
            cuechange: "cuechange"
        };
        var Nl = function(e) {
            J(t, e);

            function t(t) {
                var i;
                if (t === void 0) {
                    t = {}
                }
                var r = Gu(t, {
                    kind: Sl[t.kind] || ""
                });
                i = e.call(this, r) || this;
                var n = false;
                Object.defineProperty(Y(i), "enabled", {
                    get: function e() {
                        return n
                    },
                    set: function e(t) {
                        if (typeof t !== "boolean" || t === n) {
                            return
                        }
                        n = t;
                        this.trigger("enabledchange")
                    }
                });
                if (r.enabled) {
                    i.enabled = r.enabled
                }
                i.loaded_ = true;
                return i
            }
            return t
        }(kl);
        var Rl = function(e) {
            J(t, e);

            function t(t) {
                var i;
                if (t === void 0) {
                    t = {}
                }
                var r = Gu(t, {
                    kind: Tl[t.kind] || ""
                });
                i = e.call(this, r) || this;
                var n = false;
                Object.defineProperty(Y(i), "selected", {
                    get: function e() {
                        return n
                    },
                    set: function e(t) {
                        if (typeof t !== "boolean" || t === n) {
                            return
                        }
                        n = t;
                        this.trigger("selectedchange")
                    }
                });
                if (r.selected) {
                    i.selected = r.selected
                }
                return i
            }
            return t
        }(kl);
        var Ml = 0;
        var Ul = 1;
        var Bl = 2;
        var Fl = 3;
        var jl = function(e) {
            J(t, e);

            function t(t) {
                var i;
                if (t === void 0) {
                    t = {}
                }
                i = e.call(this) || this;
                var r;
                var n = new Ll(t);
                i.kind = n.kind;
                i.src = n.src;
                i.srclang = n.language;
                i.label = n.label;
                i["default"] = n["default"];
                Object.defineProperties(Y(i), {
                    readyState: {
                        get: function e() {
                            return r
                        }
                    },
                    track: {
                        get: function e() {
                            return n
                        }
                    }
                });
                r = Ml;
                n.addEventListener("loadeddata", (function() {
                    r = Bl;
                    i.trigger({
                        type: "load",
                        target: Y(i)
                    })
                }));
                return i
            }
            return t
        }(Iu);
        jl.prototype.allowedEvents_ = {
            load: "load"
        };
        jl.NONE = Ml;
        jl.LOADING = Ul;
        jl.LOADED = Bl;
        jl.ERROR = Fl;
        var Hl = {
            audio: {
                ListClass: ml,
                TrackClass: Nl,
                capitalName: "Audio"
            },
            video: {
                ListClass: gl,
                TrackClass: Rl,
                capitalName: "Video"
            },
            text: {
                ListClass: yl,
                TrackClass: Ll,
                capitalName: "Text"
            }
        };
        Object.keys(Hl).forEach((function(e) {
            Hl[e].getterName = e + "Tracks";
            Hl[e].privateName = e + "Tracks_"
        }));
        var ql = {
            remoteText: {
                ListClass: yl,
                TrackClass: Ll,
                capitalName: "RemoteText",
                getterName: "remoteTextTracks",
                privateName: "remoteTextTracks_"
            },
            remoteTextEl: {
                ListClass: _l,
                TrackClass: jl,
                capitalName: "RemoteTextTrackEls",
                getterName: "remoteTextTrackEls",
                privateName: "remoteTextTrackEls_"
            }
        };
        var Vl = X({}, Hl, ql);
        ql.names = Object.keys(ql);
        Hl.names = Object.keys(Hl);
        Vl.names = [].concat(ql.names).concat(Hl.names);

        function Wl(e, t, i, r, n) {
            if (n === void 0) {
                n = {}
            }
            var a = e.textTracks();
            n.kind = t;
            if (i) {
                n.label = i
            }
            if (r) {
                n.language = r
            }
            n.tech = e;
            var s = new Vl.text.TrackClass(n);
            a.addTrack(s);
            return s
        }
        var Gl = function(e) {
            J(t, e);

            function t(t, i) {
                var r;
                if (t === void 0) {
                    t = {}
                }
                if (i === void 0) {
                    i = function e() {}
                }
                t.reportTouchActivity = false;
                r = e.call(this, null, t, i) || this;
                r.onDurationChange_ = function(e) {
                    return r.onDurationChange(e)
                };
                r.trackProgress_ = function(e) {
                    return r.trackProgress(e)
                };
                r.trackCurrentTime_ = function(e) {
                    return r.trackCurrentTime(e)
                };
                r.stopTrackingCurrentTime_ = function(e) {
                    return r.stopTrackingCurrentTime(e)
                };
                r.disposeSourceHandler_ = function(e) {
                    return r.disposeSourceHandler(e)
                };
                r.queuedHanders_ = new Set;
                r.hasStarted_ = false;
                r.on("playing", (function() {
                    this.hasStarted_ = true
                }));
                r.on("loadstart", (function() {
                    this.hasStarted_ = false
                }));
                Vl.names.forEach((function(e) {
                    var i = Vl[e];
                    if (t && t[i.getterName]) {
                        r[i.privateName] = t[i.getterName]
                    }
                }));
                if (!r.featuresProgressEvents) {
                    r.manualProgressOn()
                }
                if (!r.featuresTimeupdateEvents) {
                    r.manualTimeUpdatesOn()
                } ["Text", "Audio", "Video"].forEach((function(e) {
                    if (t["native" + e + "Tracks"] === false) {
                        r["featuresNative" + e + "Tracks"] = false
                    }
                }));
                if (t.nativeCaptions === false || t.nativeTextTracks === false) {
                    r.featuresNativeTextTracks = false
                } else if (t.nativeCaptions === true || t.nativeTextTracks === true) {
                    r.featuresNativeTextTracks = true
                }
                if (!r.featuresNativeTextTracks) {
                    r.emulateTextTracks()
                }
                r.preloadTextTracks = t.preloadTextTracks !== false;
                r.autoRemoteTextTracks_ = new Vl.text.ListClass;
                r.initTrackListeners();
                if (!t.nativeControlsForTouch) {
                    r.emitTapEvents()
                }
                if (r.constructor) {
                    r.name_ = r.constructor.name || "Unknown Tech"
                }
                return r
            }
            var i = t.prototype;
            i.triggerSourceset = function e(t) {
                var i = this;
                if (!this.isReady_) {
                    this.one("ready", (function() {
                        return i.setTimeout((function() {
                            return i.triggerSourceset(t)
                        }), 1)
                    }))
                }
                this.trigger({
                    src: t,
                    type: "sourceset"
                })
            };
            i.manualProgressOn = function e() {
                this.on("durationchange", this.onDurationChange_);
                this.manualProgress = true;
                this.one("ready", this.trackProgress_)
            };
            i.manualProgressOff = function e() {
                this.manualProgress = false;
                this.stopTrackingProgress();
                this.off("durationchange", this.onDurationChange_)
            };
            i.trackProgress = function e(t) {
                this.stopTrackingProgress();
                this.progressInterval = this.setInterval(wu(this, (function() {
                    var e = this.bufferedPercent();
                    if (this.bufferedPercent_ !== e) {
                        this.trigger("progress")
                    }
                    this.bufferedPercent_ = e;
                    if (e === 1) {
                        this.stopTrackingProgress()
                    }
                })), 500)
            };
            i.onDurationChange = function e(t) {
                this.duration_ = this.duration()
            };
            i.buffered = function e() {
                return el(0, 0)
            };
            i.bufferedPercent = function e() {
                return tl(this.buffered(), this.duration_)
            };
            i.stopTrackingProgress = function e() {
                this.clearInterval(this.progressInterval)
            };
            i.manualTimeUpdatesOn = function e() {
                this.manualTimeUpdates = true;
                this.on("play", this.trackCurrentTime_);
                this.on("pause", this.stopTrackingCurrentTime_)
            };
            i.manualTimeUpdatesOff = function e() {
                this.manualTimeUpdates = false;
                this.stopTrackingCurrentTime();
                this.off("play", this.trackCurrentTime_);
                this.off("pause", this.stopTrackingCurrentTime_)
            };
            i.trackCurrentTime = function e() {
                if (this.currentTimeInterval) {
                    this.stopTrackingCurrentTime()
                }
                this.currentTimeInterval = this.setInterval((function() {
                    this.trigger({
                        type: "timeupdate",
                        target: this,
                        manuallyTriggered: true
                    })
                }), 250)
            };
            i.stopTrackingCurrentTime = function e() {
                this.clearInterval(this.currentTimeInterval);
                this.trigger({
                    type: "timeupdate",
                    target: this,
                    manuallyTriggered: true
                })
            };
            i.dispose = function t() {
                this.clearTracks(Hl.names);
                if (this.manualProgress) {
                    this.manualProgressOff()
                }
                if (this.manualTimeUpdates) {
                    this.manualTimeUpdatesOff()
                }
                e.prototype.dispose.call(this)
            };
            i.clearTracks = function e(t) {
                var i = this;
                t = [].concat(t);
                t.forEach((function(e) {
                    var t = i[e + "Tracks"]() || [];
                    var r = t.length;
                    while (r--) {
                        var n = t[r];
                        if (e === "text") {
                            i.removeRemoteTextTrack(n)
                        }
                        t.removeTrack(n)
                    }
                }))
            };
            i.cleanupAutoTextTracks = function e() {
                var t = this.autoRemoteTextTracks_ || [];
                var i = t.length;
                while (i--) {
                    var r = t[i];
                    this.removeRemoteTextTrack(r)
                }
            };
            i.reset = function e() {};
            i.crossOrigin = function e() {};
            i.setCrossOrigin = function e() {};
            i.error = function e(t) {
                if (t !== undefined) {
                    this.error_ = new il(t);
                    this.trigger("error")
                }
                return this.error_
            };
            i.played = function e() {
                if (this.hasStarted_) {
                    return el(0, 0)
                }
                return el()
            };
            i.play = function e() {};
            i.setScrubbing = function e() {};
            i.scrubbing = function e() {};
            i.setCurrentTime = function e() {
                if (this.manualTimeUpdates) {
                    this.trigger({
                        type: "timeupdate",
                        target: this,
                        manuallyTriggered: true
                    })
                }
            };
            i.initTrackListeners = function e() {
                var t = this;
                Hl.names.forEach((function(e) {
                    var i = Hl[e];
                    var r = function i() {
                        t.trigger(e + "trackchange")
                    };
                    var n = t[i.getterName]();
                    n.addEventListener("removetrack", r);
                    n.addEventListener("addtrack", r);
                    t.on("dispose", (function() {
                        n.removeEventListener("removetrack", r);
                        n.removeEventListener("addtrack", r)
                    }))
                }))
            };
            i.addWebVttScript_ = function e() {
                var t = this;
                if (s.WebVTT) {
                    return
                }
                if (W.body.contains(this.el())) {
                    if (!this.options_["vtt.js"] && $s(et) && Object.keys(et).length > 0) {
                        this.trigger("vttjsloaded");
                        return
                    }
                    var i = W.createElement("script");
                    i.src = this.options_["vtt.js"] || "https://vjs.zencdn.net/vttjs/0.14.1/vtt.min.js";
                    i.onload = function() {
                        t.trigger("vttjsloaded")
                    };
                    i.onerror = function() {
                        t.trigger("vttjserror")
                    };
                    this.on("dispose", (function() {
                        i.onload = null;
                        i.onerror = null
                    }));
                    s.WebVTT = true;
                    this.el().parentNode.appendChild(i)
                } else {
                    this.ready(this.addWebVttScript_)
                }
            };
            i.emulateTextTracks = function e() {
                var t = this;
                var i = this.textTracks();
                var r = this.remoteTextTracks();
                var n = function e(t) {
                    return i.addTrack(t.track)
                };
                var a = function e(t) {
                    return i.removeTrack(t.track)
                };
                r.on("addtrack", n);
                r.on("removetrack", a);
                this.addWebVttScript_();
                var s = function e() {
                    return t.trigger("texttrackchange")
                };
                var o = function e() {
                    s();
                    for (var t = 0; t < i.length; t++) {
                        var r = i[t];
                        r.removeEventListener("cuechange", s);
                        if (r.mode === "showing") {
                            r.addEventListener("cuechange", s)
                        }
                    }
                };
                o();
                i.addEventListener("change", o);
                i.addEventListener("addtrack", o);
                i.addEventListener("removetrack", o);
                this.on("dispose", (function() {
                    r.off("addtrack", n);
                    r.off("removetrack", a);
                    i.removeEventListener("change", o);
                    i.removeEventListener("addtrack", o);
                    i.removeEventListener("removetrack", o);
                    for (var e = 0; e < i.length; e++) {
                        var t = i[e];
                        t.removeEventListener("cuechange", s)
                    }
                }))
            };
            i.addTextTrack = function e(t, i, r) {
                if (!t) {
                    throw new Error("TextTrack kind is required but was not provided")
                }
                return Wl(this, t, i, r)
            };
            i.createRemoteTextTrack = function e(t) {
                var i = Gu(t, {
                    tech: this
                });
                return new ql.remoteTextEl.TrackClass(i)
            };
            i.addRemoteTextTrack = function e(t, i) {
                var r = this;
                if (t === void 0) {
                    t = {}
                }
                var n = this.createRemoteTextTrack(t);
                if (i !== true && i !== false) {
                    qs.warn('Calling addRemoteTextTrack without explicitly setting the "manualCleanup" parameter to `true` is deprecated and default to `false` in future version of video.js');
                    i = true
                }
                this.remoteTextTrackEls().addTrackElement_(n);
                this.remoteTextTracks().addTrack(n.track);
                if (i !== true) {
                    this.ready((function() {
                        return r.autoRemoteTextTracks_.addTrack(n.track)
                    }))
                }
                return n
            };
            i.removeRemoteTextTrack = function e(t) {
                var i = this.remoteTextTrackEls().getTrackElementByTrack_(t);
                this.remoteTextTrackEls().removeTrackElement_(i);
                this.remoteTextTracks().removeTrack(t);
                this.autoRemoteTextTracks_.removeTrack(t)
            };
            i.getVideoPlaybackQuality = function e() {
                return {}
            };
            i.requestPictureInPicture = function e() {
                var t = this.options_.Promise || s.Promise;
                if (t) {
                    return t.reject()
                }
            };
            i.disablePictureInPicture = function e() {
                return true
            };
            i.setDisablePictureInPicture = function e() {};
            i.requestVideoFrameCallback = function e(t) {
                var i = this;
                var r = uu();
                if (this.paused()) {
                    this.queuedHanders_.add(r);
                    this.one("playing", (function() {
                        if (i.queuedHanders_.has(r)) {
                            i.queuedHanders_["delete"](r);
                            t()
                        }
                    }))
                } else {
                    this.requestNamedAnimationFrame(r, t)
                }
                return r
            };
            i.cancelVideoFrameCallback = function e(t) {
                if (this.queuedHanders_.has(t)) {
                    this.queuedHanders_["delete"](t)
                } else {
                    this.cancelNamedAnimationFrame(t)
                }
            };
            i.setPoster = function e() {};
            i.playsinline = function e() {};
            i.setPlaysinline = function e() {};
            i.overrideNativeAudioTracks = function e() {};
            i.overrideNativeVideoTracks = function e() {};
            i.canPlayType = function e() {
                return ""
            };
            t.canPlayType = function e() {
                return ""
            };
            t.canPlaySource = function e(i, r) {
                return t.canPlayType(i.type)
            };
            t.isTech = function e(i) {
                return i.prototype instanceof t || i instanceof t || i === t
            };
            t.registerTech = function e(i, r) {
                if (!t.techs_) {
                    t.techs_ = {}
                }
                if (!t.isTech(r)) {
                    throw new Error("Tech " + i + " must be a Tech")
                }
                if (!t.canPlayType) {
                    throw new Error("Techs must have a static canPlayType method on them")
                }
                if (!t.canPlaySource) {
                    throw new Error("Techs must have a static canPlaySource method on them")
                }
                i = Vu(i);
                t.techs_[i] = r;
                t.techs_[qu(i)] = r;
                if (i !== "Tech") {
                    t.defaultTechOrder_.push(i)
                }
                return r
            };
            t.getTech = function e(i) {
                if (!i) {
                    return
                }
                if (t.techs_ && t.techs_[i]) {
                    return t.techs_[i]
                }
                i = Vu(i);
                if (s && s.videojs && s.videojs[i]) {
                    qs.warn("The " + i + " tech was added to the videojs object when it should be registered using videojs.registerTech(name, tech)");
                    return s.videojs[i]
                }
            };
            return t
        }($u);
        Vl.names.forEach((function(e) {
            var t = Vl[e];
            Gl.prototype[t.getterName] = function() {
                this[t.privateName] = this[t.privateName] || new t.ListClass;
                return this[t.privateName]
            }
        }));
        Gl.prototype.featuresVolumeControl = true;
        Gl.prototype.featuresMuteControl = true;
        Gl.prototype.featuresFullscreenResize = false;
        Gl.prototype.featuresPlaybackRate = false;
        Gl.prototype.featuresProgressEvents = false;
        Gl.prototype.featuresSourceset = false;
        Gl.prototype.featuresTimeupdateEvents = false;
        Gl.prototype.featuresNativeTextTracks = false;
        Gl.prototype.featuresVideoFrameCallback = false;
        Gl.withSourceHandlers = function(e) {
            e.registerSourceHandler = function(t, i) {
                var r = e.sourceHandlers;
                if (!r) {
                    r = e.sourceHandlers = []
                }
                if (i === undefined) {
                    i = r.length
                }
                r.splice(i, 0, t)
            };
            e.canPlayType = function(t) {
                var i = e.sourceHandlers || [];
                var r;
                for (var n = 0; n < i.length; n++) {
                    r = i[n].canPlayType(t);
                    if (r) {
                        return r
                    }
                }
                return ""
            };
            e.selectSourceHandler = function(t, i) {
                var r = e.sourceHandlers || [];
                var n;
                for (var a = 0; a < r.length; a++) {
                    n = r[a].canHandleSource(t, i);
                    if (n) {
                        return r[a]
                    }
                }
                return null
            };
            e.canPlaySource = function(t, i) {
                var r = e.selectSourceHandler(t, i);
                if (r) {
                    return r.canHandleSource(t, i)
                }
                return ""
            };
            var t = ["seekable", "seeking", "duration"];
            t.forEach((function(e) {
                var t = this[e];
                if (typeof t !== "function") {
                    return
                }
                this[e] = function() {
                    if (this.sourceHandler_ && this.sourceHandler_[e]) {
                        return this.sourceHandler_[e].apply(this.sourceHandler_, arguments)
                    }
                    return t.apply(this, arguments)
                }
            }), e.prototype);
            e.prototype.setSource = function(t) {
                var i = e.selectSourceHandler(t, this.options_);
                if (!i) {
                    if (e.nativeSourceHandler) {
                        i = e.nativeSourceHandler
                    } else {
                        qs.error("No source handler found for the current source.")
                    }
                }
                this.disposeSourceHandler();
                this.off("dispose", this.disposeSourceHandler_);
                if (i !== e.nativeSourceHandler) {
                    this.currentSource_ = t
                }
                this.sourceHandler_ = i.handleSource(t, this, this.options_);
                this.one("dispose", this.disposeSourceHandler_)
            };
            e.prototype.disposeSourceHandler = function() {
                if (this.currentSource_) {
                    this.clearTracks(["audio", "video"]);
                    this.currentSource_ = null
                }
                this.cleanupAutoTextTracks();
                if (this.sourceHandler_) {
                    if (this.sourceHandler_.dispose) {
                        this.sourceHandler_.dispose()
                    }
                    this.sourceHandler_ = null
                }
            }
        };
        $u.registerComponent("Tech", Gl);
        Gl.registerTech("Tech", Gl);
        Gl.defaultTechOrder_ = [];
        var Xl = {};
        var zl = {};
        var Kl = {};

        function Yl(e, t) {
            Xl[e] = Xl[e] || [];
            Xl[e].push(t)
        }

        function $l(e, t, i) {
            e.setTimeout((function() {
                return uc(t, Xl[t.type], i, e)
            }), 1)
        }

        function Ql(e, t) {
            e.forEach((function(e) {
                return e.setTech && e.setTech(t)
            }))
        }

        function Jl(e, t, i) {
            return e.reduceRight(nc(i), t[i]())
        }

        function Zl(e, t, i, r) {
            return t[i](e.reduce(nc(i), r))
        }

        function ec(e, t, i, r) {
            if (r === void 0) {
                r = null
            }
            var n = "call" + Vu(i);
            var a = e.reduce(nc(n), r);
            var s = a === Kl;
            var o = s ? null : t[i](a);
            ac(e, i, o, s);
            return o
        }
        var tc = {
            buffered: 1,
            currentTime: 1,
            duration: 1,
            muted: 1,
            played: 1,
            paused: 1,
            seekable: 1,
            volume: 1,
            ended: 1
        };
        var ic = {
            setCurrentTime: 1,
            setMuted: 1,
            setVolume: 1
        };
        var rc = {
            play: 1,
            pause: 1
        };

        function nc(e) {
            return function(t, i) {
                if (t === Kl) {
                    return Kl
                }
                if (i[e]) {
                    return i[e](t)
                }
                return t
            }
        }

        function ac(e, t, i, r) {
            for (var n = e.length - 1; n >= 0; n--) {
                var a = e[n];
                if (a[t]) {
                    a[t](r, i)
                }
            }
        }

        function sc(e) {
            zl[e.id()] = null
        }

        function oc(e, t) {
            var i = zl[e.id()];
            var r = null;
            if (i === undefined || i === null) {
                r = t(e);
                zl[e.id()] = [
                    [t, r]
                ];
                return r
            }
            for (var n = 0; n < i.length; n++) {
                var a = i[n],
                    s = a[0],
                    o = a[1];
                if (s !== t) {
                    continue
                }
                r = o
            }
            if (r === null) {
                r = t(e);
                i.push([t, r])
            }
            return r
        }

        function uc(e, t, i, r, n, a) {
            if (e === void 0) {
                e = {}
            }
            if (t === void 0) {
                t = []
            }
            if (n === void 0) {
                n = []
            }
            if (a === void 0) {
                a = false
            }
            var s = t,
                o = s[0],
                u = s.slice(1);
            if (typeof o === "string") {
                uc(e, Xl[o], i, r, n, a)
            } else if (o) {
                var l = oc(r, o);
                if (!l.setSource) {
                    n.push(l);
                    return uc(e, u, i, r, n, a)
                }
                l.setSource(Ks({}, e), (function(t, s) {
                    if (t) {
                        return uc(e, u, i, r, n, a)
                    }
                    n.push(l);
                    uc(s, e.type === s.type ? u : Xl[s.type], i, r, n, a)
                }))
            } else if (u.length) {
                uc(e, u, i, r, n, a)
            } else if (a) {
                i(e, n)
            } else {
                uc(e, Xl["*"], i, r, n, true)
            }
        }
        var lc = {
            opus: "video/ogg",
            ogv: "video/ogg",
            mp4: "video/mp4",
            mov: "video/mp4",
            m4v: "video/mp4",
            mkv: "video/x-matroska",
            m4a: "audio/mp4",
            mp3: "audio/mpeg",
            aac: "audio/aac",
            caf: "audio/x-caf",
            flac: "audio/flac",
            oga: "audio/ogg",
            wav: "audio/wav",
            m3u8: "application/x-mpegURL",
            mpd: "application/dash+xml",
            jpg: "image/jpeg",
            jpeg: "image/jpeg",
            gif: "image/gif",
            png: "image/png",
            svg: "image/svg+xml",
            webp: "image/webp"
        };
        var cc = function e(t) {
            if (t === void 0) {
                t = ""
            }
            var i = Al(t);
            var r = lc[i.toLowerCase()];
            return r || ""
        };
        var fc = function e(t, i) {
            if (!i) {
                return ""
            }
            if (t.cache_.source.src === i && t.cache_.source.type) {
                return t.cache_.source.type
            }
            var r = t.cache_.sources.filter((function(e) {
                return e.src === i
            }));
            if (r.length) {
                return r[0].type
            }
            var n = t.$$("source");
            for (var a = 0; a < n.length; a++) {
                var s = n[a];
                if (s.type && s.src && s.src === i) {
                    return s.type
                }
            }
            return cc(i)
        };
        var dc = function e(t) {
            if (Array.isArray(t)) {
                var i = [];
                t.forEach((function(t) {
                    t = e(t);
                    if (Array.isArray(t)) {
                        i = i.concat(t)
                    } else if (Ys(t)) {
                        i.push(t)
                    }
                }));
                t = i
            } else if (typeof t === "string" && t.trim()) {
                t = [hc({
                    src: t
                })]
            } else if (Ys(t) && typeof t.src === "string" && t.src && t.src.trim()) {
                t = [hc(t)]
            } else {
                t = []
            }
            return t
        };

        function hc(e) {
            if (!e.type) {
                var t = cc(e.src);
                if (t) {
                    e.type = t
                }
            }
            return e
        }
        var pc = function(e) {
            J(t, e);

            function t(t, i, r) {
                var n;
                var a = Gu({
                    createEl: false
                }, i);
                n = e.call(this, t, a, r) || this;
                if (!i.playerOptions.sources || i.playerOptions.sources.length === 0) {
                    for (var s = 0, o = i.playerOptions.techOrder; s < o.length; s++) {
                        var u = Vu(o[s]);
                        var l = Gl.getTech(u);
                        if (!u) {
                            l = $u.getComponent(u)
                        }
                        if (l && l.isSupported()) {
                            t.loadTech_(u);
                            break
                        }
                    }
                } else {
                    t.src(i.playerOptions.sources)
                }
                return n
            }
            return t
        }($u);
        $u.registerComponent("MediaLoader", pc);
        var mc = function(e) {
            J(t, e);

            function t(t, i) {
                var r;
                r = e.call(this, t, i) || this;
                if (r.options_.controlText) {
                    r.controlText(r.options_.controlText)
                }
                r.handleMouseOver_ = function(e) {
                    return r.handleMouseOver(e)
                };
                r.handleMouseOut_ = function(e) {
                    return r.handleMouseOut(e)
                };
                r.handleClick_ = function(e) {
                    return r.handleClick(e)
                };
                r.handleKeyDown_ = function(e) {
                    return r.handleKeyDown(e)
                };
                r.emitTapEvents();
                r.enable();
                return r
            }
            var i = t.prototype;
            i.createEl = function e(t, i, r) {
                if (t === void 0) {
                    t = "div"
                }
                if (i === void 0) {
                    i = {}
                }
                if (r === void 0) {
                    r = {}
                }
                i = Ks({
                    className: this.buildCSSClass(),
                    tabIndex: 0
                }, i);
                if (t === "button") {
                    qs.error("Creating a ClickableComponent with an HTML element of " + t + " is not supported; use a Button instead.")
                }
                r = Ks({
                    role: "button"
                }, r);
                this.tabIndex_ = i.tabIndex;
                var n = Io(t, i, r);
                n.appendChild(Io("span", {
                    className: "vjs-icon-placeholder"
                }, {
                    "aria-hidden": true
                }));
                this.createControlTextEl(n);
                return n
            };
            i.dispose = function t() {
                this.controlTextEl_ = null;
                e.prototype.dispose.call(this)
            };
            i.createControlTextEl = function e(t) {
                this.controlTextEl_ = Io("span", {
                    className: "vjs-control-text"
                }, {
                    "aria-live": "polite"
                });
                if (t) {
                    t.appendChild(this.controlTextEl_)
                }
                this.controlText(this.controlText_, t);
                return this.controlTextEl_
            };
            i.controlText = function e(t, i) {
                if (i === void 0) {
                    i = this.el()
                }
                if (t === undefined) {
                    return this.controlText_ || "Need Text"
                }
                var r = this.localize(t);
                this.controlText_ = t;
                Ao(this.controlTextEl_, r);
                if (!this.nonIconControl && !this.player_.options_.noUITitleAttributes) {
                    i.setAttribute("title", r)
                }
            };
            i.buildCSSClass = function t() {
                return "vjs-control vjs-button " + e.prototype.buildCSSClass.call(this)
            };
            i.enable = function e() {
                if (!this.enabled_) {
                    this.enabled_ = true;
                    this.removeClass("vjs-disabled");
                    this.el_.setAttribute("aria-disabled", "false");
                    if (typeof this.tabIndex_ !== "undefined") {
                        this.el_.setAttribute("tabIndex", this.tabIndex_)
                    }
                    this.on(["tap", "click"], this.handleClick_);
                    this.on("keydown", this.handleKeyDown_)
                }
            };
            i.disable = function e() {
                this.enabled_ = false;
                this.addClass("vjs-disabled");
                this.el_.setAttribute("aria-disabled", "true");
                if (typeof this.tabIndex_ !== "undefined") {
                    this.el_.removeAttribute("tabIndex")
                }
                this.off("mouseover", this.handleMouseOver_);
                this.off("mouseout", this.handleMouseOut_);
                this.off(["tap", "click"], this.handleClick_);
                this.off("keydown", this.handleKeyDown_)
            };
            i.handleLanguagechange = function e() {
                this.controlText(this.controlText_)
            };
            i.handleClick = function e(t) {
                if (this.options_.clickHandler) {
                    this.options_.clickHandler.call(this, arguments)
                }
            };
            i.handleKeyDown = function t(i) {
                if (z.isEventKey(i, "Space") || z.isEventKey(i, "Enter")) {
                    i.preventDefault();
                    i.stopPropagation();
                    this.trigger("click")
                } else {
                    e.prototype.handleKeyDown.call(this, i)
                }
            };
            return t
        }($u);
        $u.registerComponent("ClickableComponent", mc);
        var vc = function(e) {
            J(t, e);

            function t(t, i) {
                var r;
                r = e.call(this, t, i) || this;
                r.update();
                r.update_ = function(e) {
                    return r.update(e)
                };
                t.on("posterchange", r.update_);
                return r
            }
            var i = t.prototype;
            i.dispose = function t() {
                this.player().off("posterchange", this.update_);
                e.prototype.dispose.call(this)
            };
            i.createEl = function e() {
                var t = Io("div", {
                    className: "vjs-poster",
                    tabIndex: -1
                });
                return t
            };
            i.update = function e(t) {
                var i = this.player().poster();
                this.setSrc(i);
                if (i) {
                    this.show()
                } else {
                    this.hide()
                }
            };
            i.setSrc = function e(t) {
                var i = "";
                if (t) {
                    i = 'url("' + t + '")'
                }
                this.el_.style.backgroundImage = i
            };
            i.handleClick = function e(t) {
                if (!this.player_.controls()) {
                    return
                }
                var i = this.player_.usingPlugin("eme") && this.player_.eme.sessions && this.player_.eme.sessions.length > 0;
                if (this.player_.tech(true) && !((co || oo) && i)) {
                    this.player_.tech(true).focus()
                }
                if (this.player_.paused()) {
                    al(this.player_.play())
                } else {
                    this.player_.pause()
                }
            };
            return t
        }(mc);
        $u.registerComponent("PosterImage", vc);
        var gc = "#222";
        var yc = "#ccc";
        var _c = {
            monospace: "monospace",
            sansSerif: "sans-serif",
            serif: "serif",
            monospaceSansSerif: '"Andale Mono", "Lucida Console", monospace',
            monospaceSerif: '"Courier New", monospace',
            proportionalSansSerif: "sans-serif",
            proportionalSerif: "serif",
            casual: '"Comic Sans MS", Impact, fantasy',
            script: '"Monotype Corsiva", cursive',
            smallcaps: '"Andale Mono", "Lucida Console", monospace, sans-serif'
        };

        function bc(e, t) {
            var i;
            if (e.length === 4) {
                i = e[1] + e[1] + e[2] + e[2] + e[3] + e[3]
            } else if (e.length === 7) {
                i = e.slice(1)
            } else {
                throw new Error("Invalid color code provided, " + e + "; must be formatted as e.g. #f0e or #f604e2.")
            }
            return "rgba(" + parseInt(i.slice(0, 2), 16) + "," + parseInt(i.slice(2, 4), 16) + "," + parseInt(i.slice(4, 6), 16) + "," + t + ")"
        }

        function Tc(e, t, i) {
            try {
                e.style[t] = i
            } catch (e) {
                return
            }
        }
        var Sc = function(e) {
            J(t, e);

            function t(t, i, r) {
                var n;
                n = e.call(this, t, i, r) || this;
                var a = function e(t) {
                    return n.updateDisplay(t)
                };
                t.on("loadstart", (function(e) {
                    return n.toggleDisplay(e)
                }));
                t.on("texttrackchange", a);
                t.on("loadedmetadata", (function(e) {
                    return n.preselectTrack(e)
                }));
                t.ready(wu(Y(n), (function() {
                    if (t.tech_ && t.tech_.featuresNativeTextTracks) {
                        this.hide();
                        return
                    }
                    t.on("fullscreenchange", a);
                    t.on("playerresize", a);
                    s.addEventListener("orientationchange", a);
                    t.on("dispose", (function() {
                        return s.removeEventListener("orientationchange", a)
                    }));
                    var e = this.options_.playerOptions.tracks || [];
                    for (var i = 0; i < e.length; i++) {
                        this.player_.addRemoteTextTrack(e[i], true)
                    }
                    this.preselectTrack()
                })));
                return n
            }
            var i = t.prototype;
            i.preselectTrack = function e() {
                var t = {
                    captions: 1,
                    subtitles: 1
                };
                var i = this.player_.textTracks();
                var r = this.player_.cache_.selectedLanguage;
                var n;
                var a;
                var s;
                for (var o = 0; o < i.length; o++) {
                    var u = i[o];
                    if (r && r.enabled && r.language && r.language === u.language && u.kind in t) {
                        if (u.kind === r.kind) {
                            s = u
                        } else if (!s) {
                            s = u
                        }
                    } else if (r && !r.enabled) {
                        s = null;
                        n = null;
                        a = null
                    } else if (u["default"]) {
                        if (u.kind === "descriptions" && !n) {
                            n = u
                        } else if (u.kind in t && !a) {
                            a = u
                        }
                    }
                }
                if (s) {
                    s.mode = "showing"
                } else if (a) {
                    a.mode = "showing"
                } else if (n) {
                    n.mode = "showing"
                }
            };
            i.toggleDisplay = function e() {
                if (this.player_.tech_ && this.player_.tech_.featuresNativeTextTracks) {
                    this.hide()
                } else {
                    this.show()
                }
            };
            i.createEl = function t() {
                return e.prototype.createEl.call(this, "div", {
                    className: "vjs-text-track-display"
                }, {
                    translate: "yes",
                    "aria-live": "off",
                    "aria-atomic": "true"
                })
            };
            i.clearDisplay = function e() {
                if (typeof s.WebVTT === "function") {
                    s.WebVTT.processCues(s, [], this.el_)
                }
            };
            i.updateDisplay = function e() {
                var t = this.player_.textTracks();
                var i = this.options_.allowMultipleShowingTracks;
                this.clearDisplay();
                if (i) {
                    var r = [];
                    for (var n = 0; n < t.length; ++n) {
                        var a = t[n];
                        if (a.mode !== "showing") {
                            continue
                        }
                        r.push(a)
                    }
                    this.updateForTrack(r);
                    return
                }
                var s = null;
                var o = null;
                var u = t.length;
                while (u--) {
                    var l = t[u];
                    if (l.mode === "showing") {
                        if (l.kind === "descriptions") {
                            s = l
                        } else {
                            o = l
                        }
                    }
                }
                if (o) {
                    if (this.getAttribute("aria-live") !== "off") {
                        this.setAttribute("aria-live", "off")
                    }
                    this.updateForTrack(o)
                } else if (s) {
                    if (this.getAttribute("aria-live") !== "assertive") {
                        this.setAttribute("aria-live", "assertive")
                    }
                    this.updateForTrack(s)
                }
            };
            i.updateDisplayState = function e(t) {
                var i = this.player_.textTrackSettings.getValues();
                var r = t.activeCues;
                var n = r.length;
                while (n--) {
                    var a = r[n];
                    if (!a) {
                        continue
                    }
                    var o = a.displayState;
                    if (i.color) {
                        o.firstChild.style.color = i.color
                    }
                    if (i.textOpacity) {
                        Tc(o.firstChild, "color", bc(i.color || "#fff", i.textOpacity))
                    }
                    if (i.backgroundColor) {
                        o.firstChild.style.backgroundColor = i.backgroundColor
                    }
                    if (i.backgroundOpacity) {
                        Tc(o.firstChild, "backgroundColor", bc(i.backgroundColor || "#000", i.backgroundOpacity))
                    }
                    if (i.windowColor) {
                        if (i.windowOpacity) {
                            Tc(o, "backgroundColor", bc(i.windowColor, i.windowOpacity))
                        } else {
                            o.style.backgroundColor = i.windowColor
                        }
                    }
                    if (i.edgeStyle) {
                        if (i.edgeStyle === "dropshadow") {
                            o.firstChild.style.textShadow = "2px 2px 3px " + gc + ", 2px 2px 4px " + gc + ", 2px 2px 5px " + gc
                        } else if (i.edgeStyle === "raised") {
                            o.firstChild.style.textShadow = "1px 1px " + gc + ", 2px 2px " + gc + ", 3px 3px " + gc
                        } else if (i.edgeStyle === "depressed") {
                            o.firstChild.style.textShadow = "1px 1px " + yc + ", 0 1px " + yc + ", -1px -1px " + gc + ", 0 -1px " + gc
                        } else if (i.edgeStyle === "uniform") {
                            o.firstChild.style.textShadow = "0 0 4px " + gc + ", 0 0 4px " + gc + ", 0 0 4px " + gc + ", 0 0 4px " + gc
                        }
                    }
                    if (i.fontPercent && i.fontPercent !== 1) {
                        var u = s.parseFloat(o.style.fontSize);
                        o.style.fontSize = u * i.fontPercent + "px";
                        o.style.height = "auto";
                        o.style.top = "auto"
                    }
                    if (i.fontFamily && i.fontFamily !== "default") {
                        if (i.fontFamily === "small-caps") {
                            o.firstChild.style.fontVariant = "small-caps"
                        } else {
                            o.firstChild.style.fontFamily = _c[i.fontFamily]
                        }
                    }
                }
            };
            i.updateForTrack = function e(t) {
                if (!Array.isArray(t)) {
                    t = [t]
                }
                if (typeof s.WebVTT !== "function" || t.every((function(e) {
                        return !e.activeCues
                    }))) {
                    return
                }
                var i = [];
                for (var r = 0; r < t.length; ++r) {
                    var n = t[r];
                    for (var a = 0; a < n.activeCues.length; ++a) {
                        i.push(n.activeCues[a])
                    }
                }
                s.WebVTT.processCues(s, i, this.el_);
                for (var o = 0; o < t.length; ++o) {
                    var u = t[o];
                    for (var l = 0; l < u.activeCues.length; ++l) {
                        var c = u.activeCues[l].displayState;
                        Oo(c, "vjs-text-track-cue");
                        Oo(c, "vjs-text-track-cue-" + (u.language ? u.language : o));
                        if (u.language) {
                            Uo(c, "lang", u.language)
                        }
                    }
                    if (this.player_.textTrackSettings) {
                        this.updateDisplayState(u)
                    }
                }
            };
            return t
        }($u);
        $u.registerComponent("TextTrackDisplay", Sc);
        var Ec = function(e) {
            J(t, e);

            function t() {
                return e.apply(this, arguments) || this
            }
            var i = t.prototype;
            i.createEl = function t() {
                var i = this.player_.isAudio();
                var r = this.localize(i ? "Audio Player" : "Video Player");
                var n = Io("span", {
                    className: "vjs-control-text",
                    textContent: this.localize("{1} is loading.", [r])
                });
                var a = e.prototype.createEl.call(this, "div", {
                    className: "vjs-loading-spinner",
                    dir: "ltr"
                });
                a.appendChild(n);
                return a
            };
            return t
        }($u);
        $u.registerComponent("LoadingSpinner", Ec);
        var wc = function(e) {
            J(t, e);

            function t() {
                return e.apply(this, arguments) || this
            }
            var i = t.prototype;
            i.createEl = function e(t, i, r) {
                if (i === void 0) {
                    i = {}
                }
                if (r === void 0) {
                    r = {}
                }
                t = "button";
                i = Ks({
                    className: this.buildCSSClass()
                }, i);
                r = Ks({
                    type: "button"
                }, r);
                var n = Io(t, i, r);
                n.appendChild(Io("span", {
                    className: "vjs-icon-placeholder"
                }, {
                    "aria-hidden": true
                }));
                this.createControlTextEl(n);
                return n
            };
            i.addChild = function e(t, i) {
                if (i === void 0) {
                    i = {}
                }
                var r = this.constructor.name;
                qs.warn("Adding an actionable (user controllable) child to a Button (" + r + ") is not supported; use a ClickableComponent instead.");
                return $u.prototype.addChild.call(this, t, i)
            };
            i.enable = function t() {
                e.prototype.enable.call(this);
                this.el_.removeAttribute("disabled")
            };
            i.disable = function t() {
                e.prototype.disable.call(this);
                this.el_.setAttribute("disabled", "disabled")
            };
            i.handleKeyDown = function t(i) {
                if (z.isEventKey(i, "Space") || z.isEventKey(i, "Enter")) {
                    i.stopPropagation();
                    return
                }
                e.prototype.handleKeyDown.call(this, i)
            };
            return t
        }(mc);
        $u.registerComponent("Button", wc);
        var kc = function(e) {
            J(t, e);

            function t(t, i) {
                var r;
                r = e.call(this, t, i) || this;
                r.mouseused_ = false;
                r.on("mousedown", (function(e) {
                    return r.handleMouseDown(e)
                }));
                return r
            }
            var i = t.prototype;
            i.buildCSSClass = function e() {
                return "vjs-big-play-button"
            };
            i.handleClick = function e(t) {
                var i = this.player_.play();
                if (this.mouseused_ && t.clientX && t.clientY) {
                    var r = this.player_.usingPlugin("eme") && this.player_.eme.sessions && this.player_.eme.sessions.length > 0;
                    al(i);
                    if (this.player_.tech(true) && !((co || oo) && r)) {
                        this.player_.tech(true).focus()
                    }
                    return
                }
                var n = this.player_.getChild("controlBar");
                var a = n && n.getChild("playToggle");
                if (!a) {
                    this.player_.tech(true).focus();
                    return
                }
                var s = function e() {
                    return a.focus()
                };
                if (nl(i)) {
                    i.then(s, (function() {}))
                } else {
                    this.setTimeout(s, 1)
                }
            };
            i.handleKeyDown = function t(i) {
                this.mouseused_ = false;
                e.prototype.handleKeyDown.call(this, i)
            };
            i.handleMouseDown = function e(t) {
                this.mouseused_ = true
            };
            return t
        }(wc);
        kc.prototype.controlText_ = "Play Video";
        $u.registerComponent("BigPlayButton", kc);
        var Cc = function(e) {
            J(t, e);

            function t(t, i) {
                var r;
                r = e.call(this, t, i) || this;
                r.controlText(i && i.controlText || r.localize("Close"));
                return r
            }
            var i = t.prototype;
            i.buildCSSClass = function t() {
                return "vjs-close-button " + e.prototype.buildCSSClass.call(this)
            };
            i.handleClick = function e(t) {
                this.trigger({
                    type: "close",
                    bubbles: false
                })
            };
            i.handleKeyDown = function t(i) {
                if (z.isEventKey(i, "Esc")) {
                    i.preventDefault();
                    i.stopPropagation();
                    this.trigger("click")
                } else {
                    e.prototype.handleKeyDown.call(this, i)
                }
            };
            return t
        }(wc);
        $u.registerComponent("CloseButton", Cc);
        var Ic = function(e) {
            J(t, e);

            function t(t, i) {
                var r;
                if (i === void 0) {
                    i = {}
                }
                r = e.call(this, t, i) || this;
                i.replay = i.replay === undefined || i.replay;
                r.on(t, "play", (function(e) {
                    return r.handlePlay(e)
                }));
                r.on(t, "pause", (function(e) {
                    return r.handlePause(e)
                }));
                if (i.replay) {
                    r.on(t, "ended", (function(e) {
                        return r.handleEnded(e)
                    }))
                }
                return r
            }
            var i = t.prototype;
            i.buildCSSClass = function t() {
                return "vjs-play-control " + e.prototype.buildCSSClass.call(this)
            };
            i.handleClick = function e(t) {
                if (this.player_.paused()) {
                    al(this.player_.play())
                } else {
                    this.player_.pause()
                }
            };
            i.handleSeeked = function e(t) {
                this.removeClass("vjs-ended");
                if (this.player_.paused()) {
                    this.handlePause(t)
                } else {
                    this.handlePlay(t)
                }
            };
            i.handlePlay = function e(t) {
                this.removeClass("vjs-ended");
                this.removeClass("vjs-paused");
                this.addClass("vjs-playing");
                this.controlText("Pause")
            };
            i.handlePause = function e(t) {
                this.removeClass("vjs-playing");
                this.addClass("vjs-paused");
                this.controlText("Play")
            };
            i.handleEnded = function e(t) {
                var i = this;
                this.removeClass("vjs-playing");
                this.addClass("vjs-ended");
                this.controlText("Replay");
                this.one(this.player_, "seeked", (function(e) {
                    return i.handleSeeked(e)
                }))
            };
            return t
        }(wc);
        Ic.prototype.controlText_ = "Play";
        $u.registerComponent("PlayToggle", Ic);
        var Ac = function e(t, i) {
            t = t < 0 ? 0 : t;
            var r = Math.floor(t % 60);
            var n = Math.floor(t / 60 % 60);
            var a = Math.floor(t / 3600);
            var s = Math.floor(i / 60 % 60);
            var o = Math.floor(i / 3600);
            if (isNaN(t) || t === Infinity) {
                a = n = r = "-"
            }
            a = a > 0 || o > 0 ? a + ":" : "";
            n = ((a || s >= 10) && n < 10 ? "0" + n : n) + ":";
            r = r < 10 ? "0" + r : r;
            return a + n + r
        };
        var xc = Ac;

        function Pc(e) {
            xc = e
        }

        function Oc() {
            xc = Ac
        }

        function Dc(e, t) {
            if (t === void 0) {
                t = e
            }
            return xc(e, t)
        }
        var Lc = function(e) {
            J(t, e);

            function t(t, i) {
                var r;
                r = e.call(this, t, i) || this;
                r.on(t, ["timeupdate", "ended"], (function(e) {
                    return r.updateContent(e)
                }));
                r.updateTextNode_();
                return r
            }
            var i = t.prototype;
            i.createEl = function t() {
                var i = this.buildCSSClass();
                var r = e.prototype.createEl.call(this, "div", {
                    className: i + " vjs-time-control vjs-control"
                });
                var n = Io("span", {
                    className: "vjs-control-text",
                    textContent: this.localize(this.labelText_) + " "
                }, {
                    role: "presentation"
                });
                r.appendChild(n);
                this.contentEl_ = Io("span", {
                    className: i + "-display"
                }, {
                    "aria-live": "off",
                    role: "presentation"
                });
                r.appendChild(this.contentEl_);
                return r
            };
            i.dispose = function t() {
                this.contentEl_ = null;
                this.textNode_ = null;
                e.prototype.dispose.call(this)
            };
            i.updateTextNode_ = function e(t) {
                var i = this;
                if (t === void 0) {
                    t = 0
                }
                t = Dc(t);
                if (this.formattedTime_ === t) {
                    return
                }
                this.formattedTime_ = t;
                this.requestNamedAnimationFrame("TimeDisplay#updateTextNode_", (function() {
                    if (!i.contentEl_) {
                        return
                    }
                    var e = i.textNode_;
                    if (e && i.contentEl_.firstChild !== e) {
                        e = null;
                        qs.warn("TimeDisplay#updateTextnode_: Prevented replacement of text node element since it was no longer a child of this node. Appending a new node instead.")
                    }
                    i.textNode_ = W.createTextNode(i.formattedTime_);
                    if (!i.textNode_) {
                        return
                    }
                    if (e) {
                        i.contentEl_.replaceChild(i.textNode_, e)
                    } else {
                        i.contentEl_.appendChild(i.textNode_)
                    }
                }))
            };
            i.updateContent = function e(t) {};
            return t
        }($u);
        Lc.prototype.labelText_ = "Time";
        Lc.prototype.controlText_ = "Time";
        $u.registerComponent("TimeDisplay", Lc);
        var Nc = function(e) {
            J(t, e);

            function t() {
                return e.apply(this, arguments) || this
            }
            var i = t.prototype;
            i.buildCSSClass = function e() {
                return "vjs-current-time"
            };
            i.updateContent = function e(t) {
                var i;
                if (this.player_.ended()) {
                    i = this.player_.duration()
                } else {
                    i = this.player_.scrubbing() ? this.player_.getCache().currentTime : this.player_.currentTime()
                }
                this.updateTextNode_(i)
            };
            return t
        }(Lc);
        Nc.prototype.labelText_ = "Current Time";
        Nc.prototype.controlText_ = "Current Time";
        $u.registerComponent("CurrentTimeDisplay", Nc);
        var Rc = function(e) {
            J(t, e);

            function t(t, i) {
                var r;
                r = e.call(this, t, i) || this;
                var n = function e(t) {
                    return r.updateContent(t)
                };
                r.on(t, "durationchange", n);
                r.on(t, "loadstart", n);
                r.on(t, "loadedmetadata", n);
                return r
            }
            var i = t.prototype;
            i.buildCSSClass = function e() {
                return "vjs-duration"
            };
            i.updateContent = function e(t) {
                var i = this.player_.duration();
                this.updateTextNode_(i)
            };
            return t
        }(Lc);
        Rc.prototype.labelText_ = "Duration";
        Rc.prototype.controlText_ = "Duration";
        $u.registerComponent("DurationDisplay", Rc);
        var Mc = function(e) {
            J(t, e);

            function t() {
                return e.apply(this, arguments) || this
            }
            var i = t.prototype;
            i.createEl = function t() {
                var i = e.prototype.createEl.call(this, "div", {
                    className: "vjs-time-control vjs-time-divider"
                }, {
                    "aria-hidden": true
                });
                var r = e.prototype.createEl.call(this, "div");
                var n = e.prototype.createEl.call(this, "span", {
                    textContent: "/"
                });
                r.appendChild(n);
                i.appendChild(r);
                return i
            };
            return t
        }($u);
        $u.registerComponent("TimeDivider", Mc);
        var Uc = function(e) {
            J(t, e);

            function t(t, i) {
                var r;
                r = e.call(this, t, i) || this;
                r.on(t, "durationchange", (function(e) {
                    return r.updateContent(e)
                }));
                return r
            }
            var i = t.prototype;
            i.buildCSSClass = function e() {
                return "vjs-remaining-time"
            };
            i.createEl = function t() {
                var i = e.prototype.createEl.call(this);
                if (this.options_.displayNegative !== false) {
                    i.insertBefore(Io("span", {}, {
                        "aria-hidden": true
                    }, "-"), this.contentEl_)
                }
                return i
            };
            i.updateContent = function e(t) {
                if (typeof this.player_.duration() !== "number") {
                    return
                }
                var i;
                if (this.player_.ended()) {
                    i = 0
                } else if (this.player_.remainingTimeDisplay) {
                    i = this.player_.remainingTimeDisplay()
                } else {
                    i = this.player_.remainingTime()
                }
                this.updateTextNode_(i)
            };
            return t
        }(Lc);
        Uc.prototype.labelText_ = "Remaining Time";
        Uc.prototype.controlText_ = "Remaining Time";
        $u.registerComponent("RemainingTimeDisplay", Uc);
        var Bc = function(e) {
            J(t, e);

            function t(t, i) {
                var r;
                r = e.call(this, t, i) || this;
                r.updateShowing();
                r.on(r.player(), "durationchange", (function(e) {
                    return r.updateShowing(e)
                }));
                return r
            }
            var i = t.prototype;
            i.createEl = function t() {
                var i = e.prototype.createEl.call(this, "div", {
                    className: "vjs-live-control vjs-control"
                });
                this.contentEl_ = Io("div", {
                    className: "vjs-live-display"
                }, {
                    "aria-live": "off"
                });
                this.contentEl_.appendChild(Io("span", {
                    className: "vjs-control-text",
                    textContent: this.localize("Stream Type") + " "
                }));
                this.contentEl_.appendChild(W.createTextNode(this.localize("LIVE")));
                i.appendChild(this.contentEl_);
                return i
            };
            i.dispose = function t() {
                this.contentEl_ = null;
                e.prototype.dispose.call(this)
            };
            i.updateShowing = function e(t) {
                if (this.player().duration() === Infinity) {
                    this.show()
                } else {
                    this.hide()
                }
            };
            return t
        }($u);
        $u.registerComponent("LiveDisplay", Bc);
        var Fc = function(e) {
            J(t, e);

            function t(t, i) {
                var r;
                r = e.call(this, t, i) || this;
                r.updateLiveEdgeStatus();
                if (r.player_.liveTracker) {
                    r.updateLiveEdgeStatusHandler_ = function(e) {
                        return r.updateLiveEdgeStatus(e)
                    };
                    r.on(r.player_.liveTracker, "liveedgechange", r.updateLiveEdgeStatusHandler_)
                }
                return r
            }
            var i = t.prototype;
            i.createEl = function t() {
                var i = e.prototype.createEl.call(this, "button", {
                    className: "vjs-seek-to-live-control vjs-control"
                });
                this.textEl_ = Io("span", {
                    className: "vjs-seek-to-live-text",
                    textContent: this.localize("LIVE")
                }, {
                    "aria-hidden": "true"
                });
                i.appendChild(this.textEl_);
                return i
            };
            i.updateLiveEdgeStatus = function e() {
                if (!this.player_.liveTracker || this.player_.liveTracker.atLiveEdge()) {
                    this.setAttribute("aria-disabled", true);
                    this.addClass("vjs-at-live-edge");
                    this.controlText("Seek to live, currently playing live")
                } else {
                    this.setAttribute("aria-disabled", false);
                    this.removeClass("vjs-at-live-edge");
                    this.controlText("Seek to live, currently behind live")
                }
            };
            i.handleClick = function e() {
                this.player_.liveTracker.seekToLiveEdge()
            };
            i.dispose = function t() {
                if (this.player_.liveTracker) {
                    this.off(this.player_.liveTracker, "liveedgechange", this.updateLiveEdgeStatusHandler_)
                }
                this.textEl_ = null;
                e.prototype.dispose.call(this)
            };
            return t
        }(wc);
        Fc.prototype.controlText_ = "Seek to live, currently playing live";
        $u.registerComponent("SeekToLive", Fc);
        var jc = function e(t, i, r) {
            t = Number(t);
            return Math.min(r, Math.max(i, isNaN(t) ? i : t))
        };
        var Hc = function(e) {
            J(t, e);

            function t(t, i) {
                var r;
                r = e.call(this, t, i) || this;
                r.handleMouseDown_ = function(e) {
                    return r.handleMouseDown(e)
                };
                r.handleMouseUp_ = function(e) {
                    return r.handleMouseUp(e)
                };
                r.handleKeyDown_ = function(e) {
                    return r.handleKeyDown(e)
                };
                r.handleClick_ = function(e) {
                    return r.handleClick(e)
                };
                r.handleMouseMove_ = function(e) {
                    return r.handleMouseMove(e)
                };
                r.update_ = function(e) {
                    return r.update(e)
                };
                r.bar = r.getChild(r.options_.barName);
                r.vertical(!!r.options_.vertical);
                r.enable();
                return r
            }
            var i = t.prototype;
            i.enabled = function e() {
                return this.enabled_
            };
            i.enable = function e() {
                if (this.enabled()) {
                    return
                }
                this.on("mousedown", this.handleMouseDown_);
                this.on("touchstart", this.handleMouseDown_);
                this.on("keydown", this.handleKeyDown_);
                this.on("click", this.handleClick_);
                this.on(this.player_, "controlsvisible", this.update);
                if (this.playerEvent) {
                    this.on(this.player_, this.playerEvent, this.update)
                }
                this.removeClass("disabled");
                this.setAttribute("tabindex", 0);
                this.enabled_ = true
            };
            i.disable = function e() {
                if (!this.enabled()) {
                    return
                }
                var t = this.bar.el_.ownerDocument;
                this.off("mousedown", this.handleMouseDown_);
                this.off("touchstart", this.handleMouseDown_);
                this.off("keydown", this.handleKeyDown_);
                this.off("click", this.handleClick_);
                this.off(this.player_, "controlsvisible", this.update_);
                this.off(t, "mousemove", this.handleMouseMove_);
                this.off(t, "mouseup", this.handleMouseUp_);
                this.off(t, "touchmove", this.handleMouseMove_);
                this.off(t, "touchend", this.handleMouseUp_);
                this.removeAttribute("tabindex");
                this.addClass("disabled");
                if (this.playerEvent) {
                    this.off(this.player_, this.playerEvent, this.update)
                }
                this.enabled_ = false
            };
            i.createEl = function t(i, r, n) {
                if (r === void 0) {
                    r = {}
                }
                if (n === void 0) {
                    n = {}
                }
                r.className = r.className + " vjs-slider";
                r = Ks({
                    tabIndex: 0
                }, r);
                n = Ks({
                    role: "slider",
                    "aria-valuenow": 0,
                    "aria-valuemin": 0,
                    "aria-valuemax": 100,
                    tabIndex: 0
                }, n);
                return e.prototype.createEl.call(this, i, r, n)
            };
            i.handleMouseDown = function e(t) {
                var i = this.bar.el_.ownerDocument;
                if (t.type === "mousedown") {
                    t.preventDefault()
                }
                if (t.type === "touchstart" && !uo) {
                    t.preventDefault()
                }
                Fo();
                this.addClass("vjs-sliding");
                this.trigger("slideractive");
                this.on(i, "mousemove", this.handleMouseMove_);
                this.on(i, "mouseup", this.handleMouseUp_);
                this.on(i, "touchmove", this.handleMouseMove_);
                this.on(i, "touchend", this.handleMouseUp_);
                this.handleMouseMove(t, true)
            };
            i.handleMouseMove = function e(t) {};
            i.handleMouseUp = function e() {
                var t = this.bar.el_.ownerDocument;
                jo();
                this.removeClass("vjs-sliding");
                this.trigger("sliderinactive");
                this.off(t, "mousemove", this.handleMouseMove_);
                this.off(t, "mouseup", this.handleMouseUp_);
                this.off(t, "touchmove", this.handleMouseMove_);
                this.off(t, "touchend", this.handleMouseUp_);
                this.update()
            };
            i.update = function e() {
                var t = this;
                if (!this.el_ || !this.bar) {
                    return
                }
                var i = this.getProgress();
                if (i === this.progress_) {
                    return i
                }
                this.progress_ = i;
                this.requestNamedAnimationFrame("Slider#update", (function() {
                    var e = t.vertical() ? "height" : "width";
                    t.bar.el().style[e] = (i * 100).toFixed(2) + "%"
                }));
                return i
            };
            i.getProgress = function e() {
                return Number(jc(this.getPercent(), 0, 1).toFixed(4))
            };
            i.calculateDistance = function e(t) {
                var i = Vo(this.el_, t);
                if (this.vertical()) {
                    return i.y
                }
                return i.x
            };
            i.handleKeyDown = function t(i) {
                if (z.isEventKey(i, "Left") || z.isEventKey(i, "Down")) {
                    i.preventDefault();
                    i.stopPropagation();
                    this.stepBack()
                } else if (z.isEventKey(i, "Right") || z.isEventKey(i, "Up")) {
                    i.preventDefault();
                    i.stopPropagation();
                    this.stepForward()
                } else {
                    e.prototype.handleKeyDown.call(this, i)
                }
            };
            i.handleClick = function e(t) {
                t.stopPropagation();
                t.preventDefault()
            };
            i.vertical = function e(t) {
                if (t === undefined) {
                    return this.vertical_ || false
                }
                this.vertical_ = !!t;
                if (this.vertical_) {
                    this.addClass("vjs-slider-vertical")
                } else {
                    this.addClass("vjs-slider-horizontal")
                }
            };
            return t
        }($u);
        $u.registerComponent("Slider", Hc);
        var qc = function e(t, i) {
            return jc(t / i * 100, 0, 100).toFixed(2) + "%"
        };
        var Vc = function(e) {
            J(t, e);

            function t(t, i) {
                var r;
                r = e.call(this, t, i) || this;
                r.partEls_ = [];
                r.on(t, "progress", (function(e) {
                    return r.update(e)
                }));
                return r
            }
            var i = t.prototype;
            i.createEl = function t() {
                var i = e.prototype.createEl.call(this, "div", {
                    className: "vjs-load-progress"
                });
                var r = Io("span", {
                    className: "vjs-control-text"
                });
                var n = Io("span", {
                    textContent: this.localize("Loaded")
                });
                var a = W.createTextNode(": ");
                this.percentageEl_ = Io("span", {
                    className: "vjs-control-text-loaded-percentage",
                    textContent: "0%"
                });
                i.appendChild(r);
                r.appendChild(n);
                r.appendChild(a);
                r.appendChild(this.percentageEl_);
                return i
            };
            i.dispose = function t() {
                this.partEls_ = null;
                this.percentageEl_ = null;
                e.prototype.dispose.call(this)
            };
            i.update = function e(t) {
                var i = this;
                this.requestNamedAnimationFrame("LoadProgressBar#update", (function() {
                    var e = i.player_.liveTracker;
                    var t = i.player_.buffered();
                    var r = e && e.isLive() ? e.seekableEnd() : i.player_.duration();
                    var n = i.player_.bufferedEnd();
                    var a = i.partEls_;
                    var s = qc(n, r);
                    if (i.percent_ !== s) {
                        i.el_.style.width = s;
                        Ao(i.percentageEl_, s);
                        i.percent_ = s
                    }
                    for (var o = 0; o < t.length; o++) {
                        var u = t.start(o);
                        var l = t.end(o);
                        var c = a[o];
                        if (!c) {
                            c = i.el_.appendChild(Io());
                            a[o] = c
                        }
                        if (c.dataset.start === u && c.dataset.end === l) {
                            continue
                        }
                        c.dataset.start = u;
                        c.dataset.end = l;
                        c.style.left = qc(u, n);
                        c.style.width = qc(l - u, n)
                    }
                    for (var f = a.length; f > t.length; f--) {
                        i.el_.removeChild(a[f - 1])
                    }
                    a.length = t.length
                }))
            };
            return t
        }($u);
        $u.registerComponent("LoadProgressBar", Vc);
        var Wc = function(e) {
            J(t, e);

            function t(t, i) {
                var r;
                r = e.call(this, t, i) || this;
                r.update = ku(wu(Y(r), r.update), Eu);
                return r
            }
            var i = t.prototype;
            i.createEl = function t() {
                return e.prototype.createEl.call(this, "div", {
                    className: "vjs-time-tooltip"
                }, {
                    "aria-hidden": "true"
                })
            };
            i.update = function e(t, i, r) {
                var n = qo(this.el_);
                var a = Ho(this.player_.el());
                var s = t.width * i;
                if (!a || !n) {
                    return
                }
                var o = t.left - a.left + s;
                var u = t.width - s + (a.right - t.right);
                var l = n.width / 2;
                if (o < l) {
                    l += l - o
                } else if (u < l) {
                    l = u
                }
                if (l < 0) {
                    l = 0
                } else if (l > n.width) {
                    l = n.width
                }
                l = Math.round(l);
                this.el_.style.right = "-" + l + "px";
                this.write(r)
            };
            i.write = function e(t) {
                Ao(this.el_, t)
            };
            i.updateTime = function e(t, i, r, n) {
                var a = this;
                this.requestNamedAnimationFrame("TimeTooltip#updateTime", (function() {
                    var e;
                    var s = a.player_.duration();
                    if (a.player_.liveTracker && a.player_.liveTracker.isLive()) {
                        var o = a.player_.liveTracker.liveWindow();
                        var u = o - i * o;
                        e = (u < 1 ? "" : "-") + Dc(u, o)
                    } else {
                        e = Dc(r, s)
                    }
                    a.update(t, i, e);
                    if (n) {
                        n()
                    }
                }))
            };
            return t
        }($u);
        $u.registerComponent("TimeTooltip", Wc);
        var Gc = function(e) {
            J(t, e);

            function t(t, i) {
                var r;
                r = e.call(this, t, i) || this;
                r.update = ku(wu(Y(r), r.update), Eu);
                return r
            }
            var i = t.prototype;
            i.createEl = function t() {
                return e.prototype.createEl.call(this, "div", {
                    className: "vjs-play-progress vjs-slider-bar"
                }, {
                    "aria-hidden": "true"
                })
            };
            i.update = function e(t, i) {
                var r = this.getChild("timeTooltip");
                if (!r) {
                    return
                }
                var n = this.player_.scrubbing() ? this.player_.getCache().currentTime : this.player_.currentTime();
                r.updateTime(t, i, n)
            };
            return t
        }($u);
        Gc.prototype.options_ = {
            children: []
        };
        if (!go && !ro) {
            Gc.prototype.options_.children.push("timeTooltip")
        }
        $u.registerComponent("PlayProgressBar", Gc);
        var Xc = function(e) {
            J(t, e);

            function t(t, i) {
                var r;
                r = e.call(this, t, i) || this;
                r.update = ku(wu(Y(r), r.update), Eu);
                return r
            }
            var i = t.prototype;
            i.createEl = function t() {
                return e.prototype.createEl.call(this, "div", {
                    className: "vjs-mouse-display"
                })
            };
            i.update = function e(t, i) {
                var r = this;
                var n = i * this.player_.duration();
                this.getChild("timeTooltip").updateTime(t, i, n, (function() {
                    r.el_.style.left = t.width * i + "px"
                }))
            };
            return t
        }($u);
        Xc.prototype.options_ = {
            children: ["timeTooltip"]
        };
        $u.registerComponent("MouseTimeDisplay", Xc);
        var zc = 5;
        var Kc = 12;
        var Yc = function(e) {
            J(t, e);

            function t(t, i) {
                var r;
                r = e.call(this, t, i) || this;
                r.setEventHandlers_();
                return r
            }
            var i = t.prototype;
            i.setEventHandlers_ = function e() {
                var t = this;
                this.update_ = wu(this, this.update);
                this.update = ku(this.update_, Eu);
                this.on(this.player_, ["ended", "durationchange", "timeupdate"], this.update);
                if (this.player_.liveTracker) {
                    this.on(this.player_.liveTracker, "liveedgechange", this.update)
                }
                this.updateInterval = null;
                this.enableIntervalHandler_ = function(e) {
                    return t.enableInterval_(e)
                };
                this.disableIntervalHandler_ = function(e) {
                    return t.disableInterval_(e)
                };
                this.on(this.player_, ["playing"], this.enableIntervalHandler_);
                this.on(this.player_, ["ended", "pause", "waiting"], this.disableIntervalHandler_);
                if ("hidden" in W && "visibilityState" in W) {
                    this.on(W, "visibilitychange", this.toggleVisibility_)
                }
            };
            i.toggleVisibility_ = function e(t) {
                if (W.visibilityState === "hidden") {
                    this.cancelNamedAnimationFrame("SeekBar#update");
                    this.cancelNamedAnimationFrame("Slider#update");
                    this.disableInterval_(t)
                } else {
                    if (!this.player_.ended() && !this.player_.paused()) {
                        this.enableInterval_()
                    }
                    this.update()
                }
            };
            i.enableInterval_ = function e() {
                if (this.updateInterval) {
                    return
                }
                this.updateInterval = this.setInterval(this.update, Eu)
            };
            i.disableInterval_ = function e(t) {
                if (this.player_.liveTracker && this.player_.liveTracker.isLive() && t && t.type !== "ended") {
                    return
                }
                if (!this.updateInterval) {
                    return
                }
                this.clearInterval(this.updateInterval);
                this.updateInterval = null
            };
            i.createEl = function t() {
                return e.prototype.createEl.call(this, "div", {
                    className: "vjs-progress-holder"
                }, {
                    "aria-label": this.localize("Progress Bar")
                })
            };
            i.update = function t(i) {
                var r = this;
                if (W.visibilityState === "hidden") {
                    return
                }
                var n = e.prototype.update.call(this);
                this.requestNamedAnimationFrame("SeekBar#update", (function() {
                    var e = r.player_.ended() ? r.player_.duration() : r.getCurrentTime_();
                    var t = r.player_.liveTracker;
                    var i = r.player_.duration();
                    if (t && t.isLive()) {
                        i = r.player_.liveTracker.liveCurrentTime()
                    }
                    if (r.percent_ !== n) {
                        r.el_.setAttribute("aria-valuenow", (n * 100).toFixed(2));
                        r.percent_ = n
                    }
                    if (r.currentTime_ !== e || r.duration_ !== i) {
                        r.el_.setAttribute("aria-valuetext", r.localize("progress bar timing: currentTime={1} duration={2}", [Dc(e, i), Dc(i, i)], "{1} of {2}"));
                        r.currentTime_ = e;
                        r.duration_ = i
                    }
                    if (r.bar) {
                        r.bar.update(Ho(r.el()), r.getProgress())
                    }
                }));
                return n
            };
            i.userSeek_ = function e(t) {
                if (this.player_.liveTracker && this.player_.liveTracker.isLive()) {
                    this.player_.liveTracker.nextSeekedFromUser()
                }
                this.player_.currentTime(t)
            };
            i.getCurrentTime_ = function e() {
                return this.player_.scrubbing() ? this.player_.getCache().currentTime : this.player_.currentTime()
            };
            i.getPercent = function e() {
                var t = this.getCurrentTime_();
                var i;
                var r = this.player_.liveTracker;
                if (r && r.isLive()) {
                    i = (t - r.seekableStart()) / r.liveWindow();
                    if (r.atLiveEdge()) {
                        i = 1
                    }
                } else {
                    i = t / this.player_.duration()
                }
                return i
            };
            i.handleMouseDown = function t(i) {
                if (!Yo(i)) {
                    return
                }
                i.stopPropagation();
                this.videoWasPlaying = !this.player_.paused();
                this.player_.pause();
                e.prototype.handleMouseDown.call(this, i)
            };
            i.handleMouseMove = function e(t, i) {
                if (i === void 0) {
                    i = false
                }
                if (!Yo(t)) {
                    return
                }
                if (!i && !this.player_.scrubbing()) {
                    this.player_.scrubbing(true)
                }
                var r;
                var n = this.calculateDistance(t);
                var a = this.player_.liveTracker;
                if (!a || !a.isLive()) {
                    r = n * this.player_.duration();
                    if (r === this.player_.duration()) {
                        r = r - .1
                    }
                } else {
                    if (n >= .99) {
                        a.seekToLiveEdge();
                        return
                    }
                    var s = a.seekableStart();
                    var o = a.liveCurrentTime();
                    r = s + n * a.liveWindow();
                    if (r >= o) {
                        r = o
                    }
                    if (r <= s) {
                        r = s + .1
                    }
                    if (r === Infinity) {
                        return
                    }
                }
                this.userSeek_(r)
            };
            i.enable = function t() {
                e.prototype.enable.call(this);
                var i = this.getChild("mouseTimeDisplay");
                if (!i) {
                    return
                }
                i.show()
            };
            i.disable = function t() {
                e.prototype.disable.call(this);
                var i = this.getChild("mouseTimeDisplay");
                if (!i) {
                    return
                }
                i.hide()
            };
            i.handleMouseUp = function t(i) {
                e.prototype.handleMouseUp.call(this, i);
                if (i) {
                    i.stopPropagation()
                }
                this.player_.scrubbing(false);
                this.player_.trigger({
                    type: "timeupdate",
                    target: this,
                    manuallyTriggered: true
                });
                if (this.videoWasPlaying) {
                    al(this.player_.play())
                } else {
                    this.update_()
                }
            };
            i.stepForward = function e() {
                this.userSeek_(this.player_.currentTime() + zc)
            };
            i.stepBack = function e() {
                this.userSeek_(this.player_.currentTime() - zc)
            };
            i.handleAction = function e(t) {
                if (this.player_.paused()) {
                    this.player_.play()
                } else {
                    this.player_.pause()
                }
            };
            i.handleKeyDown = function t(i) {
                var r = this.player_.liveTracker;
                if (z.isEventKey(i, "Space") || z.isEventKey(i, "Enter")) {
                    i.preventDefault();
                    i.stopPropagation();
                    this.handleAction(i)
                } else if (z.isEventKey(i, "Home")) {
                    i.preventDefault();
                    i.stopPropagation();
                    this.userSeek_(0)
                } else if (z.isEventKey(i, "End")) {
                    i.preventDefault();
                    i.stopPropagation();
                    if (r && r.isLive()) {
                        this.userSeek_(r.liveCurrentTime())
                    } else {
                        this.userSeek_(this.player_.duration())
                    }
                } else if (/^[0-9]$/.test(z(i))) {
                    i.preventDefault();
                    i.stopPropagation();
                    var n = (z.codes[z(i)] - z.codes["0"]) * 10 / 100;
                    if (r && r.isLive()) {
                        this.userSeek_(r.seekableStart() + r.liveWindow() * n)
                    } else {
                        this.userSeek_(this.player_.duration() * n)
                    }
                } else if (z.isEventKey(i, "PgDn")) {
                    i.preventDefault();
                    i.stopPropagation();
                    this.userSeek_(this.player_.currentTime() - zc * Kc)
                } else if (z.isEventKey(i, "PgUp")) {
                    i.preventDefault();
                    i.stopPropagation();
                    this.userSeek_(this.player_.currentTime() + zc * Kc)
                } else {
                    e.prototype.handleKeyDown.call(this, i)
                }
            };
            i.dispose = function t() {
                this.disableInterval_();
                this.off(this.player_, ["ended", "durationchange", "timeupdate"], this.update);
                if (this.player_.liveTracker) {
                    this.off(this.player_.liveTracker, "liveedgechange", this.update)
                }
                this.off(this.player_, ["playing"], this.enableIntervalHandler_);
                this.off(this.player_, ["ended", "pause", "waiting"], this.disableIntervalHandler_);
                if ("hidden" in W && "visibilityState" in W) {
                    this.off(W, "visibilitychange", this.toggleVisibility_)
                }
                e.prototype.dispose.call(this)
            };
            return t
        }(Hc);
        Yc.prototype.options_ = {
            children: ["loadProgressBar", "playProgressBar"],
            barName: "playProgressBar"
        };
        if (!go && !ro) {
            Yc.prototype.options_.children.splice(1, 0, "mouseTimeDisplay")
        }
        $u.registerComponent("SeekBar", Yc);
        var $c = function(e) {
            J(t, e);

            function t(t, i) {
                var r;
                r = e.call(this, t, i) || this;
                r.handleMouseMove = ku(wu(Y(r), r.handleMouseMove), Eu);
                r.throttledHandleMouseSeek = ku(wu(Y(r), r.handleMouseSeek), Eu);
                r.handleMouseUpHandler_ = function(e) {
                    return r.handleMouseUp(e)
                };
                r.handleMouseDownHandler_ = function(e) {
                    return r.handleMouseDown(e)
                };
                r.enable();
                return r
            }
            var i = t.prototype;
            i.createEl = function t() {
                return e.prototype.createEl.call(this, "div", {
                    className: "vjs-progress-control vjs-control"
                })
            };
            i.handleMouseMove = function e(t) {
                var i = this.getChild("seekBar");
                if (!i) {
                    return
                }
                var r = i.getChild("playProgressBar");
                var n = i.getChild("mouseTimeDisplay");
                if (!r && !n) {
                    return
                }
                var a = i.el();
                var s = qo(a);
                var o = Vo(a, t).x;
                o = jc(o, 0, 1);
                if (n) {
                    n.update(s, o)
                }
                if (r) {
                    r.update(s, i.getProgress())
                }
            };
            i.handleMouseSeek = function e(t) {
                var i = this.getChild("seekBar");
                if (i) {
                    i.handleMouseMove(t)
                }
            };
            i.enabled = function e() {
                return this.enabled_
            };
            i.disable = function e() {
                this.children().forEach((function(e) {
                    return e.disable && e.disable()
                }));
                if (!this.enabled()) {
                    return
                }
                this.off(["mousedown", "touchstart"], this.handleMouseDownHandler_);
                this.off(this.el_, "mousemove", this.handleMouseMove);
                this.removeListenersAddedOnMousedownAndTouchstart();
                this.addClass("disabled");
                this.enabled_ = false;
                if (this.player_.scrubbing()) {
                    var t = this.getChild("seekBar");
                    this.player_.scrubbing(false);
                    if (t.videoWasPlaying) {
                        al(this.player_.play())
                    }
                }
            };
            i.enable = function e() {
                this.children().forEach((function(e) {
                    return e.enable && e.enable()
                }));
                if (this.enabled()) {
                    return
                }
                this.on(["mousedown", "touchstart"], this.handleMouseDownHandler_);
                this.on(this.el_, "mousemove", this.handleMouseMove);
                this.removeClass("disabled");
                this.enabled_ = true
            };
            i.removeListenersAddedOnMousedownAndTouchstart = function e() {
                var t = this.el_.ownerDocument;
                this.off(t, "mousemove", this.throttledHandleMouseSeek);
                this.off(t, "touchmove", this.throttledHandleMouseSeek);
                this.off(t, "mouseup", this.handleMouseUpHandler_);
                this.off(t, "touchend", this.handleMouseUpHandler_)
            };
            i.handleMouseDown = function e(t) {
                var i = this.el_.ownerDocument;
                var r = this.getChild("seekBar");
                if (r) {
                    r.handleMouseDown(t)
                }
                this.on(i, "mousemove", this.throttledHandleMouseSeek);
                this.on(i, "touchmove", this.throttledHandleMouseSeek);
                this.on(i, "mouseup", this.handleMouseUpHandler_);
                this.on(i, "touchend", this.handleMouseUpHandler_)
            };
            i.handleMouseUp = function e(t) {
                var i = this.getChild("seekBar");
                if (i) {
                    i.handleMouseUp(t)
                }
                this.removeListenersAddedOnMousedownAndTouchstart()
            };
            return t
        }($u);
        $c.prototype.options_ = {
            children: ["seekBar"]
        };
        $u.registerComponent("ProgressControl", $c);
        var Qc = function(e) {
            J(t, e);

            function t(t, i) {
                var r;
                r = e.call(this, t, i) || this;
                r.on(t, ["enterpictureinpicture", "leavepictureinpicture"], (function(e) {
                    return r.handlePictureInPictureChange(e)
                }));
                r.on(t, ["disablepictureinpicturechanged", "loadedmetadata"], (function(e) {
                    return r.handlePictureInPictureEnabledChange(e)
                }));
                r.on(t, ["loadedmetadata", "audioonlymodechange", "audiopostermodechange"], (function() {
                    var e = t.currentType().substring(0, 5) === "audio";
                    if (e || t.audioPosterMode() || t.audioOnlyMode()) {
                        if (t.isInPictureInPicture()) {
                            t.exitPictureInPicture()
                        }
                        r.hide()
                    } else {
                        r.show()
                    }
                }));
                r.disable();
                return r
            }
            var i = t.prototype;
            i.buildCSSClass = function t() {
                return "vjs-picture-in-picture-control " + e.prototype.buildCSSClass.call(this)
            };
            i.handlePictureInPictureEnabledChange = function e() {
                if (W.pictureInPictureEnabled && this.player_.disablePictureInPicture() === false) {
                    this.enable()
                } else {
                    this.disable()
                }
            };
            i.handlePictureInPictureChange = function e(t) {
                if (this.player_.isInPictureInPicture()) {
                    this.controlText("Exit Picture-in-Picture")
                } else {
                    this.controlText("Picture-in-Picture")
                }
                this.handlePictureInPictureEnabledChange()
            };
            i.handleClick = function e(t) {
                if (!this.player_.isInPictureInPicture()) {
                    this.player_.requestPictureInPicture()
                } else {
                    this.player_.exitPictureInPicture()
                }
            };
            return t
        }(wc);
        Qc.prototype.controlText_ = "Picture-in-Picture";
        $u.registerComponent("PictureInPictureToggle", Qc);
        var Jc = function(e) {
            J(t, e);

            function t(t, i) {
                var r;
                r = e.call(this, t, i) || this;
                r.on(t, "fullscreenchange", (function(e) {
                    return r.handleFullscreenChange(e)
                }));
                if (W[t.fsApi_.fullscreenEnabled] === false) {
                    r.disable()
                }
                return r
            }
            var i = t.prototype;
            i.buildCSSClass = function t() {
                return "vjs-fullscreen-control " + e.prototype.buildCSSClass.call(this)
            };
            i.handleFullscreenChange = function e(t) {
                if (this.player_.isFullscreen()) {
                    this.controlText("Non-Fullscreen")
                } else {
                    this.controlText("Fullscreen")
                }
            };
            i.handleClick = function e(t) {
                if (!this.player_.isFullscreen()) {
                    this.player_.requestFullscreen()
                } else {
                    this.player_.exitFullscreen()
                }
            };
            return t
        }(wc);
        Jc.prototype.controlText_ = "Fullscreen";
        $u.registerComponent("FullscreenToggle", Jc);
        var Zc = function e(t, i) {
            if (i.tech_ && !i.tech_.featuresVolumeControl) {
                t.addClass("vjs-hidden")
            }
            t.on(i, "loadstart", (function() {
                if (!i.tech_.featuresVolumeControl) {
                    t.addClass("vjs-hidden")
                } else {
                    t.removeClass("vjs-hidden")
                }
            }))
        };
        var ef = function(e) {
            J(t, e);

            function t() {
                return e.apply(this, arguments) || this
            }
            var i = t.prototype;
            i.createEl = function t() {
                var i = e.prototype.createEl.call(this, "div", {
                    className: "vjs-volume-level"
                });
                i.appendChild(e.prototype.createEl.call(this, "span", {
                    className: "vjs-control-text"
                }));
                return i
            };
            return t
        }($u);
        $u.registerComponent("VolumeLevel", ef);
        var tf = function(e) {
            J(t, e);

            function t(t, i) {
                var r;
                r = e.call(this, t, i) || this;
                r.update = ku(wu(Y(r), r.update), Eu);
                return r
            }
            var i = t.prototype;
            i.createEl = function t() {
                return e.prototype.createEl.call(this, "div", {
                    className: "vjs-volume-tooltip"
                }, {
                    "aria-hidden": "true"
                })
            };
            i.update = function e(t, i, r, n) {
                if (!r) {
                    var a = Ho(this.el_);
                    var s = Ho(this.player_.el());
                    var o = t.width * i;
                    if (!s || !a) {
                        return
                    }
                    var u = t.left - s.left + o;
                    var l = t.width - o + (s.right - t.right);
                    var c = a.width / 2;
                    if (u < c) {
                        c += c - u
                    } else if (l < c) {
                        c = l
                    }
                    if (c < 0) {
                        c = 0
                    } else if (c > a.width) {
                        c = a.width
                    }
                    this.el_.style.right = "-" + c + "px"
                }
                this.write(n + "%")
            };
            i.write = function e(t) {
                Ao(this.el_, t)
            };
            i.updateVolume = function e(t, i, r, n, a) {
                var s = this;
                this.requestNamedAnimationFrame("VolumeLevelTooltip#updateVolume", (function() {
                    s.update(t, i, r, n.toFixed(0));
                    if (a) {
                        a()
                    }
                }))
            };
            return t
        }($u);
        $u.registerComponent("VolumeLevelTooltip", tf);
        var rf = function(e) {
            J(t, e);

            function t(t, i) {
                var r;
                r = e.call(this, t, i) || this;
                r.update = ku(wu(Y(r), r.update), Eu);
                return r
            }
            var i = t.prototype;
            i.createEl = function t() {
                return e.prototype.createEl.call(this, "div", {
                    className: "vjs-mouse-display"
                })
            };
            i.update = function e(t, i, r) {
                var n = this;
                var a = 100 * i;
                this.getChild("volumeLevelTooltip").updateVolume(t, i, r, a, (function() {
                    if (r) {
                        n.el_.style.bottom = t.height * i + "px"
                    } else {
                        n.el_.style.left = t.width * i + "px"
                    }
                }))
            };
            return t
        }($u);
        rf.prototype.options_ = {
            children: ["volumeLevelTooltip"]
        };
        $u.registerComponent("MouseVolumeLevelDisplay", rf);
        var nf = function(e) {
            J(t, e);

            function t(t, i) {
                var r;
                r = e.call(this, t, i) || this;
                r.on("slideractive", (function(e) {
                    return r.updateLastVolume_(e)
                }));
                r.on(t, "volumechange", (function(e) {
                    return r.updateARIAAttributes(e)
                }));
                t.ready((function() {
                    return r.updateARIAAttributes()
                }));
                return r
            }
            var i = t.prototype;
            i.createEl = function t() {
                return e.prototype.createEl.call(this, "div", {
                    className: "vjs-volume-bar vjs-slider-bar"
                }, {
                    "aria-label": this.localize("Volume Level"),
                    "aria-live": "polite"
                })
            };
            i.handleMouseDown = function t(i) {
                if (!Yo(i)) {
                    return
                }
                e.prototype.handleMouseDown.call(this, i)
            };
            i.handleMouseMove = function e(t) {
                var i = this.getChild("mouseVolumeLevelDisplay");
                if (i) {
                    var r = this.el();
                    var n = Ho(r);
                    var a = this.vertical();
                    var s = Vo(r, t);
                    s = a ? s.y : s.x;
                    s = jc(s, 0, 1);
                    i.update(n, s, a)
                }
                if (!Yo(t)) {
                    return
                }
                this.checkMuted();
                this.player_.volume(this.calculateDistance(t))
            };
            i.checkMuted = function e() {
                if (this.player_.muted()) {
                    this.player_.muted(false)
                }
            };
            i.getPercent = function e() {
                if (this.player_.muted()) {
                    return 0
                }
                return this.player_.volume()
            };
            i.stepForward = function e() {
                this.checkMuted();
                this.player_.volume(this.player_.volume() + .1)
            };
            i.stepBack = function e() {
                this.checkMuted();
                this.player_.volume(this.player_.volume() - .1)
            };
            i.updateARIAAttributes = function e(t) {
                var i = this.player_.muted() ? 0 : this.volumeAsPercentage_();
                this.el_.setAttribute("aria-valuenow", i);
                this.el_.setAttribute("aria-valuetext", i + "%")
            };
            i.volumeAsPercentage_ = function e() {
                return Math.round(this.player_.volume() * 100)
            };
            i.updateLastVolume_ = function e() {
                var t = this;
                var i = this.player_.volume();
                this.one("sliderinactive", (function() {
                    if (t.player_.volume() === 0) {
                        t.player_.lastVolume_(i)
                    }
                }))
            };
            return t
        }(Hc);
        nf.prototype.options_ = {
            children: ["volumeLevel"],
            barName: "volumeLevel"
        };
        if (!go && !ro) {
            nf.prototype.options_.children.splice(0, 0, "mouseVolumeLevelDisplay")
        }
        nf.prototype.playerEvent = "volumechange";
        $u.registerComponent("VolumeBar", nf);
        var af = function(e) {
            J(t, e);

            function t(t, i) {
                var r;
                if (i === void 0) {
                    i = {}
                }
                i.vertical = i.vertical || false;
                if (typeof i.volumeBar === "undefined" || $s(i.volumeBar)) {
                    i.volumeBar = i.volumeBar || {};
                    i.volumeBar.vertical = i.vertical
                }
                r = e.call(this, t, i) || this;
                Zc(Y(r), t);
                r.throttledHandleMouseMove = ku(wu(Y(r), r.handleMouseMove), Eu);
                r.handleMouseUpHandler_ = function(e) {
                    return r.handleMouseUp(e)
                };
                r.on("mousedown", (function(e) {
                    return r.handleMouseDown(e)
                }));
                r.on("touchstart", (function(e) {
                    return r.handleMouseDown(e)
                }));
                r.on("mousemove", (function(e) {
                    return r.handleMouseMove(e)
                }));
                r.on(r.volumeBar, ["focus", "slideractive"], (function() {
                    r.volumeBar.addClass("vjs-slider-active");
                    r.addClass("vjs-slider-active");
                    r.trigger("slideractive")
                }));
                r.on(r.volumeBar, ["blur", "sliderinactive"], (function() {
                    r.volumeBar.removeClass("vjs-slider-active");
                    r.removeClass("vjs-slider-active");
                    r.trigger("sliderinactive")
                }));
                return r
            }
            var i = t.prototype;
            i.createEl = function t() {
                var i = "vjs-volume-horizontal";
                if (this.options_.vertical) {
                    i = "vjs-volume-vertical"
                }
                return e.prototype.createEl.call(this, "div", {
                    className: "vjs-volume-control vjs-control " + i
                })
            };
            i.handleMouseDown = function e(t) {
                var i = this.el_.ownerDocument;
                this.on(i, "mousemove", this.throttledHandleMouseMove);
                this.on(i, "touchmove", this.throttledHandleMouseMove);
                this.on(i, "mouseup", this.handleMouseUpHandler_);
                this.on(i, "touchend", this.handleMouseUpHandler_)
            };
            i.handleMouseUp = function e(t) {
                var i = this.el_.ownerDocument;
                this.off(i, "mousemove", this.throttledHandleMouseMove);
                this.off(i, "touchmove", this.throttledHandleMouseMove);
                this.off(i, "mouseup", this.handleMouseUpHandler_);
                this.off(i, "touchend", this.handleMouseUpHandler_)
            };
            i.handleMouseMove = function e(t) {
                this.volumeBar.handleMouseMove(t)
            };
            return t
        }($u);
        af.prototype.options_ = {
            children: ["volumeBar"]
        };
        $u.registerComponent("VolumeControl", af);
        var sf = function e(t, i) {
            if (i.tech_ && !i.tech_.featuresMuteControl) {
                t.addClass("vjs-hidden")
            }
            t.on(i, "loadstart", (function() {
                if (!i.tech_.featuresMuteControl) {
                    t.addClass("vjs-hidden")
                } else {
                    t.removeClass("vjs-hidden")
                }
            }))
        };
        var of = function(e) {
            J(t, e);

            function t(t, i) {
                var r;
                r = e.call(this, t, i) || this;
                sf(Y(r), t);
                r.on(t, ["loadstart", "volumechange"], (function(e) {
                    return r.update(e)
                }));
                return r
            }
            var i = t.prototype;
            i.buildCSSClass = function t() {
                return "vjs-mute-control " + e.prototype.buildCSSClass.call(this)
            };
            i.handleClick = function e(t) {
                var i = this.player_.volume();
                var r = this.player_.lastVolume_();
                if (i === 0) {
                    var n = r < .1 ? .1 : r;
                    this.player_.volume(n);
                    this.player_.muted(false)
                } else {
                    this.player_.muted(this.player_.muted() ? false : true)
                }
            };
            i.update = function e(t) {
                this.updateIcon_();
                this.updateControlText_()
            };
            i.updateIcon_ = function e() {
                var t = this.player_.volume();
                var i = 3;
                if (go && this.player_.tech_ && this.player_.tech_.el_) {
                    this.player_.muted(this.player_.tech_.el_.muted)
                }
                if (t === 0 || this.player_.muted()) {
                    i = 0
                } else if (t < .33) {
                    i = 1
                } else if (t < .67) {
                    i = 2
                }
                for (var r = 0; r < 4; r++) {
                    Do(this.el_, "vjs-vol-" + r)
                }
                Oo(this.el_, "vjs-vol-" + i)
            };
            i.updateControlText_ = function e() {
                var t = this.player_.muted() || this.player_.volume() === 0;
                var i = t ? "Unmute" : "Mute";
                if (this.controlText() !== i) {
                    this.controlText(i)
                }
            };
            return t
        }(wc); of .prototype.controlText_ = "Mute";
        $u.registerComponent("MuteToggle", of );
        var uf = function(e) {
            J(t, e);

            function t(t, i) {
                var r;
                if (i === void 0) {
                    i = {}
                }
                if (typeof i.inline !== "undefined") {
                    i.inline = i.inline
                } else {
                    i.inline = true
                }
                if (typeof i.volumeControl === "undefined" || $s(i.volumeControl)) {
                    i.volumeControl = i.volumeControl || {};
                    i.volumeControl.vertical = !i.inline
                }
                r = e.call(this, t, i) || this;
                r.handleKeyPressHandler_ = function(e) {
                    return r.handleKeyPress(e)
                };
                r.on(t, ["loadstart"], (function(e) {
                    return r.volumePanelState_(e)
                }));
                r.on(r.muteToggle, "keyup", (function(e) {
                    return r.handleKeyPress(e)
                }));
                r.on(r.volumeControl, "keyup", (function(e) {
                    return r.handleVolumeControlKeyUp(e)
                }));
                r.on("keydown", (function(e) {
                    return r.handleKeyPress(e)
                }));
                r.on("mouseover", (function(e) {
                    return r.handleMouseOver(e)
                }));
                r.on("mouseout", (function(e) {
                    return r.handleMouseOut(e)
                }));
                r.on(r.volumeControl, ["slideractive"], r.sliderActive_);
                r.on(r.volumeControl, ["sliderinactive"], r.sliderInactive_);
                return r
            }
            var i = t.prototype;
            i.sliderActive_ = function e() {
                this.addClass("vjs-slider-active")
            };
            i.sliderInactive_ = function e() {
                this.removeClass("vjs-slider-active")
            };
            i.volumePanelState_ = function e() {
                if (this.volumeControl.hasClass("vjs-hidden") && this.muteToggle.hasClass("vjs-hidden")) {
                    this.addClass("vjs-hidden")
                }
                if (this.volumeControl.hasClass("vjs-hidden") && !this.muteToggle.hasClass("vjs-hidden")) {
                    this.addClass("vjs-mute-toggle-only")
                }
            };
            i.createEl = function t() {
                var i = "vjs-volume-panel-horizontal";
                if (!this.options_.inline) {
                    i = "vjs-volume-panel-vertical"
                }
                return e.prototype.createEl.call(this, "div", {
                    className: "vjs-volume-panel vjs-control " + i
                })
            };
            i.dispose = function t() {
                this.handleMouseOut();
                e.prototype.dispose.call(this)
            };
            i.handleVolumeControlKeyUp = function e(t) {
                if (z.isEventKey(t, "Esc")) {
                    this.muteToggle.focus()
                }
            };
            i.handleMouseOver = function e(t) {
                this.addClass("vjs-hover");
                gu(W, "keyup", this.handleKeyPressHandler_)
            };
            i.handleMouseOut = function e(t) {
                this.removeClass("vjs-hover");
                yu(W, "keyup", this.handleKeyPressHandler_)
            };
            i.handleKeyPress = function e(t) {
                if (z.isEventKey(t, "Esc")) {
                    this.handleMouseOut()
                }
            };
            return t
        }($u);
        uf.prototype.options_ = {
            children: ["muteToggle", "volumeControl"]
        };
        $u.registerComponent("VolumePanel", uf);
        var lf = function(e) {
            J(t, e);

            function t(t, i) {
                var r;
                r = e.call(this, t, i) || this;
                if (i) {
                    r.menuButton_ = i.menuButton
                }
                r.focusedChild_ = -1;
                r.on("keydown", (function(e) {
                    return r.handleKeyDown(e)
                }));
                r.boundHandleBlur_ = function(e) {
                    return r.handleBlur(e)
                };
                r.boundHandleTapClick_ = function(e) {
                    return r.handleTapClick(e)
                };
                return r
            }
            var i = t.prototype;
            i.addEventListenerForItem = function e(t) {
                if (!(t instanceof $u)) {
                    return
                }
                this.on(t, "blur", this.boundHandleBlur_);
                this.on(t, ["tap", "click"], this.boundHandleTapClick_)
            };
            i.removeEventListenerForItem = function e(t) {
                if (!(t instanceof $u)) {
                    return
                }
                this.off(t, "blur", this.boundHandleBlur_);
                this.off(t, ["tap", "click"], this.boundHandleTapClick_)
            };
            i.removeChild = function t(i) {
                if (typeof i === "string") {
                    i = this.getChild(i)
                }
                this.removeEventListenerForItem(i);
                e.prototype.removeChild.call(this, i)
            };
            i.addItem = function e(t) {
                var i = this.addChild(t);
                if (i) {
                    this.addEventListenerForItem(i)
                }
            };
            i.createEl = function t() {
                var i = this.options_.contentElType || "ul";
                this.contentEl_ = Io(i, {
                    className: "vjs-menu-content"
                });
                this.contentEl_.setAttribute("role", "menu");
                var r = e.prototype.createEl.call(this, "div", {
                    append: this.contentEl_,
                    className: "vjs-menu"
                });
                r.appendChild(this.contentEl_);
                gu(r, "click", (function(e) {
                    e.preventDefault();
                    e.stopImmediatePropagation()
                }));
                return r
            };
            i.dispose = function t() {
                this.contentEl_ = null;
                this.boundHandleBlur_ = null;
                this.boundHandleTapClick_ = null;
                e.prototype.dispose.call(this)
            };
            i.handleBlur = function e(t) {
                var i = t.relatedTarget || W.activeElement;
                if (!this.children().some((function(e) {
                        return e.el() === i
                    }))) {
                    var r = this.menuButton_;
                    if (r && r.buttonPressed_ && i !== r.el().firstChild) {
                        r.unpressButton()
                    }
                }
            };
            i.handleTapClick = function e(t) {
                if (this.menuButton_) {
                    this.menuButton_.unpressButton();
                    var i = this.children();
                    if (!Array.isArray(i)) {
                        return
                    }
                    var r = i.filter((function(e) {
                        return e.el() === t.target
                    }))[0];
                    if (!r) {
                        return
                    }
                    if (r.name() !== "CaptionSettingsMenuItem") {
                        this.menuButton_.focus()
                    }
                }
            };
            i.handleKeyDown = function e(t) {
                if (z.isEventKey(t, "Left") || z.isEventKey(t, "Down")) {
                    t.preventDefault();
                    t.stopPropagation();
                    this.stepForward()
                } else if (z.isEventKey(t, "Right") || z.isEventKey(t, "Up")) {
                    t.preventDefault();
                    t.stopPropagation();
                    this.stepBack()
                }
            };
            i.stepForward = function e() {
                var t = 0;
                if (this.focusedChild_ !== undefined) {
                    t = this.focusedChild_ + 1
                }
                this.focus(t)
            };
            i.stepBack = function e() {
                var t = 0;
                if (this.focusedChild_ !== undefined) {
                    t = this.focusedChild_ - 1
                }
                this.focus(t)
            };
            i.focus = function e(t) {
                if (t === void 0) {
                    t = 0
                }
                var i = this.children().slice();
                var r = i.length && i[0].hasClass("vjs-menu-title");
                if (r) {
                    i.shift()
                }
                if (i.length > 0) {
                    if (t < 0) {
                        t = 0
                    } else if (t >= i.length) {
                        t = i.length - 1
                    }
                    this.focusedChild_ = t;
                    i[t].el_.focus()
                }
            };
            return t
        }($u);
        $u.registerComponent("Menu", lf);
        var cf = function(e) {
            J(t, e);

            function t(t, i) {
                var r;
                if (i === void 0) {
                    i = {}
                }
                r = e.call(this, t, i) || this;
                r.menuButton_ = new wc(t, i);
                r.menuButton_.controlText(r.controlText_);
                r.menuButton_.el_.setAttribute("aria-haspopup", "true");
                var n = wc.prototype.buildCSSClass();
                r.menuButton_.el_.className = r.buildCSSClass() + " " + n;
                r.menuButton_.removeClass("vjs-control");
                r.addChild(r.menuButton_);
                r.update();
                r.enabled_ = true;
                var a = function e(t) {
                    return r.handleClick(t)
                };
                r.handleMenuKeyUp_ = function(e) {
                    return r.handleMenuKeyUp(e)
                };
                r.on(r.menuButton_, "tap", a);
                r.on(r.menuButton_, "click", a);
                r.on(r.menuButton_, "keydown", (function(e) {
                    return r.handleKeyDown(e)
                }));
                r.on(r.menuButton_, "mouseenter", (function() {
                    r.addClass("vjs-hover");
                    r.menu.show();
                    gu(W, "keyup", r.handleMenuKeyUp_)
                }));
                r.on("mouseleave", (function(e) {
                    return r.handleMouseLeave(e)
                }));
                r.on("keydown", (function(e) {
                    return r.handleSubmenuKeyDown(e)
                }));
                return r
            }
            var i = t.prototype;
            i.update = function e() {
                var t = this.createMenu();
                if (this.menu) {
                    this.menu.dispose();
                    this.removeChild(this.menu)
                }
                this.menu = t;
                this.addChild(t);
                this.buttonPressed_ = false;
                this.menuButton_.el_.setAttribute("aria-expanded", "false");
                if (this.items && this.items.length <= this.hideThreshold_) {
                    this.hide();
                    this.menu.contentEl_.removeAttribute("role")
                } else {
                    this.show();
                    this.menu.contentEl_.setAttribute("role", "menu")
                }
            };
            i.createMenu = function e() {
                var t = new lf(this.player_, {
                    menuButton: this
                });
                this.hideThreshold_ = 0;
                if (this.options_.title) {
                    var i = Io("li", {
                        className: "vjs-menu-title",
                        textContent: Vu(this.options_.title),
                        tabIndex: -1
                    });
                    var r = new $u(this.player_, {
                        el: i
                    });
                    t.addItem(r)
                }
                this.items = this.createItems();
                if (this.items) {
                    for (var n = 0; n < this.items.length; n++) {
                        t.addItem(this.items[n])
                    }
                }
                return t
            };
            i.createItems = function e() {};
            i.createEl = function t() {
                return e.prototype.createEl.call(this, "div", {
                    className: this.buildWrapperCSSClass()
                }, {})
            };
            i.buildWrapperCSSClass = function t() {
                var i = "vjs-menu-button";
                if (this.options_.inline === true) {
                    i += "-inline"
                } else {
                    i += "-popup"
                }
                var r = wc.prototype.buildCSSClass();
                return "vjs-menu-button " + i + " " + r + " " + e.prototype.buildCSSClass.call(this)
            };
            i.buildCSSClass = function t() {
                var i = "vjs-menu-button";
                if (this.options_.inline === true) {
                    i += "-inline"
                } else {
                    i += "-popup"
                }
                return "vjs-menu-button " + i + " " + e.prototype.buildCSSClass.call(this)
            };
            i.controlText = function e(t, i) {
                if (i === void 0) {
                    i = this.menuButton_.el()
                }
                return this.menuButton_.controlText(t, i)
            };
            i.dispose = function t() {
                this.handleMouseLeave();
                e.prototype.dispose.call(this)
            };
            i.handleClick = function e(t) {
                if (this.buttonPressed_) {
                    this.unpressButton()
                } else {
                    this.pressButton()
                }
            };
            i.handleMouseLeave = function e(t) {
                this.removeClass("vjs-hover");
                yu(W, "keyup", this.handleMenuKeyUp_)
            };
            i.focus = function e() {
                this.menuButton_.focus()
            };
            i.blur = function e() {
                this.menuButton_.blur()
            };
            i.handleKeyDown = function e(t) {
                if (z.isEventKey(t, "Esc") || z.isEventKey(t, "Tab")) {
                    if (this.buttonPressed_) {
                        this.unpressButton()
                    }
                    if (!z.isEventKey(t, "Tab")) {
                        t.preventDefault();
                        this.menuButton_.focus()
                    }
                } else if (z.isEventKey(t, "Up") || z.isEventKey(t, "Down")) {
                    if (!this.buttonPressed_) {
                        t.preventDefault();
                        this.pressButton()
                    }
                }
            };
            i.handleMenuKeyUp = function e(t) {
                if (z.isEventKey(t, "Esc") || z.isEventKey(t, "Tab")) {
                    this.removeClass("vjs-hover")
                }
            };
            i.handleSubmenuKeyPress = function e(t) {
                this.handleSubmenuKeyDown(t)
            };
            i.handleSubmenuKeyDown = function e(t) {
                if (z.isEventKey(t, "Esc") || z.isEventKey(t, "Tab")) {
                    if (this.buttonPressed_) {
                        this.unpressButton()
                    }
                    if (!z.isEventKey(t, "Tab")) {
                        t.preventDefault();
                        this.menuButton_.focus()
                    }
                }
            };
            i.pressButton = function e() {
                if (this.enabled_) {
                    this.buttonPressed_ = true;
                    this.menu.show();
                    this.menu.lockShowing();
                    this.menuButton_.el_.setAttribute("aria-expanded", "true");
                    if (go && ko()) {
                        return
                    }
                    this.menu.focus()
                }
            };
            i.unpressButton = function e() {
                if (this.enabled_) {
                    this.buttonPressed_ = false;
                    this.menu.unlockShowing();
                    this.menu.hide();
                    this.menuButton_.el_.setAttribute("aria-expanded", "false")
                }
            };
            i.disable = function e() {
                this.unpressButton();
                this.enabled_ = false;
                this.addClass("vjs-disabled");
                this.menuButton_.disable()
            };
            i.enable = function e() {
                this.enabled_ = true;
                this.removeClass("vjs-disabled");
                this.menuButton_.enable()
            };
            return t
        }($u);
        $u.registerComponent("MenuButton", cf);
        var ff = function(e) {
            J(t, e);

            function t(t, i) {
                var r;
                var n = i.tracks;
                r = e.call(this, t, i) || this;
                if (r.items.length <= 1) {
                    r.hide()
                }
                if (!n) {
                    return Y(r)
                }
                var a = wu(Y(r), r.update);
                n.addEventListener("removetrack", a);
                n.addEventListener("addtrack", a);
                n.addEventListener("labelchange", a);
                r.player_.on("ready", a);
                r.player_.on("dispose", (function() {
                    n.removeEventListener("removetrack", a);
                    n.removeEventListener("addtrack", a);
                    n.removeEventListener("labelchange", a)
                }));
                return r
            }
            return t
        }(cf);
        $u.registerComponent("TrackButton", ff);
        var df = ["Tab", "Esc", "Up", "Down", "Right", "Left"];
        var hf = function(e) {
            J(t, e);

            function t(t, i) {
                var r;
                r = e.call(this, t, i) || this;
                r.selectable = i.selectable;
                r.isSelected_ = i.selected || false;
                r.multiSelectable = i.multiSelectable;
                r.selected(r.isSelected_);
                if (r.selectable) {
                    if (r.multiSelectable) {
                        r.el_.setAttribute("role", "menuitemcheckbox")
                    } else {
                        r.el_.setAttribute("role", "menuitemradio")
                    }
                } else {
                    r.el_.setAttribute("role", "menuitem")
                }
                return r
            }
            var i = t.prototype;
            i.createEl = function t(i, r, n) {
                this.nonIconControl = true;
                var a = e.prototype.createEl.call(this, "li", Ks({
                    className: "vjs-menu-item",
                    tabIndex: -1
                }, r), n);
                a.replaceChild(Io("span", {
                    className: "vjs-menu-item-text",
                    textContent: this.localize(this.options_.label)
                }), a.querySelector(".vjs-icon-placeholder"));
                return a
            };
            i.handleKeyDown = function t(i) {
                if (!df.some((function(e) {
                        return z.isEventKey(i, e)
                    }))) {
                    e.prototype.handleKeyDown.call(this, i)
                }
            };
            i.handleClick = function e(t) {
                this.selected(true)
            };
            i.selected = function e(t) {
                if (this.selectable) {
                    if (t) {
                        this.addClass("vjs-selected");
                        this.el_.setAttribute("aria-checked", "true");
                        this.controlText(", selected");
                        this.isSelected_ = true
                    } else {
                        this.removeClass("vjs-selected");
                        this.el_.setAttribute("aria-checked", "false");
                        this.controlText("");
                        this.isSelected_ = false
                    }
                }
            };
            return t
        }(mc);
        $u.registerComponent("MenuItem", hf);
        var pf = function(e) {
            J(t, e);

            function t(t, i) {
                var r;
                var n = i.track;
                var a = t.textTracks();
                i.label = n.label || n.language || "Unknown";
                i.selected = n.mode === "showing";
                r = e.call(this, t, i) || this;
                r.track = n;
                r.kinds = (i.kinds || [i.kind || r.track.kind]).filter(Boolean);
                var o = function e() {
                    for (var t = arguments.length, i = new Array(t), n = 0; n < t; n++) {
                        i[n] = arguments[n]
                    }
                    r.handleTracksChange.apply(Y(r), i)
                };
                var u = function e() {
                    for (var t = arguments.length, i = new Array(t), n = 0; n < t; n++) {
                        i[n] = arguments[n]
                    }
                    r.handleSelectedLanguageChange.apply(Y(r), i)
                };
                t.on(["loadstart", "texttrackchange"], o);
                a.addEventListener("change", o);
                a.addEventListener("selectedlanguagechange", u);
                r.on("dispose", (function() {
                    t.off(["loadstart", "texttrackchange"], o);
                    a.removeEventListener("change", o);
                    a.removeEventListener("selectedlanguagechange", u)
                }));
                if (a.onchange === undefined) {
                    var l;
                    r.on(["tap", "click"], (function() {
                        if (typeof s.Event !== "object") {
                            try {
                                l = new s.Event("change")
                            } catch (e) {}
                        }
                        if (!l) {
                            l = W.createEvent("Event");
                            l.initEvent("change", true, true)
                        }
                        a.dispatchEvent(l)
                    }))
                }
                r.handleTracksChange();
                return r
            }
            var i = t.prototype;
            i.handleClick = function t(i) {
                var r = this.track;
                var n = this.player_.textTracks();
                e.prototype.handleClick.call(this, i);
                if (!n) {
                    return
                }
                for (var a = 0; a < n.length; a++) {
                    var s = n[a];
                    if (this.kinds.indexOf(s.kind) === -1) {
                        continue
                    }
                    if (s === r) {
                        if (s.mode !== "showing") {
                            s.mode = "showing"
                        }
                    } else if (s.mode !== "disabled") {
                        s.mode = "disabled"
                    }
                }
            };
            i.handleTracksChange = function e(t) {
                var i = this.track.mode === "showing";
                if (i !== this.isSelected_) {
                    this.selected(i)
                }
            };
            i.handleSelectedLanguageChange = function e(t) {
                if (this.track.mode === "showing") {
                    var i = this.player_.cache_.selectedLanguage;
                    if (i && i.enabled && i.language === this.track.language && i.kind !== this.track.kind) {
                        return
                    }
                    this.player_.cache_.selectedLanguage = {
                        enabled: true,
                        language: this.track.language,
                        kind: this.track.kind
                    }
                }
            };
            i.dispose = function t() {
                this.track = null;
                e.prototype.dispose.call(this)
            };
            return t
        }(hf);
        $u.registerComponent("TextTrackMenuItem", pf);
        var mf = function(e) {
            J(t, e);

            function t(t, i) {
                i.track = {
                    player: t,
                    kind: i.kind,
                    kinds: i.kinds,
                    default: false,
                    mode: "disabled"
                };
                if (!i.kinds) {
                    i.kinds = [i.kind]
                }
                if (i.label) {
                    i.track.label = i.label
                } else {
                    i.track.label = i.kinds.join(" and ") + " off"
                }
                i.selectable = true;
                i.multiSelectable = false;
                return e.call(this, t, i) || this
            }
            var i = t.prototype;
            i.handleTracksChange = function e(t) {
                var i = this.player().textTracks();
                var r = true;
                for (var n = 0, a = i.length; n < a; n++) {
                    var s = i[n];
                    if (this.options_.kinds.indexOf(s.kind) > -1 && s.mode === "showing") {
                        r = false;
                        break
                    }
                }
                if (r !== this.isSelected_) {
                    this.selected(r)
                }
            };
            i.handleSelectedLanguageChange = function e(t) {
                var i = this.player().textTracks();
                var r = true;
                for (var n = 0, a = i.length; n < a; n++) {
                    var s = i[n];
                    if (["captions", "descriptions", "subtitles"].indexOf(s.kind) > -1 && s.mode === "showing") {
                        r = false;
                        break
                    }
                }
                if (r) {
                    this.player_.cache_.selectedLanguage = {
                        enabled: false
                    }
                }
            };
            return t
        }(pf);
        $u.registerComponent("OffTextTrackMenuItem", mf);
        var vf = function(e) {
            J(t, e);

            function t(t, i) {
                if (i === void 0) {
                    i = {}
                }
                i.tracks = t.textTracks();
                return e.call(this, t, i) || this
            }
            var i = t.prototype;
            i.createItems = function e(t, i) {
                if (t === void 0) {
                    t = []
                }
                if (i === void 0) {
                    i = pf
                }
                var r;
                if (this.label_) {
                    r = this.label_ + " off"
                }
                t.push(new mf(this.player_, {
                    kinds: this.kinds_,
                    kind: this.kind_,
                    label: r
                }));
                this.hideThreshold_ += 1;
                var n = this.player_.textTracks();
                if (!Array.isArray(this.kinds_)) {
                    this.kinds_ = [this.kind_]
                }
                for (var a = 0; a < n.length; a++) {
                    var s = n[a];
                    if (this.kinds_.indexOf(s.kind) > -1) {
                        var o = new i(this.player_, {
                            track: s,
                            kinds: this.kinds_,
                            kind: this.kind_,
                            selectable: true,
                            multiSelectable: false
                        });
                        o.addClass("vjs-" + s.kind + "-menu-item");
                        t.push(o)
                    }
                }
                return t
            };
            return t
        }(ff);
        $u.registerComponent("TextTrackButton", vf);
        var gf = function(e) {
            J(t, e);

            function t(t, i) {
                var r;
                var n = i.track;
                var a = i.cue;
                var s = t.currentTime();
                i.selectable = true;
                i.multiSelectable = false;
                i.label = a.text;
                i.selected = a.startTime <= s && s < a.endTime;
                r = e.call(this, t, i) || this;
                r.track = n;
                r.cue = a;
                return r
            }
            var i = t.prototype;
            i.handleClick = function t(i) {
                e.prototype.handleClick.call(this);
                this.player_.currentTime(this.cue.startTime)
            };
            return t
        }(hf);
        $u.registerComponent("ChaptersTrackMenuItem", gf);
        var yf = function(e) {
            J(t, e);

            function t(t, i, r) {
                var n;
                n = e.call(this, t, i, r) || this;
                n.selectCurrentItem_ = function() {
                    n.items.forEach((function(e) {
                        e.selected(n.track_.activeCues[0] === e.cue)
                    }))
                };
                return n
            }
            var i = t.prototype;
            i.buildCSSClass = function t() {
                return "vjs-chapters-button " + e.prototype.buildCSSClass.call(this)
            };
            i.buildWrapperCSSClass = function t() {
                return "vjs-chapters-button " + e.prototype.buildWrapperCSSClass.call(this)
            };
            i.update = function t(i) {
                if (i && i.track && i.track.kind !== "chapters") {
                    return
                }
                var r = this.findChaptersTrack();
                if (r !== this.track_) {
                    this.setTrack(r);
                    e.prototype.update.call(this)
                } else if (!this.items || r && r.cues && r.cues.length !== this.items.length) {
                    e.prototype.update.call(this)
                }
            };
            i.setTrack = function e(t) {
                if (this.track_ === t) {
                    return
                }
                if (!this.updateHandler_) {
                    this.updateHandler_ = this.update.bind(this)
                }
                if (this.track_) {
                    var i = this.player_.remoteTextTrackEls().getTrackElementByTrack_(this.track_);
                    if (i) {
                        i.removeEventListener("load", this.updateHandler_)
                    }
                    this.track_.removeEventListener("cuechange", this.selectCurrentItem_);
                    this.track_ = null
                }
                this.track_ = t;
                if (this.track_) {
                    this.track_.mode = "hidden";
                    var r = this.player_.remoteTextTrackEls().getTrackElementByTrack_(this.track_);
                    if (r) {
                        r.addEventListener("load", this.updateHandler_)
                    }
                    this.track_.addEventListener("cuechange", this.selectCurrentItem_)
                }
            };
            i.findChaptersTrack = function e() {
                var t = this.player_.textTracks() || [];
                for (var i = t.length - 1; i >= 0; i--) {
                    var r = t[i];
                    if (r.kind === this.kind_) {
                        return r
                    }
                }
            };
            i.getMenuCaption = function e() {
                if (this.track_ && this.track_.label) {
                    return this.track_.label
                }
                return this.localize(Vu(this.kind_))
            };
            i.createMenu = function t() {
                this.options_.title = this.getMenuCaption();
                return e.prototype.createMenu.call(this)
            };
            i.createItems = function e() {
                var t = [];
                if (!this.track_) {
                    return t
                }
                var i = this.track_.cues;
                if (!i) {
                    return t
                }
                for (var r = 0, n = i.length; r < n; r++) {
                    var a = i[r];
                    var s = new gf(this.player_, {
                        track: this.track_,
                        cue: a
                    });
                    t.push(s)
                }
                return t
            };
            return t
        }(vf);
        yf.prototype.kind_ = "chapters";
        yf.prototype.controlText_ = "Chapters";
        $u.registerComponent("ChaptersButton", yf);
        var _f = function(e) {
            J(t, e);

            function t(t, i, r) {
                var n;
                n = e.call(this, t, i, r) || this;
                var a = t.textTracks();
                var s = wu(Y(n), n.handleTracksChange);
                a.addEventListener("change", s);
                n.on("dispose", (function() {
                    a.removeEventListener("change", s)
                }));
                return n
            }
            var i = t.prototype;
            i.handleTracksChange = function e(t) {
                var i = this.player().textTracks();
                var r = false;
                for (var n = 0, a = i.length; n < a; n++) {
                    var s = i[n];
                    if (s.kind !== this.kind_ && s.mode === "showing") {
                        r = true;
                        break
                    }
                }
                if (r) {
                    this.disable()
                } else {
                    this.enable()
                }
            };
            i.buildCSSClass = function t() {
                return "vjs-descriptions-button " + e.prototype.buildCSSClass.call(this)
            };
            i.buildWrapperCSSClass = function t() {
                return "vjs-descriptions-button " + e.prototype.buildWrapperCSSClass.call(this)
            };
            return t
        }(vf);
        _f.prototype.kind_ = "descriptions";
        _f.prototype.controlText_ = "Descriptions";
        $u.registerComponent("DescriptionsButton", _f);
        var bf = function(e) {
            J(t, e);

            function t(t, i, r) {
                return e.call(this, t, i, r) || this
            }
            var i = t.prototype;
            i.buildCSSClass = function t() {
                return "vjs-subtitles-button " + e.prototype.buildCSSClass.call(this)
            };
            i.buildWrapperCSSClass = function t() {
                return "vjs-subtitles-button " + e.prototype.buildWrapperCSSClass.call(this)
            };
            return t
        }(vf);
        bf.prototype.kind_ = "subtitles";
        bf.prototype.controlText_ = "Subtitles";
        $u.registerComponent("SubtitlesButton", bf);
        var Tf = function(e) {
            J(t, e);

            function t(t, i) {
                var r;
                i.track = {
                    player: t,
                    kind: i.kind,
                    label: i.kind + " settings",
                    selectable: false,
                    default: false,
                    mode: "disabled"
                };
                i.selectable = false;
                i.name = "CaptionSettingsMenuItem";
                r = e.call(this, t, i) || this;
                r.addClass("vjs-texttrack-settings");
                r.controlText(", opens " + i.kind + " settings dialog");
                return r
            }
            var i = t.prototype;
            i.handleClick = function e(t) {
                this.player().getChild("textTrackSettings").open()
            };
            return t
        }(pf);
        $u.registerComponent("CaptionSettingsMenuItem", Tf);
        var Sf = function(e) {
            J(t, e);

            function t(t, i, r) {
                return e.call(this, t, i, r) || this
            }
            var i = t.prototype;
            i.buildCSSClass = function t() {
                return "vjs-captions-button " + e.prototype.buildCSSClass.call(this)
            };
            i.buildWrapperCSSClass = function t() {
                return "vjs-captions-button " + e.prototype.buildWrapperCSSClass.call(this)
            };
            i.createItems = function t() {
                var i = [];
                if (!(this.player().tech_ && this.player().tech_.featuresNativeTextTracks) && this.player().getChild("textTrackSettings")) {
                    i.push(new Tf(this.player_, {
                        kind: this.kind_
                    }));
                    this.hideThreshold_ += 1
                }
                return e.prototype.createItems.call(this, i)
            };
            return t
        }(vf);
        Sf.prototype.kind_ = "captions";
        Sf.prototype.controlText_ = "Captions";
        $u.registerComponent("CaptionsButton", Sf);
        var Ef = function(e) {
            J(t, e);

            function t() {
                return e.apply(this, arguments) || this
            }
            var i = t.prototype;
            i.createEl = function t(i, r, n) {
                var a = e.prototype.createEl.call(this, i, r, n);
                var s = a.querySelector(".vjs-menu-item-text");
                if (this.options_.track.kind === "captions") {
                    s.appendChild(Io("span", {
                        className: "vjs-icon-placeholder"
                    }, {
                        "aria-hidden": true
                    }));
                    s.appendChild(Io("span", {
                        className: "vjs-control-text",
                        textContent: " " + this.localize("Captions")
                    }))
                }
                return a
            };
            return t
        }(pf);
        $u.registerComponent("SubsCapsMenuItem", Ef);
        var wf = function(e) {
            J(t, e);

            function t(t, i) {
                var r;
                if (i === void 0) {
                    i = {}
                }
                r = e.call(this, t, i) || this;
                r.label_ = "subtitles";
                if (["en", "en-us", "en-ca", "fr-ca"].indexOf(r.player_.language_) > -1) {
                    r.label_ = "captions"
                }
                r.menuButton_.controlText(Vu(r.label_));
                return r
            }
            var i = t.prototype;
            i.buildCSSClass = function t() {
                return "vjs-subs-caps-button " + e.prototype.buildCSSClass.call(this)
            };
            i.buildWrapperCSSClass = function t() {
                return "vjs-subs-caps-button " + e.prototype.buildWrapperCSSClass.call(this)
            };
            i.createItems = function t() {
                var i = [];
                if (!(this.player().tech_ && this.player().tech_.featuresNativeTextTracks) && this.player().getChild("textTrackSettings")) {
                    i.push(new Tf(this.player_, {
                        kind: this.label_
                    }));
                    this.hideThreshold_ += 1
                }
                i = e.prototype.createItems.call(this, i, Ef);
                return i
            };
            return t
        }(vf);
        wf.prototype.kinds_ = ["captions", "subtitles"];
        wf.prototype.controlText_ = "Subtitles";
        $u.registerComponent("SubsCapsButton", wf);
        var kf = function(e) {
            J(t, e);

            function t(t, i) {
                var r;
                var n = i.track;
                var a = t.audioTracks();
                i.label = n.label || n.language || "Unknown";
                i.selected = n.enabled;
                r = e.call(this, t, i) || this;
                r.track = n;
                r.addClass("vjs-" + n.kind + "-menu-item");
                var s = function e() {
                    for (var t = arguments.length, i = new Array(t), n = 0; n < t; n++) {
                        i[n] = arguments[n]
                    }
                    r.handleTracksChange.apply(Y(r), i)
                };
                a.addEventListener("change", s);
                r.on("dispose", (function() {
                    a.removeEventListener("change", s)
                }));
                return r
            }
            var i = t.prototype;
            i.createEl = function t(i, r, n) {
                var a = e.prototype.createEl.call(this, i, r, n);
                var s = a.querySelector(".vjs-menu-item-text");
                if (this.options_.track.kind === "main-desc") {
                    s.appendChild(Io("span", {
                        className: "vjs-icon-placeholder"
                    }, {
                        "aria-hidden": true
                    }));
                    s.appendChild(Io("span", {
                        className: "vjs-control-text",
                        textContent: " " + this.localize("Descriptions")
                    }))
                }
                return a
            };
            i.handleClick = function t(i) {
                e.prototype.handleClick.call(this, i);
                this.track.enabled = true;
                if (this.player_.tech_.featuresNativeAudioTracks) {
                    var r = this.player_.audioTracks();
                    for (var n = 0; n < r.length; n++) {
                        var a = r[n];
                        if (a === this.track) {
                            continue
                        }
                        a.enabled = a === this.track
                    }
                }
            };
            i.handleTracksChange = function e(t) {
                this.selected(this.track.enabled)
            };
            return t
        }(hf);
        $u.registerComponent("AudioTrackMenuItem", kf);
        var Cf = function(e) {
            J(t, e);

            function t(t, i) {
                if (i === void 0) {
                    i = {}
                }
                i.tracks = t.audioTracks();
                return e.call(this, t, i) || this
            }
            var i = t.prototype;
            i.buildCSSClass = function t() {
                return "vjs-audio-button " + e.prototype.buildCSSClass.call(this)
            };
            i.buildWrapperCSSClass = function t() {
                return "vjs-audio-button " + e.prototype.buildWrapperCSSClass.call(this)
            };
            i.createItems = function e(t) {
                if (t === void 0) {
                    t = []
                }
                this.hideThreshold_ = 1;
                var i = this.player_.audioTracks();
                for (var r = 0; r < i.length; r++) {
                    var n = i[r];
                    t.push(new kf(this.player_, {
                        track: n,
                        selectable: true,
                        multiSelectable: false
                    }))
                }
                return t
            };
            return t
        }(ff);
        Cf.prototype.controlText_ = "Audio Track";
        $u.registerComponent("AudioTrackButton", Cf);
        var If = function(e) {
            J(t, e);

            function t(t, i) {
                var r;
                var n = i.rate;
                var a = parseFloat(n, 10);
                i.label = n;
                i.selected = a === t.playbackRate();
                i.selectable = true;
                i.multiSelectable = false;
                r = e.call(this, t, i) || this;
                r.label = n;
                r.rate = a;
                r.on(t, "ratechange", (function(e) {
                    return r.update(e)
                }));
                return r
            }
            var i = t.prototype;
            i.handleClick = function t(i) {
                e.prototype.handleClick.call(this);
                this.player().playbackRate(this.rate)
            };
            i.update = function e(t) {
                this.selected(this.player().playbackRate() === this.rate)
            };
            return t
        }(hf);
        If.prototype.contentElType = "button";
        $u.registerComponent("PlaybackRateMenuItem", If);
        var Af = function(e) {
            J(t, e);

            function t(t, i) {
                var r;
                r = e.call(this, t, i) || this;
                r.menuButton_.el_.setAttribute("aria-describedby", r.labelElId_);
                r.updateVisibility();
                r.updateLabel();
                r.on(t, "loadstart", (function(e) {
                    return r.updateVisibility(e)
                }));
                r.on(t, "ratechange", (function(e) {
                    return r.updateLabel(e)
                }));
                r.on(t, "playbackrateschange", (function(e) {
                    return r.handlePlaybackRateschange(e)
                }));
                return r
            }
            var i = t.prototype;
            i.createEl = function t() {
                var i = e.prototype.createEl.call(this);
                this.labelElId_ = "vjs-playback-rate-value-label-" + this.id_;
                this.labelEl_ = Io("div", {
                    className: "vjs-playback-rate-value",
                    id: this.labelElId_,
                    textContent: "1x"
                });
                i.appendChild(this.labelEl_);
                return i
            };
            i.dispose = function t() {
                this.labelEl_ = null;
                e.prototype.dispose.call(this)
            };
            i.buildCSSClass = function t() {
                return "vjs-playback-rate " + e.prototype.buildCSSClass.call(this)
            };
            i.buildWrapperCSSClass = function t() {
                return "vjs-playback-rate " + e.prototype.buildWrapperCSSClass.call(this)
            };
            i.createItems = function e() {
                var t = this.playbackRates();
                var i = [];
                for (var r = t.length - 1; r >= 0; r--) {
                    i.push(new If(this.player(), {
                        rate: t[r] + "x"
                    }))
                }
                return i
            };
            i.updateARIAAttributes = function e() {
                this.el().setAttribute("aria-valuenow", this.player().playbackRate())
            };
            i.handleClick = function e(t) {
                var i = this.player().playbackRate();
                var r = this.playbackRates();
                var n = r.indexOf(i);
                var a = (n + 1) % r.length;
                this.player().playbackRate(r[a])
            };
            i.handlePlaybackRateschange = function e(t) {
                this.update()
            };
            i.playbackRates = function e() {
                var t = this.player();
                return t.playbackRates && t.playbackRates() || []
            };
            i.playbackRateSupported = function e() {
                return this.player().tech_ && this.player().tech_.featuresPlaybackRate && this.playbackRates() && this.playbackRates().length > 0
            };
            i.updateVisibility = function e(t) {
                if (this.playbackRateSupported()) {
                    this.removeClass("vjs-hidden")
                } else {
                    this.addClass("vjs-hidden")
                }
            };
            i.updateLabel = function e(t) {
                if (this.playbackRateSupported()) {
                    this.labelEl_.textContent = this.player().playbackRate() + "x"
                }
            };
            return t
        }(cf);
        Af.prototype.controlText_ = "Playback Rate";
        $u.registerComponent("PlaybackRateMenuButton", Af);
        var xf = function(e) {
            J(t, e);

            function t() {
                return e.apply(this, arguments) || this
            }
            var i = t.prototype;
            i.buildCSSClass = function t() {
                return "vjs-spacer " + e.prototype.buildCSSClass.call(this)
            };
            i.createEl = function t(i, r, n) {
                if (i === void 0) {
                    i = "div"
                }
                if (r === void 0) {
                    r = {}
                }
                if (n === void 0) {
                    n = {}
                }
                if (!r.className) {
                    r.className = this.buildCSSClass()
                }
                return e.prototype.createEl.call(this, i, r, n)
            };
            return t
        }($u);
        $u.registerComponent("Spacer", xf);
        var Pf = function(e) {
            J(t, e);

            function t() {
                return e.apply(this, arguments) || this
            }
            var i = t.prototype;
            i.buildCSSClass = function t() {
                return "vjs-custom-control-spacer " + e.prototype.buildCSSClass.call(this)
            };
            i.createEl = function t() {
                return e.prototype.createEl.call(this, "div", {
                    className: this.buildCSSClass(),
                    textContent: " "
                })
            };
            return t
        }(xf);
        $u.registerComponent("CustomControlSpacer", Pf);
        var Of = function(e) {
            J(t, e);

            function t() {
                return e.apply(this, arguments) || this
            }
            var i = t.prototype;
            i.createEl = function t() {
                return e.prototype.createEl.call(this, "div", {
                    className: "vjs-control-bar",
                    dir: "ltr"
                })
            };
            return t
        }($u);
        Of.prototype.options_ = {
            children: ["playToggle", "volumePanel", "currentTimeDisplay", "timeDivider", "durationDisplay", "progressControl", "liveDisplay", "seekToLive", "remainingTimeDisplay", "customControlSpacer", "playbackRateMenuButton", "chaptersButton", "descriptionsButton", "subsCapsButton", "audioTrackButton", "fullscreenToggle"]
        };
        if ("exitPictureInPicture" in W) {
            Of.prototype.options_.children.splice(Of.prototype.options_.children.length - 1, 0, "pictureInPictureToggle")
        }
        $u.registerComponent("ControlBar", Of);
        var Df = function(e) {
            J(t, e);

            function t(t, i) {
                var r;
                r = e.call(this, t, i) || this;
                r.on(t, "error", (function(e) {
                    return r.open(e)
                }));
                return r
            }
            var i = t.prototype;
            i.buildCSSClass = function t() {
                return "vjs-error-display " + e.prototype.buildCSSClass.call(this)
            };
            i.content = function e() {
                var t = this.player().error();
                return t ? this.localize(t.message) : ""
            };
            return t
        }(fl);
        Df.prototype.options_ = X({}, fl.prototype.options_, {
            pauseOnOpen: false,
            fillAlways: true,
            temporary: false,
            uncloseable: true
        });
        $u.registerComponent("ErrorDisplay", Df);
        var Lf = "vjs-text-track-settings";
        var Nf = ["#000", "Black"];
        var Rf = ["#00F", "Blue"];
        var Mf = ["#0FF", "Cyan"];
        var Uf = ["#0F0", "Green"];
        var Bf = ["#F0F", "Magenta"];
        var Ff = ["#F00", "Red"];
        var jf = ["#FFF", "White"];
        var Hf = ["#FF0", "Yellow"];
        var qf = ["1", "Opaque"];
        var Vf = ["0.5", "Semi-Transparent"];
        var Wf = ["0", "Transparent"];
        var Gf = {
            backgroundColor: {
                selector: ".vjs-bg-color > select",
                id: "captions-background-color-%s",
                label: "Color",
                options: [Nf, jf, Ff, Uf, Rf, Hf, Bf, Mf]
            },
            backgroundOpacity: {
                selector: ".vjs-bg-opacity > select",
                id: "captions-background-opacity-%s",
                label: "Transparency",
                options: [qf, Vf, Wf]
            },
            color: {
                selector: ".vjs-fg-color > select",
                id: "captions-foreground-color-%s",
                label: "Color",
                options: [jf, Nf, Ff, Uf, Rf, Hf, Bf, Mf]
            },
            edgeStyle: {
                selector: ".vjs-edge-style > select",
                id: "%s",
                label: "Text Edge Style",
                options: [
                    ["none", "None"],
                    ["raised", "Raised"],
                    ["depressed", "Depressed"],
                    ["uniform", "Uniform"],
                    ["dropshadow", "Dropshadow"]
                ]
            },
            fontFamily: {
                selector: ".vjs-font-family > select",
                id: "captions-font-family-%s",
                label: "Font Family",
                options: [
                    ["proportionalSansSerif", "Proportional Sans-Serif"],
                    ["monospaceSansSerif", "Monospace Sans-Serif"],
                    ["proportionalSerif", "Proportional Serif"],
                    ["monospaceSerif", "Monospace Serif"],
                    ["casual", "Casual"],
                    ["script", "Script"],
                    ["small-caps", "Small Caps"]
                ]
            },
            fontPercent: {
                selector: ".vjs-font-percent > select",
                id: "captions-font-size-%s",
                label: "Font Size",
                options: [
                    ["0.50", "50%"],
                    ["0.75", "75%"],
                    ["1.00", "100%"],
                    ["1.25", "125%"],
                    ["1.50", "150%"],
                    ["1.75", "175%"],
                    ["2.00", "200%"],
                    ["3.00", "300%"],
                    ["4.00", "400%"]
                ],
                default: 2,
                parser: function e(t) {
                    return t === "1.00" ? null : Number(t)
                }
            },
            textOpacity: {
                selector: ".vjs-text-opacity > select",
                id: "captions-foreground-opacity-%s",
                label: "Transparency",
                options: [qf, Vf]
            },
            windowColor: {
                selector: ".vjs-window-color > select",
                id: "captions-window-color-%s",
                label: "Color"
            },
            windowOpacity: {
                selector: ".vjs-window-opacity > select",
                id: "captions-window-opacity-%s",
                label: "Transparency",
                options: [Wf, Vf, qf]
            }
        };
        Gf.windowColor.options = Gf.backgroundColor.options;

        function Xf(e, t) {
            if (t) {
                e = t(e)
            }
            if (e && e !== "none") {
                return e
            }
        }

        function zf(e, t) {
            var i = e.options[e.options.selectedIndex].value;
            return Xf(i, t)
        }

        function Kf(e, t, i) {
            if (!t) {
                return
            }
            for (var r = 0; r < e.options.length; r++) {
                if (Xf(e.options[r].value, i) === t) {
                    e.selectedIndex = r;
                    break
                }
            }
        }
        var Yf = function(e) {
            J(t, e);

            function t(t, i) {
                var r;
                i.temporary = false;
                r = e.call(this, t, i) || this;
                r.updateDisplay = r.updateDisplay.bind(Y(r));
                r.fill();
                r.hasBeenOpened_ = r.hasBeenFilled_ = true;
                r.endDialog = Io("p", {
                    className: "vjs-control-text",
                    textContent: r.localize("End of dialog window.")
                });
                r.el().appendChild(r.endDialog);
                r.setDefaults();
                if (i.persistTextTrackSettings === undefined) {
                    r.options_.persistTextTrackSettings = r.options_.playerOptions.persistTextTrackSettings
                }
                r.on(r.$(".vjs-done-button"), "click", (function() {
                    r.saveSettings();
                    r.close()
                }));
                r.on(r.$(".vjs-default-button"), "click", (function() {
                    r.setDefaults();
                    r.updateDisplay()
                }));
                Xs(Gf, (function(e) {
                    r.on(r.$(e.selector), "change", r.updateDisplay)
                }));
                if (r.options_.persistTextTrackSettings) {
                    r.restoreSettings()
                }
                return r
            }
            var i = t.prototype;
            i.dispose = function t() {
                this.endDialog = null;
                e.prototype.dispose.call(this)
            };
            i.createElSelect_ = function e(t, i, r) {
                var n = this;
                if (i === void 0) {
                    i = ""
                }
                if (r === void 0) {
                    r = "label"
                }
                var a = Gf[t];
                var s = a.id.replace("%s", this.id_);
                var o = [i, s].join(" ").trim();
                return ["<" + r + ' id="' + s + '" class="' + (r === "label" ? "vjs-label" : "") + '">', this.localize(a.label), "</" + r + ">", '<select aria-labelledby="' + o + '">'].concat(a.options.map((function(e) {
                    var t = s + "-" + e[1].replace(/\W+/g, "");
                    return ['<option id="' + t + '" value="' + e[0] + '" ', 'aria-labelledby="' + o + " " + t + '">', n.localize(e[1]), "</option>"].join("")
                }))).concat("</select>").join("")
            };
            i.createElFgColor_ = function e() {
                var t = "captions-text-legend-" + this.id_;
                return ['<fieldset class="vjs-fg-color vjs-track-setting">', '<legend id="' + t + '">', this.localize("Text"), "</legend>", this.createElSelect_("color", t), '<span class="vjs-text-opacity vjs-opacity">', this.createElSelect_("textOpacity", t), "</span>", "</fieldset>"].join("")
            };
            i.createElBgColor_ = function e() {
                var t = "captions-background-" + this.id_;
                return ['<fieldset class="vjs-bg-color vjs-track-setting">', '<legend id="' + t + '">', this.localize("Background"), "</legend>", this.createElSelect_("backgroundColor", t), '<span class="vjs-bg-opacity vjs-opacity">', this.createElSelect_("backgroundOpacity", t), "</span>", "</fieldset>"].join("")
            };
            i.createElWinColor_ = function e() {
                var t = "captions-window-" + this.id_;
                return ['<fieldset class="vjs-window-color vjs-track-setting">', '<legend id="' + t + '">', this.localize("Window"), "</legend>", this.createElSelect_("windowColor", t), '<span class="vjs-window-opacity vjs-opacity">', this.createElSelect_("windowOpacity", t), "</span>", "</fieldset>"].join("")
            };
            i.createElColors_ = function e() {
                return Io("div", {
                    className: "vjs-track-settings-colors",
                    innerHTML: [this.createElFgColor_(), this.createElBgColor_(), this.createElWinColor_()].join("")
                })
            };
            i.createElFont_ = function e() {
                return Io("div", {
                    className: "vjs-track-settings-font",
                    innerHTML: ['<fieldset class="vjs-font-percent vjs-track-setting">', this.createElSelect_("fontPercent", "", "legend"), "</fieldset>", '<fieldset class="vjs-edge-style vjs-track-setting">', this.createElSelect_("edgeStyle", "", "legend"), "</fieldset>", '<fieldset class="vjs-font-family vjs-track-setting">', this.createElSelect_("fontFamily", "", "legend"), "</fieldset>"].join("")
                })
            };
            i.createElControls_ = function e() {
                var t = this.localize("restore all settings to the default values");
                return Io("div", {
                    className: "vjs-track-settings-controls",
                    innerHTML: ['<button type="button" class="vjs-default-button" title="' + t + '">', this.localize("Reset"), '<span class="vjs-control-text"> ' + t + "</span>", "</button>", '<button type="button" class="vjs-done-button">' + this.localize("Done") + "</button>"].join("")
                })
            };
            i.content = function e() {
                return [this.createElColors_(), this.createElFont_(), this.createElControls_()]
            };
            i.label = function e() {
                return this.localize("Caption Settings Dialog")
            };
            i.description = function e() {
                return this.localize("Beginning of dialog window. Escape will cancel and close the window.")
            };
            i.buildCSSClass = function t() {
                return e.prototype.buildCSSClass.call(this) + " vjs-text-track-settings"
            };
            i.getValues = function e() {
                var t = this;
                return zs(Gf, (function(e, i, r) {
                    var n = zf(t.$(i.selector), i.parser);
                    if (n !== undefined) {
                        e[r] = n
                    }
                    return e
                }), {})
            };
            i.setValues = function e(t) {
                var i = this;
                Xs(Gf, (function(e, r) {
                    Kf(i.$(e.selector), t[r], e.parser)
                }))
            };
            i.setDefaults = function e() {
                var t = this;
                Xs(Gf, (function(e) {
                    var i = e.hasOwnProperty("default") ? e["default"] : 0;
                    t.$(e.selector).selectedIndex = i
                }))
            };
            i.restoreSettings = function e() {
                var t;
                try {
                    t = JSON.parse(s.localStorage.getItem(Lf))
                } catch (e) {
                    qs.warn(e)
                }
                if (t) {
                    this.setValues(t)
                }
            };
            i.saveSettings = function e() {
                if (!this.options_.persistTextTrackSettings) {
                    return
                }
                var t = this.getValues();
                try {
                    if (Object.keys(t).length) {
                        s.localStorage.setItem(Lf, JSON.stringify(t))
                    } else {
                        s.localStorage.removeItem(Lf)
                    }
                } catch (e) {
                    qs.warn(e)
                }
            };
            i.updateDisplay = function e() {
                var t = this.player_.getChild("textTrackDisplay");
                if (t) {
                    t.updateDisplay()
                }
            };
            i.conditionalBlur_ = function e() {
                this.previouslyActiveEl_ = null;
                var t = this.player_.controlBar;
                var i = t && t.subsCapsButton;
                var r = t && t.captionsButton;
                if (i) {
                    i.focus()
                } else if (r) {
                    r.focus()
                }
            };
            return t
        }(fl);
        $u.registerComponent("TextTrackSettings", Yf);
        var $f = function(e) {
            J(t, e);

            function t(t, i) {
                var r;
                var n = i.ResizeObserver || s.ResizeObserver;
                if (i.ResizeObserver === null) {
                    n = false
                }
                var a = Gu({
                    createEl: !n,
                    reportTouchActivity: false
                }, i);
                r = e.call(this, t, a) || this;
                r.ResizeObserver = i.ResizeObserver || s.ResizeObserver;
                r.loadListener_ = null;
                r.resizeObserver_ = null;
                r.debouncedHandler_ = Cu((function() {
                    r.resizeHandler()
                }), 100, false, Y(r));
                if (n) {
                    r.resizeObserver_ = new r.ResizeObserver(r.debouncedHandler_);
                    r.resizeObserver_.observe(t.el())
                } else {
                    r.loadListener_ = function() {
                        if (!r.el_ || !r.el_.contentWindow) {
                            return
                        }
                        var e = r.debouncedHandler_;
                        var t = r.unloadListener_ = function() {
                            yu(this, "resize", e);
                            yu(this, "unload", t);
                            t = null
                        };
                        gu(r.el_.contentWindow, "unload", t);
                        gu(r.el_.contentWindow, "resize", e)
                    };
                    r.one("load", r.loadListener_)
                }
                return r
            }
            var i = t.prototype;
            i.createEl = function t() {
                return e.prototype.createEl.call(this, "iframe", {
                    className: "vjs-resize-manager",
                    tabIndex: -1,
                    title: this.localize("No content")
                }, {
                    "aria-hidden": "true"
                })
            };
            i.resizeHandler = function e() {
                if (!this.player_ || !this.player_.trigger) {
                    return
                }
                this.player_.trigger("playerresize")
            };
            i.dispose = function t() {
                if (this.debouncedHandler_) {
                    this.debouncedHandler_.cancel()
                }
                if (this.resizeObserver_) {
                    if (this.player_.el()) {
                        this.resizeObserver_.unobserve(this.player_.el())
                    }
                    this.resizeObserver_.disconnect()
                }
                if (this.loadListener_) {
                    this.off("load", this.loadListener_)
                }
                if (this.el_ && this.el_.contentWindow && this.unloadListener_) {
                    this.unloadListener_.call(this.el_.contentWindow)
                }
                this.ResizeObserver = null;
                this.resizeObserver = null;
                this.debouncedHandler_ = null;
                this.loadListener_ = null;
                e.prototype.dispose.call(this)
            };
            return t
        }($u);
        $u.registerComponent("ResizeManager", $f);
        var Qf = {
            trackingThreshold: 20,
            liveTolerance: 15
        };
        var Jf = function(e) {
            J(t, e);

            function t(t, i) {
                var r;
                var n = Gu(Qf, i, {
                    createEl: false
                });
                r = e.call(this, t, n) || this;
                r.handleVisibilityChange_ = function(e) {
                    return r.handleVisibilityChange(e)
                };
                r.trackLiveHandler_ = function() {
                    return r.trackLive_()
                };
                r.handlePlay_ = function(e) {
                    return r.handlePlay(e)
                };
                r.handleFirstTimeupdate_ = function(e) {
                    return r.handleFirstTimeupdate(e)
                };
                r.handleSeeked_ = function(e) {
                    return r.handleSeeked(e)
                };
                r.seekToLiveEdge_ = function(e) {
                    return r.seekToLiveEdge(e)
                };
                r.reset_();
                r.on(r.player_, "durationchange", (function(e) {
                    return r.handleDurationchange(e)
                }));
                r.on(r.player_, "canplay", (function() {
                    return r.toggleTracking()
                }));
                if (co && "hidden" in W && "visibilityState" in W) {
                    r.on(W, "visibilitychange", r.handleVisibilityChange_)
                }
                return r
            }
            var i = t.prototype;
            i.handleVisibilityChange = function e() {
                if (this.player_.duration() !== Infinity) {
                    return
                }
                if (W.hidden) {
                    this.stopTracking()
                } else {
                    this.startTracking()
                }
            };
            i.trackLive_ = function e() {
                var t = this.player_.seekable();
                if (!t || !t.length) {
                    return
                }
                var i = Number(s.performance.now().toFixed(4));
                var r = this.lastTime_ === -1 ? 0 : (i - this.lastTime_) / 1e3;
                this.lastTime_ = i;
                this.pastSeekEnd_ = this.pastSeekEnd() + r;
                var n = this.liveCurrentTime();
                var a = this.player_.currentTime();
                var o = this.player_.paused() || this.seekedBehindLive_ || Math.abs(n - a) > this.options_.liveTolerance;
                if (!this.timeupdateSeen_ || n === Infinity) {
                    o = false
                }
                if (o !== this.behindLiveEdge_) {
                    this.behindLiveEdge_ = o;
                    this.trigger("liveedgechange")
                }
            };
            i.handleDurationchange = function e() {
                this.toggleTracking()
            };
            i.toggleTracking = function e() {
                if (this.player_.duration() === Infinity && this.liveWindow() >= this.options_.trackingThreshold) {
                    if (this.player_.options_.liveui) {
                        this.player_.addClass("vjs-liveui")
                    }
                    this.startTracking()
                } else {
                    this.player_.removeClass("vjs-liveui");
                    this.stopTracking()
                }
            };
            i.startTracking = function e() {
                if (this.isTracking()) {
                    return
                }
                if (!this.timeupdateSeen_) {
                    this.timeupdateSeen_ = this.player_.hasStarted()
                }
                this.trackingInterval_ = this.setInterval(this.trackLiveHandler_, Eu);
                this.trackLive_();
                this.on(this.player_, ["play", "pause"], this.trackLiveHandler_);
                if (!this.timeupdateSeen_) {
                    this.one(this.player_, "play", this.handlePlay_);
                    this.one(this.player_, "timeupdate", this.handleFirstTimeupdate_)
                } else {
                    this.on(this.player_, "seeked", this.handleSeeked_)
                }
            };
            i.handleFirstTimeupdate = function e() {
                this.timeupdateSeen_ = true;
                this.on(this.player_, "seeked", this.handleSeeked_)
            };
            i.handleSeeked = function e() {
                var t = Math.abs(this.liveCurrentTime() - this.player_.currentTime());
                this.seekedBehindLive_ = this.nextSeekedFromUser_ && t > 2;
                this.nextSeekedFromUser_ = false;
                this.trackLive_()
            };
            i.handlePlay = function e() {
                this.one(this.player_, "timeupdate", this.seekToLiveEdge_)
            };
            i.reset_ = function e() {
                this.lastTime_ = -1;
                this.pastSeekEnd_ = 0;
                this.lastSeekEnd_ = -1;
                this.behindLiveEdge_ = true;
                this.timeupdateSeen_ = false;
                this.seekedBehindLive_ = false;
                this.nextSeekedFromUser_ = false;
                this.clearInterval(this.trackingInterval_);
                this.trackingInterval_ = null;
                this.off(this.player_, ["play", "pause"], this.trackLiveHandler_);
                this.off(this.player_, "seeked", this.handleSeeked_);
                this.off(this.player_, "play", this.handlePlay_);
                this.off(this.player_, "timeupdate", this.handleFirstTimeupdate_);
                this.off(this.player_, "timeupdate", this.seekToLiveEdge_)
            };
            i.nextSeekedFromUser = function e() {
                this.nextSeekedFromUser_ = true
            };
            i.stopTracking = function e() {
                if (!this.isTracking()) {
                    return
                }
                this.reset_();
                this.trigger("liveedgechange")
            };
            i.seekableEnd = function e() {
                var t = this.player_.seekable();
                var i = [];
                var r = t ? t.length : 0;
                while (r--) {
                    i.push(t.end(r))
                }
                return i.length ? i.sort()[i.length - 1] : Infinity
            };
            i.seekableStart = function e() {
                var t = this.player_.seekable();
                var i = [];
                var r = t ? t.length : 0;
                while (r--) {
                    i.push(t.start(r))
                }
                return i.length ? i.sort()[0] : 0
            };
            i.liveWindow = function e() {
                var t = this.liveCurrentTime();
                if (t === Infinity) {
                    return 0
                }
                return t - this.seekableStart()
            };
            i.isLive = function e() {
                return this.isTracking()
            };
            i.atLiveEdge = function e() {
                return !this.behindLiveEdge()
            };
            i.liveCurrentTime = function e() {
                return this.pastSeekEnd() + this.seekableEnd()
            };
            i.pastSeekEnd = function e() {
                var t = this.seekableEnd();
                if (this.lastSeekEnd_ !== -1 && t !== this.lastSeekEnd_) {
                    this.pastSeekEnd_ = 0
                }
                this.lastSeekEnd_ = t;
                return this.pastSeekEnd_
            };
            i.behindLiveEdge = function e() {
                return this.behindLiveEdge_
            };
            i.isTracking = function e() {
                return typeof this.trackingInterval_ === "number"
            };
            i.seekToLiveEdge = function e() {
                this.seekedBehindLive_ = false;
                if (this.atLiveEdge()) {
                    return
                }
                this.nextSeekedFromUser_ = false;
                this.player_.currentTime(this.liveCurrentTime())
            };
            i.dispose = function t() {
                this.off(W, "visibilitychange", this.handleVisibilityChange_);
                this.stopTracking();
                e.prototype.dispose.call(this)
            };
            return t
        }($u);
        $u.registerComponent("LiveTracker", Jf);
        var Zf = function e(t) {
            var i = t.el();
            if (i.hasAttribute("src")) {
                t.triggerSourceset(i.src);
                return true
            }
            var r = t.$$("source");
            var n = [];
            var a = "";
            if (!r.length) {
                return false
            }
            for (var s = 0; s < r.length; s++) {
                var o = r[s].src;
                if (o && n.indexOf(o) === -1) {
                    n.push(o)
                }
            }
            if (!n.length) {
                return false
            }
            if (n.length === 1) {
                a = n[0]
            }
            t.triggerSourceset(a);
            return true
        };
        var ed = Object.defineProperty({}, "innerHTML", {
            get: function e() {
                return this.cloneNode(true).innerHTML
            },
            set: function e(t) {
                var i = W.createElement(this.nodeName.toLowerCase());
                i.innerHTML = t;
                var r = W.createDocumentFragment();
                while (i.childNodes.length) {
                    r.appendChild(i.childNodes[0])
                }
                this.innerText = "";
                s.Element.prototype.appendChild.call(this, r);
                return this.innerHTML
            }
        });
        var td = function e(t, i) {
            var r = {};
            for (var n = 0; n < t.length; n++) {
                r = Object.getOwnPropertyDescriptor(t[n], i);
                if (r && r.set && r.get) {
                    break
                }
            }
            r.enumerable = true;
            r.configurable = true;
            return r
        };
        var id = function e(t) {
            return td([t.el(), s.HTMLMediaElement.prototype, s.Element.prototype, ed], "innerHTML")
        };
        var rd = function e(t) {
            var i = t.el();
            if (i.resetSourceWatch_) {
                return
            }
            var r = {};
            var n = id(t);
            var a = function e(r) {
                return function() {
                    for (var e = arguments.length, n = new Array(e), a = 0; a < e; a++) {
                        n[a] = arguments[a]
                    }
                    var s = r.apply(i, n);
                    Zf(t);
                    return s
                }
            };
            ["append", "appendChild", "insertAdjacentHTML"].forEach((function(e) {
                if (!i[e]) {
                    return
                }
                r[e] = i[e];
                i[e] = a(r[e])
            }));
            Object.defineProperty(i, "innerHTML", Gu(n, {
                set: a(n.set)
            }));
            i.resetSourceWatch_ = function() {
                i.resetSourceWatch_ = null;
                Object.keys(r).forEach((function(e) {
                    i[e] = r[e]
                }));
                Object.defineProperty(i, "innerHTML", n)
            };
            t.one("sourceset", i.resetSourceWatch_)
        };
        var nd = Object.defineProperty({}, "src", {
            get: function e() {
                if (this.hasAttribute("src")) {
                    return Il(s.Element.prototype.getAttribute.call(this, "src"))
                }
                return ""
            },
            set: function e(t) {
                s.Element.prototype.setAttribute.call(this, "src", t);
                return t
            }
        });
        var ad = function e(t) {
            return td([t.el(), s.HTMLMediaElement.prototype, nd], "src")
        };
        var sd = function e(t) {
            if (!t.featuresSourceset) {
                return
            }
            var i = t.el();
            if (i.resetSourceset_) {
                return
            }
            var r = ad(t);
            var n = i.setAttribute;
            var a = i.load;
            Object.defineProperty(i, "src", Gu(r, {
                set: function e(n) {
                    var a = r.set.call(i, n);
                    t.triggerSourceset(i.src);
                    return a
                }
            }));
            i.setAttribute = function(e, r) {
                var a = n.call(i, e, r);
                if (/src/i.test(e)) {
                    t.triggerSourceset(i.src)
                }
                return a
            };
            i.load = function() {
                var e = a.call(i);
                if (!Zf(t)) {
                    t.triggerSourceset("");
                    rd(t)
                }
                return e
            };
            if (i.currentSrc) {
                t.triggerSourceset(i.currentSrc)
            } else if (!Zf(t)) {
                rd(t)
            }
            i.resetSourceset_ = function() {
                i.resetSourceset_ = null;
                i.load = a;
                i.setAttribute = n;
                Object.defineProperty(i, "src", r);
                if (i.resetSourceWatch_) {
                    i.resetSourceWatch_()
                }
            }
        };
        var od = function e(t, i, r, n) {
            if (n === void 0) {
                n = true
            }
            var a = function e(r) {
                return Object.defineProperty(t, i, {
                    value: r,
                    enumerable: true,
                    writable: true
                })
            };
            var s = {
                configurable: true,
                enumerable: true,
                get: function e() {
                    var t = r();
                    a(t);
                    return t
                }
            };
            if (n) {
                s.set = a
            }
            return Object.defineProperty(t, i, s)
        };
        var ud = function(e) {
            J(t, e);

            function t(t, i) {
                var r;
                r = e.call(this, t, i) || this;
                var n = t.source;
                var a = false;
                if (n && (r.el_.currentSrc !== n.src || t.tag && t.tag.initNetworkState_ === 3)) {
                    r.setSource(n)
                } else {
                    r.handleLateInit_(r.el_)
                }
                if (t.enableSourceset) {
                    r.setupSourcesetHandling_()
                }
                r.isScrubbing_ = false;
                if (r.el_.hasChildNodes()) {
                    var s = r.el_.childNodes;
                    var o = s.length;
                    var u = [];
                    while (o--) {
                        var l = s[o];
                        var c = l.nodeName.toLowerCase();
                        if (c === "track") {
                            if (!r.featuresNativeTextTracks) {
                                u.push(l)
                            } else {
                                r.remoteTextTrackEls().addTrackElement_(l);
                                r.remoteTextTracks().addTrack(l.track);
                                r.textTracks().addTrack(l.track);
                                if (!a && !r.el_.hasAttribute("crossorigin") && xl(l.src)) {
                                    a = true
                                }
                            }
                        }
                    }
                    for (var f = 0; f < u.length; f++) {
                        r.el_.removeChild(u[f])
                    }
                }
                r.proxyNativeTracks_();
                if (r.featuresNativeTextTracks && a) {
                    qs.warn("Text Tracks are being loaded from another origin but the crossorigin attribute isn't used.\n" + "This may prevent text tracks from loading.")
                }
                r.restoreMetadataTracksInIOSNativePlayer_();
                if ((po || vo || ao) && t.nativeControlsForTouch === true) {
                    r.setControls(true)
                }
                r.proxyWebkitFullscreen_();
                r.featuresVideoFrameCallback = r.featuresVideoFrameCallback && r.el_.tagName === "VIDEO";
                r.triggerReady();
                return r
            }
            var i = t.prototype;
            i.dispose = function i() {
                if (this.el_ && this.el_.resetSourceset_) {
                    this.el_.resetSourceset_()
                }
                t.disposeMediaElement(this.el_);
                this.options_ = null;
                e.prototype.dispose.call(this)
            };
            i.setupSourcesetHandling_ = function e() {
                sd(this)
            };
            i.restoreMetadataTracksInIOSNativePlayer_ = function e() {
                var t = this.textTracks();
                var i;
                var r = function e() {
                    i = [];
                    for (var r = 0; r < t.length; r++) {
                        var n = t[r];
                        if (n.kind === "metadata") {
                            i.push({
                                track: n,
                                storedMode: n.mode
                            })
                        }
                    }
                };
                r();
                t.addEventListener("change", r);
                this.on("dispose", (function() {
                    return t.removeEventListener("change", r)
                }));
                var n = function e() {
                    for (var r = 0; r < i.length; r++) {
                        var n = i[r];
                        if (n.track.mode === "disabled" && n.track.mode !== n.storedMode) {
                            n.track.mode = n.storedMode
                        }
                    }
                    t.removeEventListener("change", e)
                };
                this.on("webkitbeginfullscreen", (function() {
                    t.removeEventListener("change", r);
                    t.removeEventListener("change", n);
                    t.addEventListener("change", n)
                }));
                this.on("webkitendfullscreen", (function() {
                    t.removeEventListener("change", r);
                    t.addEventListener("change", r);
                    t.removeEventListener("change", n)
                }))
            };
            i.overrideNative_ = function e(t, i) {
                var r = this;
                if (i !== this["featuresNative" + t + "Tracks"]) {
                    return
                }
                var n = t.toLowerCase();
                if (this[n + "TracksListeners_"]) {
                    Object.keys(this[n + "TracksListeners_"]).forEach((function(e) {
                        var t = r.el()[n + "Tracks"];
                        t.removeEventListener(e, r[n + "TracksListeners_"][e])
                    }))
                }
                this["featuresNative" + t + "Tracks"] = !i;
                this[n + "TracksListeners_"] = null;
                this.proxyNativeTracksForType_(n)
            };
            i.overrideNativeAudioTracks = function e(t) {
                this.overrideNative_("Audio", t)
            };
            i.overrideNativeVideoTracks = function e(t) {
                this.overrideNative_("Video", t)
            };
            i.proxyNativeTracksForType_ = function e(t) {
                var i = this;
                var r = Hl[t];
                var n = this.el()[r.getterName];
                var a = this[r.getterName]();
                if (!this["featuresNative" + r.capitalName + "Tracks"] || !n || !n.addEventListener) {
                    return
                }
                var s = {
                    change: function e(r) {
                        var n = {
                            type: "change",
                            target: a,
                            currentTarget: a,
                            srcElement: a
                        };
                        a.trigger(n);
                        if (t === "text") {
                            i[ql.remoteText.getterName]().trigger(n)
                        }
                    },
                    addtrack: function e(t) {
                        a.addTrack(t.track)
                    },
                    removetrack: function e(t) {
                        a.removeTrack(t.track)
                    }
                };
                var o = function e() {
                    var t = [];
                    for (var i = 0; i < a.length; i++) {
                        var r = false;
                        for (var s = 0; s < n.length; s++) {
                            if (n[s] === a[i]) {
                                r = true;
                                break
                            }
                        }
                        if (!r) {
                            t.push(a[i])
                        }
                    }
                    while (t.length) {
                        a.removeTrack(t.shift())
                    }
                };
                this[r.getterName + "Listeners_"] = s;
                Object.keys(s).forEach((function(e) {
                    var t = s[e];
                    n.addEventListener(e, t);
                    i.on("dispose", (function(i) {
                        return n.removeEventListener(e, t)
                    }))
                }));
                this.on("loadstart", o);
                this.on("dispose", (function(e) {
                    return i.off("loadstart", o)
                }))
            };
            i.proxyNativeTracks_ = function e() {
                var t = this;
                Hl.names.forEach((function(e) {
                    t.proxyNativeTracksForType_(e)
                }))
            };
            i.createEl = function e() {
                var i = this.options_.tag;
                if (!i || !(this.options_.playerElIngest || this.movingMediaElementInDOM)) {
                    if (i) {
                        var r = i.cloneNode(true);
                        if (i.parentNode) {
                            i.parentNode.insertBefore(r, i)
                        }
                        t.disposeMediaElement(i);
                        i = r
                    } else {
                        i = W.createElement("video");
                        var n = this.options_.tag && Ro(this.options_.tag);
                        var a = Gu({}, n);
                        if (!po || this.options_.nativeControlsForTouch !== true) {
                            delete a.controls
                        }
                        No(i, Ks(a, {
                            id: this.options_.techId,
                            class: "vjs-tech"
                        }))
                    }
                    i.playerId = this.options_.playerId
                }
                if (typeof this.options_.preload !== "undefined") {
                    Uo(i, "preload", this.options_.preload)
                }
                if (this.options_.disablePictureInPicture !== undefined) {
                    i.disablePictureInPicture = this.options_.disablePictureInPicture
                }
                var s = ["loop", "muted", "playsinline", "autoplay"];
                for (var o = 0; o < s.length; o++) {
                    var u = s[o];
                    var l = this.options_[u];
                    if (typeof l !== "undefined") {
                        if (l) {
                            Uo(i, u, u)
                        } else {
                            Bo(i, u)
                        }
                        i[u] = l
                    }
                }
                return i
            };
            i.handleLateInit_ = function e(t) {
                if (t.networkState === 0 || t.networkState === 3) {
                    return
                }
                if (t.readyState === 0) {
                    var i = false;
                    var r = function e() {
                        i = true
                    };
                    this.on("loadstart", r);
                    var n = function e() {
                        if (!i) {
                            this.trigger("loadstart")
                        }
                    };
                    this.on("loadedmetadata", n);
                    this.ready((function() {
                        this.off("loadstart", r);
                        this.off("loadedmetadata", n);
                        if (!i) {
                            this.trigger("loadstart")
                        }
                    }));
                    return
                }
                var a = ["loadstart"];
                a.push("loadedmetadata");
                if (t.readyState >= 2) {
                    a.push("loadeddata")
                }
                if (t.readyState >= 3) {
                    a.push("canplay")
                }
                if (t.readyState >= 4) {
                    a.push("canplaythrough")
                }
                this.ready((function() {
                    a.forEach((function(e) {
                        this.trigger(e)
                    }), this)
                }))
            };
            i.setScrubbing = function e(t) {
                this.isScrubbing_ = t
            };
            i.scrubbing = function e() {
                return this.isScrubbing_
            };
            i.setCurrentTime = function e(t) {
                try {
                    if (this.isScrubbing_ && this.el_.fastSeek && yo) {
                        this.el_.fastSeek(t)
                    } else {
                        this.el_.currentTime = t
                    }
                } catch (e) {
                    qs(e, "Video is not ready. (Video.js)")
                }
            };
            i.duration = function e() {
                var t = this;
                if (this.el_.duration === Infinity && ro && uo && this.el_.currentTime === 0) {
                    var i = function e() {
                        if (t.el_.currentTime > 0) {
                            if (t.el_.duration === Infinity) {
                                t.trigger("durationchange")
                            }
                            t.off("timeupdate", e)
                        }
                    };
                    this.on("timeupdate", i);
                    return NaN
                }
                return this.el_.duration || NaN
            };
            i.width = function e() {
                return this.el_.offsetWidth
            };
            i.height = function e() {
                return this.el_.offsetHeight
            };
            i.proxyWebkitFullscreen_ = function e() {
                var t = this;
                if (!("webkitDisplayingFullscreen" in this.el_)) {
                    return
                }
                var i = function e() {
                    this.trigger("fullscreenchange", {
                        isFullscreen: false
                    });
                    if (this.el_.controls && !this.options_.nativeControlsForTouch && this.controls()) {
                        this.el_.controls = false
                    }
                };
                var r = function e() {
                    if ("webkitPresentationMode" in this.el_ && this.el_.webkitPresentationMode !== "picture-in-picture") {
                        this.one("webkitendfullscreen", i);
                        this.trigger("fullscreenchange", {
                            isFullscreen: true,
                            nativeIOSFullscreen: true
                        })
                    }
                };
                this.on("webkitbeginfullscreen", r);
                this.on("dispose", (function() {
                    t.off("webkitbeginfullscreen", r);
                    t.off("webkitendfullscreen", i)
                }))
            };
            i.supportsFullScreen = function e() {
                if (typeof this.el_.webkitEnterFullScreen === "function") {
                    var t = s.navigator && s.navigator.userAgent || "";
                    if (/Android/.test(t) || !/Chrome|Mac OS X 10.5/.test(t)) {
                        return true
                    }
                }
                return false
            };
            i.enterFullScreen = function e() {
                var t = this.el_;
                if (t.paused && t.networkState <= t.HAVE_METADATA) {
                    al(this.el_.play());
                    this.setTimeout((function() {
                        t.pause();
                        try {
                            t.webkitEnterFullScreen()
                        } catch (e) {
                            this.trigger("fullscreenerror", e)
                        }
                    }), 0)
                } else {
                    try {
                        t.webkitEnterFullScreen()
                    } catch (e) {
                        this.trigger("fullscreenerror", e)
                    }
                }
            };
            i.exitFullScreen = function e() {
                if (!this.el_.webkitDisplayingFullscreen) {
                    this.trigger("fullscreenerror", new Error("The video is not fullscreen"));
                    return
                }
                this.el_.webkitExitFullScreen()
            };
            i.requestPictureInPicture = function e() {
                return this.el_.requestPictureInPicture()
            };
            i.requestVideoFrameCallback = function t(i) {
                if (this.featuresVideoFrameCallback) {
                    return this.el_.requestVideoFrameCallback(i)
                }
                return e.prototype.requestVideoFrameCallback.call(this, i)
            };
            i.cancelVideoFrameCallback = function t(i) {
                if (this.featuresVideoFrameCallback) {
                    this.el_.cancelVideoFrameCallback(i)
                } else {
                    e.prototype.cancelVideoFrameCallback.call(this, i)
                }
            };
            i.src = function e(t) {
                if (t === undefined) {
                    return this.el_.src
                }
                this.setSrc(t)
            };
            i.reset = function e() {
                t.resetMediaElement(this.el_)
            };
            i.currentSrc = function e() {
                if (this.currentSource_) {
                    return this.currentSource_.src
                }
                return this.el_.currentSrc
            };
            i.setControls = function e(t) {
                this.el_.controls = !!t
            };
            i.addTextTrack = function t(i, r, n) {
                if (!this.featuresNativeTextTracks) {
                    return e.prototype.addTextTrack.call(this, i, r, n)
                }
                return this.el_.addTextTrack(i, r, n)
            };
            i.createRemoteTextTrack = function t(i) {
                if (!this.featuresNativeTextTracks) {
                    return e.prototype.createRemoteTextTrack.call(this, i)
                }
                var r = W.createElement("track");
                if (i.kind) {
                    r.kind = i.kind
                }
                if (i.label) {
                    r.label = i.label
                }
                if (i.language || i.srclang) {
                    r.srclang = i.language || i.srclang
                }
                if (i["default"]) {
                    r["default"] = i["default"]
                }
                if (i.id) {
                    r.id = i.id
                }
                if (i.src) {
                    r.src = i.src
                }
                return r
            };
            i.addRemoteTextTrack = function t(i, r) {
                var n = e.prototype.addRemoteTextTrack.call(this, i, r);
                if (this.featuresNativeTextTracks) {
                    this.el().appendChild(n)
                }
                return n
            };
            i.removeRemoteTextTrack = function t(i) {
                e.prototype.removeRemoteTextTrack.call(this, i);
                if (this.featuresNativeTextTracks) {
                    var r = this.$$("track");
                    var n = r.length;
                    while (n--) {
                        if (i === r[n] || i === r[n].track) {
                            this.el().removeChild(r[n])
                        }
                    }
                }
            };
            i.getVideoPlaybackQuality = function e() {
                if (typeof this.el().getVideoPlaybackQuality === "function") {
                    return this.el().getVideoPlaybackQuality()
                }
                var t = {};
                if (typeof this.el().webkitDroppedFrameCount !== "undefined" && typeof this.el().webkitDecodedFrameCount !== "undefined") {
                    t.droppedVideoFrames = this.el().webkitDroppedFrameCount;
                    t.totalVideoFrames = this.el().webkitDecodedFrameCount
                }
                if (s.performance && typeof s.performance.now === "function") {
                    t.creationTime = s.performance.now()
                } else if (s.performance && s.performance.timing && typeof s.performance.timing.navigationStart === "number") {
                    t.creationTime = s.Date.now() - s.performance.timing.navigationStart
                }
                return t
            };
            return t
        }(Gl);
        od(ud, "TEST_VID", (function() {
            if (!Eo()) {
                return
            }
            var e = W.createElement("video");
            var t = W.createElement("track");
            t.kind = "captions";
            t.srclang = "en";
            t.label = "English";
            e.appendChild(t);
            return e
        }));
        ud.isSupported = function() {
            try {
                ud.TEST_VID.volume = .5
            } catch (e) {
                return false
            }
            return !!(ud.TEST_VID && ud.TEST_VID.canPlayType)
        };
        ud.canPlayType = function(e) {
            return ud.TEST_VID.canPlayType(e)
        };
        ud.canPlaySource = function(e, t) {
            return ud.canPlayType(e.type)
        };
        ud.canControlVolume = function() {
            try {
                var e = ud.TEST_VID.volume;
                ud.TEST_VID.volume = e / 2 + .1;
                var t = e !== ud.TEST_VID.volume;
                if (t && go) {
                    s.setTimeout((function() {
                        if (ud && ud.prototype) {
                            ud.prototype.featuresVolumeControl = e !== ud.TEST_VID.volume
                        }
                    }));
                    return false
                }
                return t
            } catch (e) {
                return false
            }
        };
        ud.canMuteVolume = function() {
            try {
                var e = ud.TEST_VID.muted;
                ud.TEST_VID.muted = !e;
                if (ud.TEST_VID.muted) {
                    Uo(ud.TEST_VID, "muted", "muted")
                } else {
                    Bo(ud.TEST_VID, "muted", "muted")
                }
                return e !== ud.TEST_VID.muted
            } catch (e) {
                return false
            }
        };
        ud.canControlPlaybackRate = function() {
            if (ro && uo && lo < 58) {
                return false
            }
            try {
                var e = ud.TEST_VID.playbackRate;
                ud.TEST_VID.playbackRate = e / 2 + .1;
                return e !== ud.TEST_VID.playbackRate
            } catch (e) {
                return false
            }
        };
        ud.canOverrideAttributes = function() {
            try {
                var e = function e() {};
                Object.defineProperty(W.createElement("video"), "src", {
                    get: e,
                    set: e
                });
                Object.defineProperty(W.createElement("audio"), "src", {
                    get: e,
                    set: e
                });
                Object.defineProperty(W.createElement("video"), "innerHTML", {
                    get: e,
                    set: e
                });
                Object.defineProperty(W.createElement("audio"), "innerHTML", {
                    get: e,
                    set: e
                })
            } catch (e) {
                return false
            }
            return true
        };
        ud.supportsNativeTextTracks = function() {
            return yo || go && uo
        };
        ud.supportsNativeVideoTracks = function() {
            return !!(ud.TEST_VID && ud.TEST_VID.videoTracks)
        };
        ud.supportsNativeAudioTracks = function() {
            return !!(ud.TEST_VID && ud.TEST_VID.audioTracks)
        };
        ud.Events = ["loadstart", "suspend", "abort", "error", "emptied", "stalled", "loadedmetadata", "loadeddata", "canplay", "canplaythrough", "playing", "waiting", "seeking", "seeked", "ended", "durationchange", "timeupdate", "progress", "play", "pause", "ratechange", "resize", "volumechange"];
        [
            ["featuresMuteControl", "canMuteVolume"],
            ["featuresPlaybackRate", "canControlPlaybackRate"],
            ["featuresSourceset", "canOverrideAttributes"],
            ["featuresNativeTextTracks", "supportsNativeTextTracks"],
            ["featuresNativeVideoTracks", "supportsNativeVideoTracks"],
            ["featuresNativeAudioTracks", "supportsNativeAudioTracks"]
        ].forEach((function(e) {
            var t = e[0],
                i = e[1];
            od(ud.prototype, t, (function() {
                return ud[i]()
            }), true)
        }));
        ud.prototype.featuresVolumeControl = ud.canControlVolume();
        ud.prototype.movingMediaElementInDOM = !go;
        ud.prototype.featuresFullscreenResize = true;
        ud.prototype.featuresProgressEvents = true;
        ud.prototype.featuresTimeupdateEvents = true;
        ud.prototype.featuresVideoFrameCallback = !!(ud.TEST_VID && ud.TEST_VID.requestVideoFrameCallback);
        var ld;
        ud.patchCanPlayType = function() {
            if (no >= 4 && !so && !uo) {
                ld = ud.TEST_VID && ud.TEST_VID.constructor.prototype.canPlayType;
                ud.TEST_VID.constructor.prototype.canPlayType = function(e) {
                    var t = /^application\/(?:x-|vnd\.apple\.)mpegurl/i;
                    if (e && t.test(e)) {
                        return "maybe"
                    }
                    return ld.call(this, e)
                }
            }
        };
        ud.unpatchCanPlayType = function() {
            var e = ud.TEST_VID.constructor.prototype.canPlayType;
            if (ld) {
                ud.TEST_VID.constructor.prototype.canPlayType = ld
            }
            return e
        };
        ud.patchCanPlayType();
        ud.disposeMediaElement = function(e) {
            if (!e) {
                return
            }
            if (e.parentNode) {
                e.parentNode.removeChild(e)
            }
            while (e.hasChildNodes()) {
                e.removeChild(e.firstChild)
            }
            e.removeAttribute("src");
            if (typeof e.load === "function") {
                (function() {
                    try {
                        e.load()
                    } catch (e) {}
                })()
            }
        };
        ud.resetMediaElement = function(e) {
            if (!e) {
                return
            }
            var t = e.querySelectorAll("source");
            var i = t.length;
            while (i--) {
                e.removeChild(t[i])
            }
            e.removeAttribute("src");
            if (typeof e.load === "function") {
                (function() {
                    try {
                        e.load()
                    } catch (e) {}
                })()
            }
        };
        ["muted", "defaultMuted", "autoplay", "controls", "loop", "playsinline"].forEach((function(e) {
            ud.prototype[e] = function() {
                return this.el_[e] || this.el_.hasAttribute(e)
            }
        }));
        ["muted", "defaultMuted", "autoplay", "loop", "playsinline"].forEach((function(e) {
            ud.prototype["set" + Vu(e)] = function(t) {
                this.el_[e] = t;
                if (t) {
                    this.el_.setAttribute(e, e)
                } else {
                    this.el_.removeAttribute(e)
                }
            }
        }));
        ["paused", "currentTime", "buffered", "volume", "poster", "preload", "error", "seeking", "seekable", "ended", "playbackRate", "defaultPlaybackRate", "disablePictureInPicture", "played", "networkState", "readyState", "videoWidth", "videoHeight", "crossOrigin"].forEach((function(e) {
            ud.prototype[e] = function() {
                return this.el_[e]
            }
        }));
        ["volume", "src", "poster", "preload", "playbackRate", "defaultPlaybackRate", "disablePictureInPicture", "crossOrigin"].forEach((function(e) {
            ud.prototype["set" + Vu(e)] = function(t) {
                this.el_[e] = t
            }
        }));
        ["pause", "load", "play"].forEach((function(e) {
            ud.prototype[e] = function() {
                return this.el_[e]()
            }
        }));
        Gl.withSourceHandlers(ud);
        ud.nativeSourceHandler = {};
        ud.nativeSourceHandler.canPlayType = function(e) {
            try {
                return ud.TEST_VID.canPlayType(e)
            } catch (e) {
                return ""
            }
        };
        ud.nativeSourceHandler.canHandleSource = function(e, t) {
            if (e.type) {
                return ud.nativeSourceHandler.canPlayType(e.type)
            } else if (e.src) {
                var i = Al(e.src);
                return ud.nativeSourceHandler.canPlayType("video/" + i)
            }
            return ""
        };
        ud.nativeSourceHandler.handleSource = function(e, t, i) {
            t.setSrc(e.src)
        };
        ud.nativeSourceHandler.dispose = function() {};
        ud.registerSourceHandler(ud.nativeSourceHandler);
        Gl.registerTech("Html5", ud);
        var cd = ["progress", "abort", "suspend", "emptied", "stalled", "loadedmetadata", "loadeddata", "timeupdate", "resize", "volumechange", "texttrackchange"];
        var fd = {
            canplay: "CanPlay",
            canplaythrough: "CanPlayThrough",
            playing: "Playing",
            seeked: "Seeked"
        };
        var dd = ["tiny", "xsmall", "small", "medium", "large", "xlarge", "huge"];
        var hd = {};
        dd.forEach((function(e) {
            var t = e.charAt(0) === "x" ? "x-" + e.substring(1) : e;
            hd[e] = "vjs-layout-" + t
        }));
        var pd = {
            tiny: 210,
            xsmall: 320,
            small: 425,
            medium: 768,
            large: 1440,
            xlarge: 2560,
            huge: Infinity
        };
        var md = function(e) {
            J(t, e);

            function t(i, r, n) {
                var a;
                i.id = i.id || r.id || "vjs_video_" + uu();
                r = Ks(t.getTagSettings(i), r);
                r.initChildren = false;
                r.createEl = false;
                r.evented = false;
                r.reportTouchActivity = false;
                if (!r.language) {
                    if (typeof i.closest === "function") {
                        var s = i.closest("[lang]");
                        if (s && s.getAttribute) {
                            r.language = s.getAttribute("lang")
                        }
                    } else {
                        var o = i;
                        while (o && o.nodeType === 1) {
                            if (Ro(o).hasOwnProperty("lang")) {
                                r.language = o.getAttribute("lang");
                                break
                            }
                            o = o.parentNode
                        }
                    }
                }
                a = e.call(this, null, r, n) || this;
                a.boundDocumentFullscreenChange_ = function(e) {
                    return a.documentFullscreenChange_(e)
                };
                a.boundFullWindowOnEscKey_ = function(e) {
                    return a.fullWindowOnEscKey(e)
                };
                a.boundUpdateStyleEl_ = function(e) {
                    return a.updateStyleEl_(e)
                };
                a.boundApplyInitTime_ = function(e) {
                    return a.applyInitTime_(e)
                };
                a.boundUpdateCurrentBreakpoint_ = function(e) {
                    return a.updateCurrentBreakpoint_(e)
                };
                a.boundHandleTechClick_ = function(e) {
                    return a.handleTechClick_(e)
                };
                a.boundHandleTechDoubleClick_ = function(e) {
                    return a.handleTechDoubleClick_(e)
                };
                a.boundHandleTechTouchStart_ = function(e) {
                    return a.handleTechTouchStart_(e)
                };
                a.boundHandleTechTouchMove_ = function(e) {
                    return a.handleTechTouchMove_(e)
                };
                a.boundHandleTechTouchEnd_ = function(e) {
                    return a.handleTechTouchEnd_(e)
                };
                a.boundHandleTechTap_ = function(e) {
                    return a.handleTechTap_(e)
                };
                a.isFullscreen_ = false;
                a.log = Vs(a.id_);
                a.fsApi_ = Ls;
                a.isPosterFromTech_ = false;
                a.queuedCallbacks_ = [];
                a.isReady_ = false;
                a.hasStarted_ = false;
                a.userActive_ = false;
                a.debugEnabled_ = false;
                a.audioOnlyMode_ = false;
                a.audioPosterMode_ = false;
                a.audioOnlyCache_ = {
                    playerHeight: null,
                    hiddenChildren: []
                };
                if (!a.options_ || !a.options_.techOrder || !a.options_.techOrder.length) {
                    throw new Error("No techOrder specified. Did you overwrite " + "videojs.options instead of just changing the " + "properties you want to override?")
                }
                a.tag = i;
                a.tagAttributes = i && Ro(i);
                a.language(a.options_.language);
                if (r.languages) {
                    var u = {};
                    Object.getOwnPropertyNames(r.languages).forEach((function(e) {
                        u[e.toLowerCase()] = r.languages[e]
                    }));
                    a.languages_ = u
                } else {
                    a.languages_ = t.prototype.options_.languages
                }
                a.resetCache_();
                a.poster_ = r.poster || "";
                a.controls_ = !!r.controls;
                i.controls = false;
                i.removeAttribute("controls");
                a.changingSrc_ = false;
                a.playCallbacks_ = [];
                a.playTerminatedQueue_ = [];
                if (i.hasAttribute("autoplay")) {
                    a.autoplay(true)
                } else {
                    a.autoplay(a.options_.autoplay)
                }
                if (r.plugins) {
                    Object.keys(r.plugins).forEach((function(e) {
                        if (typeof a[e] !== "function") {
                            throw new Error('plugin "' + e + '" does not exist')
                        }
                    }))
                }
                a.scrubbing_ = false;
                a.el_ = a.createEl();
                Fu(Y(a), {
                    eventBusKey: "el_"
                });
                if (a.fsApi_.requestFullscreen) {
                    gu(W, a.fsApi_.fullscreenchange, a.boundDocumentFullscreenChange_);
                    a.on(a.fsApi_.fullscreenchange, a.boundDocumentFullscreenChange_)
                }
                if (a.fluid_) {
                    a.on(["playerreset", "resize"], a.boundUpdateStyleEl_)
                }
                var l = Gu(a.options_);
                if (r.plugins) {
                    Object.keys(r.plugins).forEach((function(e) {
                        a[e](r.plugins[e])
                    }))
                }
                if (r.debug) {
                    a.debug(true)
                }
                a.options_.playerOptions = l;
                a.middleware_ = [];
                a.playbackRates(r.playbackRates);
                a.initChildren();
                a.isAudio(i.nodeName.toLowerCase() === "audio");
                if (a.controls()) {
                    a.addClass("vjs-controls-enabled")
                } else {
                    a.addClass("vjs-controls-disabled")
                }
                a.el_.setAttribute("role", "region");
                if (a.isAudio()) {
                    a.el_.setAttribute("aria-label", a.localize("Audio Player"))
                } else {
                    a.el_.setAttribute("aria-label", a.localize("Video Player"))
                }
                if (a.isAudio()) {
                    a.addClass("vjs-audio")
                }
                if (a.flexNotSupported_()) {
                    a.addClass("vjs-no-flex")
                }
                if (po) {
                    a.addClass("vjs-touch-enabled")
                }
                if (!go) {
                    a.addClass("vjs-workinghover")
                }
                t.players[a.id_] = Y(a);
                var c = Is.split(".")[0];
                a.addClass("vjs-v" + c);
                a.userActive(true);
                a.reportUserActivity();
                a.one("play", (function(e) {
                    return a.listenForUserActivity_(e)
                }));
                a.on("stageclick", (function(e) {
                    return a.handleStageClick_(e)
                }));
                a.on("keydown", (function(e) {
                    return a.handleKeyDown(e)
                }));
                a.on("languagechange", (function(e) {
                    return a.handleLanguagechange(e)
                }));
                a.breakpoints(a.options_.breakpoints);
                a.responsive(a.options_.responsive);
                a.on("ready", (function() {
                    a.audioPosterMode(a.options_.audioPosterMode);
                    a.audioOnlyMode(a.options_.audioOnlyMode)
                }));
                return a
            }
            var i = t.prototype;
            i.dispose = function i() {
                var r = this;
                this.trigger("dispose");
                this.off("dispose");
                yu(W, this.fsApi_.fullscreenchange, this.boundDocumentFullscreenChange_);
                yu(W, "keydown", this.boundFullWindowOnEscKey_);
                if (this.styleEl_ && this.styleEl_.parentNode) {
                    this.styleEl_.parentNode.removeChild(this.styleEl_);
                    this.styleEl_ = null
                }
                t.players[this.id_] = null;
                if (this.tag && this.tag.player) {
                    this.tag.player = null
                }
                if (this.el_ && this.el_.player) {
                    this.el_.player = null
                }
                if (this.tech_) {
                    this.tech_.dispose();
                    this.isPosterFromTech_ = false;
                    this.poster_ = ""
                }
                if (this.playerElIngest_) {
                    this.playerElIngest_ = null
                }
                if (this.tag) {
                    this.tag = null
                }
                sc(this);
                Vl.names.forEach((function(e) {
                    var t = Vl[e];
                    var i = r[t.getterName]();
                    if (i && i.off) {
                        i.off()
                    }
                }));
                e.prototype.dispose.call(this, {
                    restoreEl: this.options_.restoreEl
                })
            };
            i.createEl = function t() {
                var i = this.tag;
                var r;
                var n = this.playerElIngest_ = i.parentNode && i.parentNode.hasAttribute && i.parentNode.hasAttribute("data-vjs-player");
                var a = this.tag.tagName.toLowerCase() === "video-js";
                if (n) {
                    r = this.el_ = i.parentNode
                } else if (!a) {
                    r = this.el_ = e.prototype.createEl.call(this, "div")
                }
                var o = Ro(i);
                if (a) {
                    r = this.el_ = i;
                    i = this.tag = W.createElement("video");
                    while (r.children.length) {
                        i.appendChild(r.firstChild)
                    }
                    if (!Po(r, "video-js")) {
                        Oo(r, "video-js")
                    }
                    r.appendChild(i);
                    n = this.playerElIngest_ = r;
                    Object.keys(r).forEach((function(e) {
                        try {
                            i[e] = r[e]
                        } catch (e) {}
                    }))
                }
                i.setAttribute("tabindex", "-1");
                o.tabindex = "-1";
                if (co || uo && ho) {
                    i.setAttribute("role", "application");
                    o.role = "application"
                }
                i.removeAttribute("width");
                i.removeAttribute("height");
                if ("width" in o) {
                    delete o.width
                }
                if ("height" in o) {
                    delete o.height
                }
                Object.getOwnPropertyNames(o).forEach((function(e) {
                    if (!(a && e === "class")) {
                        r.setAttribute(e, o[e])
                    }
                    if (a) {
                        i.setAttribute(e, o[e])
                    }
                }));
                i.playerId = i.id;
                i.id += "_html5_api";
                i.className = "vjs-tech";
                i.player = r.player = this;
                this.addClass("vjs-paused");
                if (s.VIDEOJS_NO_DYNAMIC_STYLE !== true) {
                    this.styleEl_ = nu("vjs-styles-dimensions");
                    var u = $o(".vjs-styles-defaults");
                    var l = $o("head");
                    l.insertBefore(this.styleEl_, u ? u.nextSibling : l.firstChild)
                }
                this.fill_ = false;
                this.fluid_ = false;
                this.width(this.options_.width);
                this.height(this.options_.height);
                this.fill(this.options_.fill);
                this.fluid(this.options_.fluid);
                this.aspectRatio(this.options_.aspectRatio);
                this.crossOrigin(this.options_.crossOrigin || this.options_.crossorigin);
                var c = i.getElementsByTagName("a");
                for (var f = 0; f < c.length; f++) {
                    var d = c.item(f);
                    Oo(d, "vjs-hidden");
                    d.setAttribute("hidden", "hidden")
                }
                i.initNetworkState_ = i.networkState;
                if (i.parentNode && !n) {
                    i.parentNode.insertBefore(r, i)
                }
                xo(i, r);
                this.children_.unshift(i);
                this.el_.setAttribute("lang", this.language_);
                this.el_.setAttribute("translate", "no");
                this.el_ = r;
                return r
            };
            i.crossOrigin = function e(t) {
                if (!t) {
                    return this.techGet_("crossOrigin")
                }
                if (t !== "anonymous" && t !== "use-credentials") {
                    qs.warn('crossOrigin must be "anonymous" or "use-credentials", given "' + t + '"');
                    return
                }
                this.techCall_("setCrossOrigin", t);
                return
            };
            i.width = function e(t) {
                return this.dimension("width", t)
            };
            i.height = function e(t) {
                return this.dimension("height", t)
            };
            i.dimension = function e(t, i) {
                var r = t + "_";
                if (i === undefined) {
                    return this[r] || 0
                }
                if (i === "" || i === "auto") {
                    this[r] = undefined;
                    this.updateStyleEl_();
                    return
                }
                var n = parseFloat(i);
                if (isNaN(n)) {
                    qs.error('Improper value "' + i + '" supplied for for ' + t);
                    return
                }
                this[r] = n;
                this.updateStyleEl_()
            };
            i.fluid = function e(t) {
                var i = this;
                if (t === undefined) {
                    return !!this.fluid_
                }
                this.fluid_ = !!t;
                if (Pu(this)) {
                    this.off(["playerreset", "resize"], this.boundUpdateStyleEl_)
                }
                if (t) {
                    this.addClass("vjs-fluid");
                    this.fill(false);
                    Ou(this, (function() {
                        i.on(["playerreset", "resize"], i.boundUpdateStyleEl_)
                    }))
                } else {
                    this.removeClass("vjs-fluid")
                }
                this.updateStyleEl_()
            };
            i.fill = function e(t) {
                if (t === undefined) {
                    return !!this.fill_
                }
                this.fill_ = !!t;
                if (t) {
                    this.addClass("vjs-fill");
                    this.fluid(false)
                } else {
                    this.removeClass("vjs-fill")
                }
            };
            i.aspectRatio = function e(t) {
                if (t === undefined) {
                    return this.aspectRatio_
                }
                if (!/^\d+\:\d+$/.test(t)) {
                    throw new Error("Improper value supplied for aspect ratio. The format should be width:height, for example 16:9.")
                }
                this.aspectRatio_ = t;
                this.fluid(true);
                this.updateStyleEl_()
            };
            i.updateStyleEl_ = function e() {
                if (s.VIDEOJS_NO_DYNAMIC_STYLE === true) {
                    var t = typeof this.width_ === "number" ? this.width_ : this.options_.width;
                    var i = typeof this.height_ === "number" ? this.height_ : this.options_.height;
                    var r = this.tech_ && this.tech_.el();
                    if (r) {
                        if (t >= 0) {
                            r.width = t
                        }
                        if (i >= 0) {
                            r.height = i
                        }
                    }
                    return
                }
                var n;
                var a;
                var o;
                var u;
                if (this.aspectRatio_ !== undefined && this.aspectRatio_ !== "auto") {
                    o = this.aspectRatio_
                } else if (this.videoWidth() > 0) {
                    o = this.videoWidth() + ":" + this.videoHeight()
                } else {
                    o = "16:9"
                }
                var l = o.split(":");
                var c = l[1] / l[0];
                if (this.width_ !== undefined) {
                    n = this.width_
                } else if (this.height_ !== undefined) {
                    n = this.height_ / c
                } else {
                    n = this.videoWidth() || 300
                }
                if (this.height_ !== undefined) {
                    a = this.height_
                } else {
                    a = n * c
                }
                if (/^[^a-zA-Z]/.test(this.id())) {
                    u = "dimensions-" + this.id()
                } else {
                    u = this.id() + "-dimensions"
                }
                this.addClass(u);
                au(this.styleEl_, "\n      ." + u + " {\n        width: " + n + "px;\n        height: " + a + "px;\n      }\n\n      ." + u + ".vjs-fluid:not(.vjs-audio-only-mode) {\n        padding-top: " + c * 100 + "%;\n      }\n    ")
            };
            i.loadTech_ = function e(t, i) {
                var r = this;
                if (this.tech_) {
                    this.unloadTech_()
                }
                var n = Vu(t);
                var a = t.charAt(0).toLowerCase() + t.slice(1);
                if (n !== "Html5" && this.tag) {
                    Gl.getTech("Html5").disposeMediaElement(this.tag);
                    this.tag.player = null;
                    this.tag = null
                }
                this.techName_ = n;
                this.isReady_ = false;
                var s = this.autoplay();
                if (typeof this.autoplay() === "string" || this.autoplay() === true && this.options_.normalizeAutoplay) {
                    s = false
                }
                var o = {
                    source: i,
                    autoplay: s,
                    nativeControlsForTouch: this.options_.nativeControlsForTouch,
                    playerId: this.id(),
                    techId: this.id() + "_" + a + "_api",
                    playsinline: this.options_.playsinline,
                    preload: this.options_.preload,
                    loop: this.options_.loop,
                    disablePictureInPicture: this.options_.disablePictureInPicture,
                    muted: this.options_.muted,
                    poster: this.poster(),
                    language: this.language(),
                    playerElIngest: this.playerElIngest_ || false,
                    "vtt.js": this.options_["vtt.js"],
                    canOverridePoster: !!this.options_.techCanOverridePoster,
                    enableSourceset: this.options_.enableSourceset,
                    Promise: this.options_.Promise
                };
                Vl.names.forEach((function(e) {
                    var t = Vl[e];
                    o[t.getterName] = r[t.privateName]
                }));
                Ks(o, this.options_[n]);
                Ks(o, this.options_[a]);
                Ks(o, this.options_[t.toLowerCase()]);
                if (this.tag) {
                    o.tag = this.tag
                }
                if (i && i.src === this.cache_.src && this.cache_.currentTime > 0) {
                    o.startTime = this.cache_.currentTime
                }
                var u = Gl.getTech(t);
                if (!u) {
                    throw new Error("No Tech named '" + n + "' exists! '" + n + "' should be registered using videojs.registerTech()'")
                }
                this.tech_ = new u(o);
                this.tech_.ready(wu(this, this.handleTechReady_), true);
                ll.jsonToTextTracks(this.textTracksJson_ || [], this.tech_);
                cd.forEach((function(e) {
                    r.on(r.tech_, e, (function(t) {
                        return r["handleTech" + Vu(e) + "_"](t)
                    }))
                }));
                Object.keys(fd).forEach((function(e) {
                    r.on(r.tech_, e, (function(t) {
                        if (r.tech_.playbackRate() === 0 && r.tech_.seeking()) {
                            r.queuedCallbacks_.push({
                                callback: r["handleTech" + fd[e] + "_"].bind(r),
                                event: t
                            });
                            return
                        }
                        r["handleTech" + fd[e] + "_"](t)
                    }))
                }));
                this.on(this.tech_, "loadstart", (function(e) {
                    return r.handleTechLoadStart_(e)
                }));
                this.on(this.tech_, "sourceset", (function(e) {
                    return r.handleTechSourceset_(e)
                }));
                this.on(this.tech_, "waiting", (function(e) {
                    return r.handleTechWaiting_(e)
                }));
                this.on(this.tech_, "ended", (function(e) {
                    return r.handleTechEnded_(e)
                }));
                this.on(this.tech_, "seeking", (function(e) {
                    return r.handleTechSeeking_(e)
                }));
                this.on(this.tech_, "play", (function(e) {
                    return r.handleTechPlay_(e)
                }));
                this.on(this.tech_, "firstplay", (function(e) {
                    return r.handleTechFirstPlay_(e)
                }));
                this.on(this.tech_, "pause", (function(e) {
                    return r.handleTechPause_(e)
                }));
                this.on(this.tech_, "durationchange", (function(e) {
                    return r.handleTechDurationChange_(e)
                }));
                this.on(this.tech_, "fullscreenchange", (function(e, t) {
                    return r.handleTechFullscreenChange_(e, t)
                }));
                this.on(this.tech_, "fullscreenerror", (function(e, t) {
                    return r.handleTechFullscreenError_(e, t)
                }));
                this.on(this.tech_, "enterpictureinpicture", (function(e) {
                    return r.handleTechEnterPictureInPicture_(e)
                }));
                this.on(this.tech_, "leavepictureinpicture", (function(e) {
                    return r.handleTechLeavePictureInPicture_(e)
                }));
                this.on(this.tech_, "error", (function(e) {
                    return r.handleTechError_(e)
                }));
                this.on(this.tech_, "posterchange", (function(e) {
                    return r.handleTechPosterChange_(e)
                }));
                this.on(this.tech_, "textdata", (function(e) {
                    return r.handleTechTextData_(e)
                }));
                this.on(this.tech_, "ratechange", (function(e) {
                    return r.handleTechRateChange_(e)
                }));
                this.on(this.tech_, "loadedmetadata", this.boundUpdateStyleEl_);
                this.usingNativeControls(this.techGet_("controls"));
                if (this.controls() && !this.usingNativeControls()) {
                    this.addTechControlsListeners_()
                }
                if (this.tech_.el().parentNode !== this.el() && (n !== "Html5" || !this.tag)) {
                    xo(this.tech_.el(), this.el())
                }
                if (this.tag) {
                    this.tag.player = null;
                    this.tag = null
                }
            };
            i.unloadTech_ = function e() {
                var t = this;
                Vl.names.forEach((function(e) {
                    var i = Vl[e];
                    t[i.privateName] = t[i.getterName]()
                }));
                this.textTracksJson_ = ll.textTracksToJson(this.tech_);
                this.isReady_ = false;
                this.tech_.dispose();
                this.tech_ = false;
                if (this.isPosterFromTech_) {
                    this.poster_ = "";
                    this.trigger("posterchange")
                }
                this.isPosterFromTech_ = false
            };
            i.tech = function e(t) {
                if (t === undefined) {
                    qs.warn("Using the tech directly can be dangerous. I hope you know what you're doing.\n" + "See https://github.com/videojs/video.js/issues/2617 for more info.\n")
                }
                return this.tech_
            };
            i.addTechControlsListeners_ = function e() {
                this.removeTechControlsListeners_();
                this.on(this.tech_, "click", this.boundHandleTechClick_);
                this.on(this.tech_, "dblclick", this.boundHandleTechDoubleClick_);
                this.on(this.tech_, "touchstart", this.boundHandleTechTouchStart_);
                this.on(this.tech_, "touchmove", this.boundHandleTechTouchMove_);
                this.on(this.tech_, "touchend", this.boundHandleTechTouchEnd_);
                this.on(this.tech_, "tap", this.boundHandleTechTap_)
            };
            i.removeTechControlsListeners_ = function e() {
                this.off(this.tech_, "tap", this.boundHandleTechTap_);
                this.off(this.tech_, "touchstart", this.boundHandleTechTouchStart_);
                this.off(this.tech_, "touchmove", this.boundHandleTechTouchMove_);
                this.off(this.tech_, "touchend", this.boundHandleTechTouchEnd_);
                this.off(this.tech_, "click", this.boundHandleTechClick_);
                this.off(this.tech_, "dblclick", this.boundHandleTechDoubleClick_)
            };
            i.handleTechReady_ = function e() {
                this.triggerReady();
                if (this.cache_.volume) {
                    this.techCall_("setVolume", this.cache_.volume)
                }
                this.handleTechPosterChange_();
                this.handleTechDurationChange_()
            };
            i.handleTechLoadStart_ = function e() {
                this.removeClass("vjs-ended");
                this.removeClass("vjs-seeking");
                this.error(null);
                this.handleTechDurationChange_();
                if (!this.paused()) {
                    this.trigger("loadstart");
                    this.trigger("firstplay")
                } else {
                    this.hasStarted(false);
                    this.trigger("loadstart")
                }
                this.manualAutoplay_(this.autoplay() === true && this.options_.normalizeAutoplay ? "play" : this.autoplay())
            };
            i.manualAutoplay_ = function e(t) {
                var i = this;
                if (!this.tech_ || typeof t !== "string") {
                    return
                }
                var r = function e() {
                    var t = i.muted();
                    i.muted(true);
                    var r = function e() {
                        i.muted(t)
                    };
                    i.playTerminatedQueue_.push(r);
                    var n = i.play();
                    if (!nl(n)) {
                        return
                    }
                    return n["catch"]((function(e) {
                        r();
                        throw new Error("Rejection at manualAutoplay. Restoring muted value. " + (e ? e : ""))
                    }))
                };
                var n;
                if (t === "any" && !this.muted()) {
                    n = this.play();
                    if (nl(n)) {
                        n = n["catch"](r)
                    }
                } else if (t === "muted" && !this.muted()) {
                    n = r()
                } else {
                    n = this.play()
                }
                if (!nl(n)) {
                    return
                }
                return n.then((function() {
                    i.trigger({
                        type: "autoplay-success",
                        autoplay: t
                    })
                }))["catch"]((function() {
                    i.trigger({
                        type: "autoplay-failure",
                        autoplay: t
                    })
                }))
            };
            i.updateSourceCaches_ = function e(t) {
                if (t === void 0) {
                    t = ""
                }
                var i = t;
                var r = "";
                if (typeof i !== "string") {
                    i = t.src;
                    r = t.type
                }
                this.cache_.source = this.cache_.source || {};
                this.cache_.sources = this.cache_.sources || [];
                if (i && !r) {
                    r = fc(this, i)
                }
                this.cache_.source = Gu({}, t, {
                    src: i,
                    type: r
                });
                var n = this.cache_.sources.filter((function(e) {
                    return e.src && e.src === i
                }));
                var a = [];
                var s = this.$$("source");
                var o = [];
                for (var u = 0; u < s.length; u++) {
                    var l = Ro(s[u]);
                    a.push(l);
                    if (l.src && l.src === i) {
                        o.push(l.src)
                    }
                }
                if (o.length && !n.length) {
                    this.cache_.sources = a
                } else if (!n.length) {
                    this.cache_.sources = [this.cache_.source]
                }
                this.cache_.src = i
            };
            i.handleTechSourceset_ = function e(t) {
                var i = this;
                if (!this.changingSrc_) {
                    var r = function e(t) {
                        return i.updateSourceCaches_(t)
                    };
                    var n = this.currentSource().src;
                    var a = t.src;
                    if (n && !/^blob:/.test(n) && /^blob:/.test(a)) {
                        if (!this.lastSource_ || this.lastSource_.tech !== a && this.lastSource_.player !== n) {
                            r = function e() {}
                        }
                    }
                    r(a);
                    if (!t.src) {
                        this.tech_.any(["sourceset", "loadstart"], (function(e) {
                            if (e.type === "sourceset") {
                                return
                            }
                            var t = i.techGet("currentSrc");
                            i.lastSource_.tech = t;
                            i.updateSourceCaches_(t)
                        }))
                    }
                }
                this.lastSource_ = {
                    player: this.currentSource().src,
                    tech: t.src
                };
                this.trigger({
                    src: t.src,
                    type: "sourceset"
                })
            };
            i.hasStarted = function e(t) {
                if (t === undefined) {
                    return this.hasStarted_
                }
                if (t === this.hasStarted_) {
                    return
                }
                this.hasStarted_ = t;
                if (this.hasStarted_) {
                    this.addClass("vjs-has-started");
                    this.trigger("firstplay")
                } else {
                    this.removeClass("vjs-has-started")
                }
            };
            i.handleTechPlay_ = function e() {
                this.removeClass("vjs-ended");
                this.removeClass("vjs-paused");
                this.addClass("vjs-playing");
                this.hasStarted(true);
                this.trigger("play")
            };
            i.handleTechRateChange_ = function e() {
                if (this.tech_.playbackRate() > 0 && this.cache_.lastPlaybackRate === 0) {
                    this.queuedCallbacks_.forEach((function(e) {
                        return e.callback(e.event)
                    }));
                    this.queuedCallbacks_ = []
                }
                this.cache_.lastPlaybackRate = this.tech_.playbackRate();
                this.trigger("ratechange")
            };
            i.handleTechWaiting_ = function e() {
                var t = this;
                this.addClass("vjs-waiting");
                this.trigger("waiting");
                var i = this.currentTime();
                var r = function e() {
                    if (i !== t.currentTime()) {
                        t.removeClass("vjs-waiting");
                        t.off("timeupdate", e)
                    }
                };
                this.on("timeupdate", r)
            };
            i.handleTechCanPlay_ = function e() {
                this.removeClass("vjs-waiting");
                this.trigger("canplay")
            };
            i.handleTechCanPlayThrough_ = function e() {
                this.removeClass("vjs-waiting");
                this.trigger("canplaythrough")
            };
            i.handleTechPlaying_ = function e() {
                this.removeClass("vjs-waiting");
                this.trigger("playing")
            };
            i.handleTechSeeking_ = function e() {
                this.addClass("vjs-seeking");
                this.trigger("seeking")
            };
            i.handleTechSeeked_ = function e() {
                this.removeClass("vjs-seeking");
                this.removeClass("vjs-ended");
                this.trigger("seeked")
            };
            i.handleTechFirstPlay_ = function e() {
                if (this.options_.starttime) {
                    qs.warn("Passing the `starttime` option to the player will be deprecated in 6.0");
                    this.currentTime(this.options_.starttime)
                }
                this.addClass("vjs-has-started");
                this.trigger("firstplay")
            };
            i.handleTechPause_ = function e() {
                this.removeClass("vjs-playing");
                this.addClass("vjs-paused");
                this.trigger("pause")
            };
            i.handleTechEnded_ = function e() {
                this.addClass("vjs-ended");
                this.removeClass("vjs-waiting");
                if (this.options_.loop) {
                    this.currentTime(0);
                    this.play()
                } else if (!this.paused()) {
                    this.pause()
                }
                this.trigger("ended")
            };
            i.handleTechDurationChange_ = function e() {
                this.duration(this.techGet_("duration"))
            };
            i.handleTechClick_ = function e(t) {
                if (!this.controls_) {
                    return
                }
                if (this.options_ === undefined || this.options_.userActions === undefined || this.options_.userActions.click === undefined || this.options_.userActions.click !== false) {
                    if (this.options_ !== undefined && this.options_.userActions !== undefined && typeof this.options_.userActions.click === "function") {
                        this.options_.userActions.click.call(this, t)
                    } else if (this.paused()) {
                        al(this.play())
                    } else {
                        this.pause()
                    }
                }
            };
            i.handleTechDoubleClick_ = function e(t) {
                if (!this.controls_) {
                    return
                }
                var i = Array.prototype.some.call(this.$$(".vjs-control-bar, .vjs-modal-dialog"), (function(e) {
                    return e.contains(t.target)
                }));
                if (!i) {
                    if (this.options_ === undefined || this.options_.userActions === undefined || this.options_.userActions.doubleClick === undefined || this.options_.userActions.doubleClick !== false) {
                        if (this.options_ !== undefined && this.options_.userActions !== undefined && typeof this.options_.userActions.doubleClick === "function") {
                            this.options_.userActions.doubleClick.call(this, t)
                        } else if (this.isFullscreen()) {
                            this.exitFullscreen()
                        } else {
                            this.requestFullscreen()
                        }
                    }
                }
            };
            i.handleTechTap_ = function e() {
                this.userActive(!this.userActive())
            };
            i.handleTechTouchStart_ = function e() {
                this.userWasActive = this.userActive()
            };
            i.handleTechTouchMove_ = function e() {
                if (this.userWasActive) {
                    this.reportUserActivity()
                }
            };
            i.handleTechTouchEnd_ = function e(t) {
                if (t.cancelable) {
                    t.preventDefault()
                }
            };
            i.handleStageClick_ = function e() {
                this.reportUserActivity()
            };
            i.toggleFullscreenClass_ = function e() {
                if (this.isFullscreen()) {
                    this.addClass("vjs-fullscreen")
                } else {
                    this.removeClass("vjs-fullscreen")
                }
            };
            i.documentFullscreenChange_ = function e(t) {
                var i = t.target.player;
                if (i && i !== this) {
                    return
                }
                var r = this.el();
                var n = W[this.fsApi_.fullscreenElement] === r;
                if (!n && r.matches) {
                    n = r.matches(":" + this.fsApi_.fullscreen)
                } else if (!n && r.msMatchesSelector) {
                    n = r.msMatchesSelector(":" + this.fsApi_.fullscreen)
                }
                this.isFullscreen(n)
            };
            i.handleTechFullscreenChange_ = function e(t, i) {
                var r = this;
                if (i) {
                    if (i.nativeIOSFullscreen) {
                        this.addClass("vjs-ios-native-fs");
                        this.tech_.one("webkitendfullscreen", (function() {
                            r.removeClass("vjs-ios-native-fs")
                        }))
                    }
                    this.isFullscreen(i.isFullscreen)
                }
            };
            i.handleTechFullscreenError_ = function e(t, i) {
                this.trigger("fullscreenerror", i)
            };
            i.togglePictureInPictureClass_ = function e() {
                if (this.isInPictureInPicture()) {
                    this.addClass("vjs-picture-in-picture")
                } else {
                    this.removeClass("vjs-picture-in-picture")
                }
            };
            i.handleTechEnterPictureInPicture_ = function e(t) {
                this.isInPictureInPicture(true)
            };
            i.handleTechLeavePictureInPicture_ = function e(t) {
                this.isInPictureInPicture(false)
            };
            i.handleTechError_ = function e() {
                var t = this.tech_.error();
                this.error(t)
            };
            i.handleTechTextData_ = function e() {
                var t = null;
                if (arguments.length > 1) {
                    t = arguments[1]
                }
                this.trigger("textdata", t)
            };
            i.getCache = function e() {
                return this.cache_
            };
            i.resetCache_ = function e() {
                this.cache_ = {
                    currentTime: 0,
                    initTime: 0,
                    inactivityTimeout: this.options_.inactivityTimeout,
                    duration: NaN,
                    lastVolume: 1,
                    lastPlaybackRate: this.defaultPlaybackRate(),
                    media: null,
                    src: "",
                    source: {},
                    sources: [],
                    playbackRates: [],
                    volume: 1
                }
            };
            i.techCall_ = function e(t, i) {
                this.ready((function() {
                    if (t in ic) {
                        return Zl(this.middleware_, this.tech_, t, i)
                    } else if (t in rc) {
                        return ec(this.middleware_, this.tech_, t, i)
                    }
                    try {
                        if (this.tech_) {
                            this.tech_[t](i)
                        }
                    } catch (e) {
                        qs(e);
                        throw e
                    }
                }), true)
            };
            i.techGet_ = function e(t) {
                if (!this.tech_ || !this.tech_.isReady_) {
                    return
                }
                if (t in tc) {
                    return Jl(this.middleware_, this.tech_, t)
                } else if (t in rc) {
                    return ec(this.middleware_, this.tech_, t)
                }
                try {
                    return this.tech_[t]()
                } catch (e) {
                    if (this.tech_[t] === undefined) {
                        qs("Video.js: " + t + " method not defined for " + this.techName_ + " playback technology.", e);
                        throw e
                    }
                    if (e.name === "TypeError") {
                        qs("Video.js: " + t + " unavailable on " + this.techName_ + " playback technology element.", e);
                        this.tech_.isReady_ = false;
                        throw e
                    }
                    qs(e);
                    throw e
                }
            };
            i.play = function e() {
                var t = this;
                var i = this.options_.Promise || s.Promise;
                if (i) {
                    return new i((function(e) {
                        t.play_(e)
                    }))
                }
                return this.play_()
            };
            i.play_ = function e(t) {
                var i = this;
                if (t === void 0) {
                    t = al
                }
                this.playCallbacks_.push(t);
                var r = Boolean(!this.changingSrc_ && (this.src() || this.currentSrc()));
                if (this.waitToPlay_) {
                    this.off(["ready", "loadstart"], this.waitToPlay_);
                    this.waitToPlay_ = null
                }
                if (!this.isReady_ || !r) {
                    this.waitToPlay_ = function(e) {
                        i.play_()
                    };
                    this.one(["ready", "loadstart"], this.waitToPlay_);
                    if (!r && (yo || go)) {
                        this.load()
                    }
                    return
                }
                var n = this.techGet_("play");
                if (n === null) {
                    this.runPlayTerminatedQueue_()
                } else {
                    this.runPlayCallbacks_(n)
                }
            };
            i.runPlayTerminatedQueue_ = function e() {
                var t = this.playTerminatedQueue_.slice(0);
                this.playTerminatedQueue_ = [];
                t.forEach((function(e) {
                    e()
                }))
            };
            i.runPlayCallbacks_ = function e(t) {
                var i = this.playCallbacks_.slice(0);
                this.playCallbacks_ = [];
                this.playTerminatedQueue_ = [];
                i.forEach((function(e) {
                    e(t)
                }))
            };
            i.pause = function e() {
                this.techCall_("pause")
            };
            i.paused = function e() {
                return this.techGet_("paused") === false ? false : true
            };
            i.played = function e() {
                return this.techGet_("played") || el(0, 0)
            };
            i.scrubbing = function e(t) {
                if (typeof t === "undefined") {
                    return this.scrubbing_
                }
                this.scrubbing_ = !!t;
                this.techCall_("setScrubbing", this.scrubbing_);
                if (t) {
                    this.addClass("vjs-scrubbing")
                } else {
                    this.removeClass("vjs-scrubbing")
                }
            };
            i.currentTime = function e(t) {
                if (typeof t !== "undefined") {
                    if (t < 0) {
                        t = 0
                    }
                    if (!this.isReady_ || this.changingSrc_ || !this.tech_ || !this.tech_.isReady_) {
                        this.cache_.initTime = t;
                        this.off("canplay", this.boundApplyInitTime_);
                        this.one("canplay", this.boundApplyInitTime_);
                        return
                    }
                    this.techCall_("setCurrentTime", t);
                    this.cache_.initTime = 0;
                    return
                }
                this.cache_.currentTime = this.techGet_("currentTime") || 0;
                return this.cache_.currentTime
            };
            i.applyInitTime_ = function e() {
                this.currentTime(this.cache_.initTime)
            };
            i.duration = function e(t) {
                if (t === undefined) {
                    return this.cache_.duration !== undefined ? this.cache_.duration : NaN
                }
                t = parseFloat(t);
                if (t < 0) {
                    t = Infinity
                }
                if (t !== this.cache_.duration) {
                    this.cache_.duration = t;
                    if (t === Infinity) {
                        this.addClass("vjs-live")
                    } else {
                        this.removeClass("vjs-live")
                    }
                    if (!isNaN(t)) {
                        this.trigger("durationchange")
                    }
                }
            };
            i.remainingTime = function e() {
                return this.duration() - this.currentTime()
            };
            i.remainingTimeDisplay = function e() {
                return Math.floor(this.duration()) - Math.floor(this.currentTime())
            };
            i.buffered = function e() {
                var e = this.techGet_("buffered");
                if (!e || !e.length) {
                    e = el(0, 0)
                }
                return e
            };
            i.bufferedPercent = function e() {
                return tl(this.buffered(), this.duration())
            };
            i.bufferedEnd = function e() {
                var t = this.buffered();
                var i = this.duration();
                var r = t.end(t.length - 1);
                if (r > i) {
                    r = i
                }
                return r
            };
            i.volume = function e(t) {
                var i;
                if (t !== undefined) {
                    i = Math.max(0, Math.min(1, parseFloat(t)));
                    this.cache_.volume = i;
                    this.techCall_("setVolume", i);
                    if (i > 0) {
                        this.lastVolume_(i)
                    }
                    return
                }
                i = parseFloat(this.techGet_("volume"));
                return isNaN(i) ? 1 : i
            };
            i.muted = function e(t) {
                if (t !== undefined) {
                    this.techCall_("setMuted", t);
                    return
                }
                return this.techGet_("muted") || false
            };
            i.defaultMuted = function e(t) {
                if (t !== undefined) {
                    return this.techCall_("setDefaultMuted", t)
                }
                return this.techGet_("defaultMuted") || false
            };
            i.lastVolume_ = function e(t) {
                if (t !== undefined && t !== 0) {
                    this.cache_.lastVolume = t;
                    return
                }
                return this.cache_.lastVolume
            };
            i.supportsFullScreen = function e() {
                return this.techGet_("supportsFullScreen") || false
            };
            i.isFullscreen = function e(t) {
                if (t !== undefined) {
                    var i = this.isFullscreen_;
                    this.isFullscreen_ = Boolean(t);
                    if (this.isFullscreen_ !== i && this.fsApi_.prefixed) {
                        this.trigger("fullscreenchange")
                    }
                    this.toggleFullscreenClass_();
                    return
                }
                return this.isFullscreen_
            };
            i.requestFullscreen = function e(t) {
                var i = this.options_.Promise || s.Promise;
                if (i) {
                    var r = this;
                    return new i((function(e, i) {
                        function n() {
                            r.off("fullscreenerror", s);
                            r.off("fullscreenchange", a)
                        }

                        function a() {
                            n();
                            e()
                        }

                        function s(e, t) {
                            n();
                            i(t)
                        }
                        r.one("fullscreenchange", a);
                        r.one("fullscreenerror", s);
                        var o = r.requestFullscreenHelper_(t);
                        if (o) {
                            o.then(n, n);
                            o.then(e, i)
                        }
                    }))
                }
                return this.requestFullscreenHelper_()
            };
            i.requestFullscreenHelper_ = function e(t) {
                var i = this;
                var r;
                if (!this.fsApi_.prefixed) {
                    r = this.options_.fullscreen && this.options_.fullscreen.options || {};
                    if (t !== undefined) {
                        r = t
                    }
                }
                if (this.fsApi_.requestFullscreen) {
                    var n = this.el_[this.fsApi_.requestFullscreen](r);
                    if (n) {
                        n.then((function() {
                            return i.isFullscreen(true)
                        }), (function() {
                            return i.isFullscreen(false)
                        }))
                    }
                    return n
                } else if (this.tech_.supportsFullScreen() && !this.options_.preferFullWindow === true) {
                    this.techCall_("enterFullScreen")
                } else {
                    this.enterFullWindow()
                }
            };
            i.exitFullscreen = function e() {
                var t = this.options_.Promise || s.Promise;
                if (t) {
                    var i = this;
                    return new t((function(e, t) {
                        function r() {
                            i.off("fullscreenerror", a);
                            i.off("fullscreenchange", n)
                        }

                        function n() {
                            r();
                            e()
                        }

                        function a(e, i) {
                            r();
                            t(i)
                        }
                        i.one("fullscreenchange", n);
                        i.one("fullscreenerror", a);
                        var s = i.exitFullscreenHelper_();
                        if (s) {
                            s.then(r, r);
                            s.then(e, t)
                        }
                    }))
                }
                return this.exitFullscreenHelper_()
            };
            i.exitFullscreenHelper_ = function e() {
                var t = this;
                if (this.fsApi_.requestFullscreen) {
                    var i = W[this.fsApi_.exitFullscreen]();
                    if (i) {
                        al(i.then((function() {
                            return t.isFullscreen(false)
                        })))
                    }
                    return i
                } else if (this.tech_.supportsFullScreen() && !this.options_.preferFullWindow === true) {
                    this.techCall_("exitFullScreen")
                } else {
                    this.exitFullWindow()
                }
            };
            i.enterFullWindow = function e() {
                this.isFullscreen(true);
                this.isFullWindow = true;
                this.docOrigOverflow = W.documentElement.style.overflow;
                gu(W, "keydown", this.boundFullWindowOnEscKey_);
                W.documentElement.style.overflow = "hidden";
                Oo(W.body, "vjs-full-window");
                this.trigger("enterFullWindow")
            };
            i.fullWindowOnEscKey = function e(t) {
                if (z.isEventKey(t, "Esc")) {
                    if (this.isFullscreen() === true) {
                        if (!this.isFullWindow) {
                            this.exitFullscreen()
                        } else {
                            this.exitFullWindow()
                        }
                    }
                }
            };
            i.exitFullWindow = function e() {
                this.isFullscreen(false);
                this.isFullWindow = false;
                yu(W, "keydown", this.boundFullWindowOnEscKey_);
                W.documentElement.style.overflow = this.docOrigOverflow;
                Do(W.body, "vjs-full-window");
                this.trigger("exitFullWindow")
            };
            i.disablePictureInPicture = function e(t) {
                if (t === undefined) {
                    return this.techGet_("disablePictureInPicture")
                }
                this.techCall_("setDisablePictureInPicture", t);
                this.options_.disablePictureInPicture = t;
                this.trigger("disablepictureinpicturechanged")
            };
            i.isInPictureInPicture = function e(t) {
                if (t !== undefined) {
                    this.isInPictureInPicture_ = !!t;
                    this.togglePictureInPictureClass_();
                    return
                }
                return !!this.isInPictureInPicture_
            };
            i.requestPictureInPicture = function e() {
                if ("pictureInPictureEnabled" in W && this.disablePictureInPicture() === false) {
                    return this.techGet_("requestPictureInPicture")
                }
            };
            i.exitPictureInPicture = function e() {
                if ("pictureInPictureEnabled" in W) {
                    return W.exitPictureInPicture()
                }
            };
            i.handleKeyDown = function e(t) {
                var i = this.options_.userActions;
                if (!i || !i.hotkeys) {
                    return
                }
                var r = function e(t) {
                    var i = t.tagName.toLowerCase();
                    if (t.isContentEditable) {
                        return true
                    }
                    var r = ["button", "checkbox", "hidden", "radio", "reset", "submit"];
                    if (i === "input") {
                        return r.indexOf(t.type) === -1
                    }
                    var n = ["textarea"];
                    return n.indexOf(i) !== -1
                };
                if (r(this.el_.ownerDocument.activeElement)) {
                    return
                }
                if (typeof i.hotkeys === "function") {
                    i.hotkeys.call(this, t)
                } else {
                    this.handleHotkeys(t)
                }
            };
            i.handleHotkeys = function e(t) {
                var i = this.options_.userActions ? this.options_.userActions.hotkeys : {};
                var r = i.fullscreenKey,
                    n = r === void 0 ? function(e) {
                        return z.isEventKey(e, "f")
                    } : r,
                    a = i.muteKey,
                    s = a === void 0 ? function(e) {
                        return z.isEventKey(e, "m")
                    } : a,
                    o = i.playPauseKey,
                    u = o === void 0 ? function(e) {
                        return z.isEventKey(e, "k") || z.isEventKey(e, "Space")
                    } : o;
                if (n.call(this, t)) {
                    t.preventDefault();
                    t.stopPropagation();
                    var l = $u.getComponent("FullscreenToggle");
                    if (W[this.fsApi_.fullscreenEnabled] !== false) {
                        l.prototype.handleClick.call(this, t)
                    }
                } else if (s.call(this, t)) {
                    t.preventDefault();
                    t.stopPropagation();
                    var c = $u.getComponent("MuteToggle");
                    c.prototype.handleClick.call(this, t)
                } else if (u.call(this, t)) {
                    t.preventDefault();
                    t.stopPropagation();
                    var f = $u.getComponent("PlayToggle");
                    f.prototype.handleClick.call(this, t)
                }
            };
            i.canPlayType = function e(t) {
                var i;
                for (var r = 0, n = this.options_.techOrder; r < n.length; r++) {
                    var a = n[r];
                    var s = Gl.getTech(a);
                    if (!s) {
                        s = $u.getComponent(a)
                    }
                    if (!s) {
                        qs.error('The "' + a + '" tech is undefined. Skipped browser support check for that tech.');
                        continue
                    }
                    if (s.isSupported()) {
                        i = s.canPlayType(t);
                        if (i) {
                            return i
                        }
                    }
                }
                return ""
            };
            i.selectSource = function e(t) {
                var i = this;
                var r = this.options_.techOrder.map((function(e) {
                    return [e, Gl.getTech(e)]
                })).filter((function(e) {
                    var t = e[0],
                        i = e[1];
                    if (i) {
                        return i.isSupported()
                    }
                    qs.error('The "' + t + '" tech is undefined. Skipped browser support check for that tech.');
                    return false
                }));
                var n = function e(t, i, r) {
                    var n;
                    t.some((function(e) {
                        return i.some((function(t) {
                            n = r(e, t);
                            if (n) {
                                return true
                            }
                        }))
                    }));
                    return n
                };
                var a;
                var s = function e(t) {
                    return function(e, i) {
                        return t(i, e)
                    }
                };
                var o = function e(t, r) {
                    var n = t[0],
                        a = t[1];
                    if (a.canPlaySource(r, i.options_[n.toLowerCase()])) {
                        return {
                            source: r,
                            tech: n
                        }
                    }
                };
                if (this.options_.sourceOrder) {
                    a = n(t, r, s(o))
                } else {
                    a = n(r, t, o)
                }
                return a || false
            };
            i.handleSrc_ = function e(t, i) {
                var r = this;
                if (typeof t === "undefined") {
                    return this.cache_.src || ""
                }
                if (this.resetRetryOnError_) {
                    this.resetRetryOnError_()
                }
                var n = dc(t);
                if (!n.length) {
                    this.setTimeout((function() {
                        this.error({
                            code: 4,
                            message: this.options_.notSupportedMessage
                        })
                    }), 0);
                    return
                }
                this.changingSrc_ = true;
                if (!i) {
                    this.cache_.sources = n
                }
                this.updateSourceCaches_(n[0]);
                $l(this, n[0], (function(e, t) {
                    r.middleware_ = t;
                    if (!i) {
                        r.cache_.sources = n
                    }
                    r.updateSourceCaches_(e);
                    var a = r.src_(e);
                    if (a) {
                        if (n.length > 1) {
                            return r.handleSrc_(n.slice(1))
                        }
                        r.changingSrc_ = false;
                        r.setTimeout((function() {
                            this.error({
                                code: 4,
                                message: this.options_.notSupportedMessage
                            })
                        }), 0);
                        r.triggerReady();
                        return
                    }
                    Ql(t, r.tech_)
                }));
                if (this.options_.retryOnError && n.length > 1) {
                    var a = function e() {
                        r.error(null);
                        r.handleSrc_(n.slice(1), true)
                    };
                    var s = function e() {
                        r.off("error", a)
                    };
                    this.one("error", a);
                    this.one("playing", s);
                    this.resetRetryOnError_ = function() {
                        r.off("error", a);
                        r.off("playing", s)
                    }
                }
            };
            i.src = function e(t) {
                return this.handleSrc_(t, false)
            };
            i.src_ = function e(t) {
                var i = this;
                var r = this.selectSource([t]);
                if (!r) {
                    return true
                }
                if (!Wu(r.tech, this.techName_)) {
                    this.changingSrc_ = true;
                    this.loadTech_(r.tech, r.source);
                    this.tech_.ready((function() {
                        i.changingSrc_ = false
                    }));
                    return false
                }
                this.ready((function() {
                    if (this.tech_.constructor.prototype.hasOwnProperty("setSource")) {
                        this.techCall_("setSource", t)
                    } else {
                        this.techCall_("src", t.src)
                    }
                    this.changingSrc_ = false
                }), true);
                return false
            };
            i.load = function e() {
                this.techCall_("load")
            };
            i.reset = function e() {
                var t = this;
                var i = this.options_.Promise || s.Promise;
                if (this.paused() || !i) {
                    this.doReset_()
                } else {
                    var r = this.play();
                    al(r.then((function() {
                        return t.doReset_()
                    })))
                }
            };
            i.doReset_ = function e() {
                if (this.tech_) {
                    this.tech_.clearTracks("text")
                }
                this.resetCache_();
                this.poster("");
                this.loadTech_(this.options_.techOrder[0], null);
                this.techCall_("reset");
                this.resetControlBarUI_();
                if (Pu(this)) {
                    this.trigger("playerreset")
                }
            };
            i.resetControlBarUI_ = function e() {
                this.resetProgressBar_();
                this.resetPlaybackRate_();
                this.resetVolumeBar_()
            };
            i.resetProgressBar_ = function e() {
                this.currentTime(0);
                var t = this.controlBar || {},
                    i = t.durationDisplay,
                    r = t.remainingTimeDisplay;
                if (i) {
                    i.updateContent()
                }
                if (r) {
                    r.updateContent()
                }
            };
            i.resetPlaybackRate_ = function e() {
                this.playbackRate(this.defaultPlaybackRate());
                this.handleTechRateChange_()
            };
            i.resetVolumeBar_ = function e() {
                this.volume(1);
                this.trigger("volumechange")
            };
            i.currentSources = function e() {
                var t = this.currentSource();
                var i = [];
                if (Object.keys(t).length !== 0) {
                    i.push(t)
                }
                return this.cache_.sources || i
            };
            i.currentSource = function e() {
                return this.cache_.source || {}
            };
            i.currentSrc = function e() {
                return this.currentSource() && this.currentSource().src || ""
            };
            i.currentType = function e() {
                return this.currentSource() && this.currentSource().type || ""
            };
            i.preload = function e(t) {
                if (t !== undefined) {
                    this.techCall_("setPreload", t);
                    this.options_.preload = t;
                    return
                }
                return this.techGet_("preload")
            };
            i.autoplay = function e(t) {
                if (t === undefined) {
                    return this.options_.autoplay || false
                }
                var i;
                if (typeof t === "string" && /(any|play|muted)/.test(t) || t === true && this.options_.normalizeAutoplay) {
                    this.options_.autoplay = t;
                    this.manualAutoplay_(typeof t === "string" ? t : "play");
                    i = false
                } else if (!t) {
                    this.options_.autoplay = false
                } else {
                    this.options_.autoplay = true
                }
                i = typeof i === "undefined" ? this.options_.autoplay : i;
                if (this.tech_) {
                    this.techCall_("setAutoplay", i)
                }
            };
            i.playsinline = function e(t) {
                if (t !== undefined) {
                    this.techCall_("setPlaysinline", t);
                    this.options_.playsinline = t;
                    return this
                }
                return this.techGet_("playsinline")
            };
            i.loop = function e(t) {
                if (t !== undefined) {
                    this.techCall_("setLoop", t);
                    this.options_.loop = t;
                    return
                }
                return this.techGet_("loop")
            };
            i.poster = function e(t) {
                if (t === undefined) {
                    return this.poster_
                }
                if (!t) {
                    t = ""
                }
                if (t === this.poster_) {
                    return
                }
                this.poster_ = t;
                this.techCall_("setPoster", t);
                this.isPosterFromTech_ = false;
                this.trigger("posterchange")
            };
            i.handleTechPosterChange_ = function e() {
                if ((!this.poster_ || this.options_.techCanOverridePoster) && this.tech_ && this.tech_.poster) {
                    var t = this.tech_.poster() || "";
                    if (t !== this.poster_) {
                        this.poster_ = t;
                        this.isPosterFromTech_ = true;
                        this.trigger("posterchange")
                    }
                }
            };
            i.controls = function e(t) {
                if (t === undefined) {
                    return !!this.controls_
                }
                t = !!t;
                if (this.controls_ === t) {
                    return
                }
                this.controls_ = t;
                if (this.usingNativeControls()) {
                    this.techCall_("setControls", t)
                }
                if (this.controls_) {
                    this.removeClass("vjs-controls-disabled");
                    this.addClass("vjs-controls-enabled");
                    this.trigger("controlsenabled");
                    if (!this.usingNativeControls()) {
                        this.addTechControlsListeners_()
                    }
                } else {
                    this.removeClass("vjs-controls-enabled");
                    this.addClass("vjs-controls-disabled");
                    this.trigger("controlsdisabled");
                    if (!this.usingNativeControls()) {
                        this.removeTechControlsListeners_()
                    }
                }
            };
            i.usingNativeControls = function e(t) {
                if (t === undefined) {
                    return !!this.usingNativeControls_
                }
                t = !!t;
                if (this.usingNativeControls_ === t) {
                    return
                }
                this.usingNativeControls_ = t;
                if (this.usingNativeControls_) {
                    this.addClass("vjs-using-native-controls");
                    this.trigger("usingnativecontrols")
                } else {
                    this.removeClass("vjs-using-native-controls");
                    this.trigger("usingcustomcontrols")
                }
            };
            i.error = function e(t) {
                var i = this;
                if (t === undefined) {
                    return this.error_ || null
                }
                xs("beforeerror").forEach((function(e) {
                    var r = e(i, t);
                    if (!(Ys(r) && !Array.isArray(r) || typeof r === "string" || typeof r === "number" || r === null)) {
                        i.log.error("please return a value that MediaError expects in beforeerror hooks");
                        return
                    }
                    t = r
                }));
                if (this.options_.suppressNotSupportedError && t && t.code === 4) {
                    var r = function e() {
                        this.error(t)
                    };
                    this.options_.suppressNotSupportedError = false;
                    this.any(["click", "touchstart"], r);
                    this.one("loadstart", (function() {
                        this.off(["click", "touchstart"], r)
                    }));
                    return
                }
                if (t === null) {
                    this.error_ = t;
                    this.removeClass("vjs-error");
                    if (this.errorDisplay) {
                        this.errorDisplay.close()
                    }
                    return
                }
                this.error_ = new il(t);
                this.addClass("vjs-error");
                qs.error("(CODE:" + this.error_.code + " " + il.errorTypes[this.error_.code] + ")", this.error_.message, this.error_);
                this.trigger("error");
                xs("error").forEach((function(e) {
                    return e(i, i.error_)
                }));
                return
            };
            i.reportUserActivity = function e(t) {
                this.userActivity_ = true
            };
            i.userActive = function e(t) {
                if (t === undefined) {
                    return this.userActive_
                }
                t = !!t;
                if (t === this.userActive_) {
                    return
                }
                this.userActive_ = t;
                if (this.userActive_) {
                    this.userActivity_ = true;
                    this.removeClass("vjs-user-inactive");
                    this.addClass("vjs-user-active");
                    this.trigger("useractive");
                    return
                }
                if (this.tech_) {
                    this.tech_.one("mousemove", (function(e) {
                        e.stopPropagation();
                        e.preventDefault()
                    }))
                }
                this.userActivity_ = false;
                this.removeClass("vjs-user-active");
                this.addClass("vjs-user-inactive");
                this.trigger("userinactive")
            };
            i.listenForUserActivity_ = function e() {
                var t;
                var i;
                var r;
                var n = wu(this, this.reportUserActivity);
                var a = function e(t) {
                    if (t.screenX !== i || t.screenY !== r) {
                        i = t.screenX;
                        r = t.screenY;
                        n()
                    }
                };
                var s = function e() {
                    n();
                    this.clearInterval(t);
                    t = this.setInterval(n, 250)
                };
                var o = function e(i) {
                    n();
                    this.clearInterval(t)
                };
                this.on("mousedown", s);
                this.on("mousemove", a);
                this.on("mouseup", o);
                this.on("mouseleave", o);
                var u = this.getChild("controlBar");
                if (u && !go && !ro) {
                    u.on("mouseenter", (function(e) {
                        if (this.player().options_.inactivityTimeout !== 0) {
                            this.player().cache_.inactivityTimeout = this.player().options_.inactivityTimeout
                        }
                        this.player().options_.inactivityTimeout = 0
                    }));
                    u.on("mouseleave", (function(e) {
                        this.player().options_.inactivityTimeout = this.player().cache_.inactivityTimeout
                    }))
                }
                this.on("keydown", n);
                this.on("keyup", n);
                var l;
                this.setInterval((function() {
                    if (!this.userActivity_) {
                        return
                    }
                    this.userActivity_ = false;
                    this.userActive(true);
                    this.clearTimeout(l);
                    var e = this.options_.inactivityTimeout;
                    if (e <= 0) {
                        return
                    }
                    l = this.setTimeout((function() {
                        if (!this.userActivity_) {
                            this.userActive(false)
                        }
                    }), e)
                }), 250)
            };
            i.playbackRate = function e(t) {
                if (t !== undefined) {
                    this.techCall_("setPlaybackRate", t);
                    return
                }
                if (this.tech_ && this.tech_.featuresPlaybackRate) {
                    return this.cache_.lastPlaybackRate || this.techGet_("playbackRate")
                }
                return 1
            };
            i.defaultPlaybackRate = function e(t) {
                if (t !== undefined) {
                    return this.techCall_("setDefaultPlaybackRate", t)
                }
                if (this.tech_ && this.tech_.featuresPlaybackRate) {
                    return this.techGet_("defaultPlaybackRate")
                }
                return 1
            };
            i.isAudio = function e(t) {
                if (t !== undefined) {
                    this.isAudio_ = !!t;
                    return
                }
                return !!this.isAudio_
            };
            i.enableAudioOnlyUI_ = function e() {
                var t = this;
                this.addClass("vjs-audio-only-mode");
                var i = this.children();
                var r = this.getChild("ControlBar");
                var n = r && r.currentHeight();
                i.forEach((function(e) {
                    if (e === r) {
                        return
                    }
                    if (e.el_ && !e.hasClass("vjs-hidden")) {
                        e.hide();
                        t.audioOnlyCache_.hiddenChildren.push(e)
                    }
                }));
                this.audioOnlyCache_.playerHeight = this.currentHeight();
                this.height(n);
                this.trigger("audioonlymodechange")
            };
            i.disableAudioOnlyUI_ = function e() {
                this.removeClass("vjs-audio-only-mode");
                this.audioOnlyCache_.hiddenChildren.forEach((function(e) {
                    return e.show()
                }));
                this.height(this.audioOnlyCache_.playerHeight);
                this.trigger("audioonlymodechange")
            };
            i.audioOnlyMode = function e(t) {
                var i = this;
                if (typeof t !== "boolean" || t === this.audioOnlyMode_) {
                    return this.audioOnlyMode_
                }
                this.audioOnlyMode_ = t;
                var r = this.options_.Promise || s.Promise;
                if (r) {
                    if (t) {
                        var n = [];
                        if (this.isInPictureInPicture()) {
                            n.push(this.exitPictureInPicture())
                        }
                        if (this.isFullscreen()) {
                            n.push(this.exitFullscreen())
                        }
                        if (this.audioPosterMode()) {
                            n.push(this.audioPosterMode(false))
                        }
                        return r.all(n).then((function() {
                            return i.enableAudioOnlyUI_()
                        }))
                    }
                    return r.resolve().then((function() {
                        return i.disableAudioOnlyUI_()
                    }))
                }
                if (t) {
                    if (this.isInPictureInPicture()) {
                        this.exitPictureInPicture()
                    }
                    if (this.isFullscreen()) {
                        this.exitFullscreen()
                    }
                    this.enableAudioOnlyUI_()
                } else {
                    this.disableAudioOnlyUI_()
                }
            };
            i.enablePosterModeUI_ = function e() {
                var t = this.tech_ && this.tech_;
                t.hide();
                this.addClass("vjs-audio-poster-mode");
                this.trigger("audiopostermodechange")
            };
            i.disablePosterModeUI_ = function e() {
                var t = this.tech_ && this.tech_;
                t.show();
                this.removeClass("vjs-audio-poster-mode");
                this.trigger("audiopostermodechange")
            };
            i.audioPosterMode = function e(t) {
                var i = this;
                if (typeof t !== "boolean" || t === this.audioPosterMode_) {
                    return this.audioPosterMode_
                }
                this.audioPosterMode_ = t;
                var r = this.options_.Promise || s.Promise;
                if (r) {
                    if (t) {
                        if (this.audioOnlyMode()) {
                            var n = this.audioOnlyMode(false);
                            return n.then((function() {
                                i.enablePosterModeUI_()
                            }))
                        }
                        return r.resolve().then((function() {
                            i.enablePosterModeUI_()
                        }))
                    }
                    return r.resolve().then((function() {
                        i.disablePosterModeUI_()
                    }))
                }
                if (t) {
                    if (this.audioOnlyMode()) {
                        this.audioOnlyMode(false)
                    }
                    this.enablePosterModeUI_();
                    return
                }
                this.disablePosterModeUI_()
            };
            i.addTextTrack = function e(t, i, r) {
                if (this.tech_) {
                    return this.tech_.addTextTrack(t, i, r)
                }
            };
            i.addRemoteTextTrack = function e(t, i) {
                if (this.tech_) {
                    return this.tech_.addRemoteTextTrack(t, i)
                }
            };
            i.removeRemoteTextTrack = function e(t) {
                if (t === void 0) {
                    t = {}
                }
                var i = t,
                    r = i.track;
                if (!r) {
                    r = t
                }
                if (this.tech_) {
                    return this.tech_.removeRemoteTextTrack(r)
                }
            };
            i.getVideoPlaybackQuality = function e() {
                return this.techGet_("getVideoPlaybackQuality")
            };
            i.videoWidth = function e() {
                return this.tech_ && this.tech_.videoWidth && this.tech_.videoWidth() || 0
            };
            i.videoHeight = function e() {
                return this.tech_ && this.tech_.videoHeight && this.tech_.videoHeight() || 0
            };
            i.language = function e(t) {
                if (t === undefined) {
                    return this.language_
                }
                if (this.language_ !== String(t).toLowerCase()) {
                    this.language_ = String(t).toLowerCase();
                    if (Pu(this)) {
                        this.trigger("languagechange")
                    }
                }
            };
            i.languages = function e() {
                return Gu(t.prototype.options_.languages, this.languages_)
            };
            i.toJSON = function e() {
                var t = Gu(this.options_);
                var i = t.tracks;
                t.tracks = [];
                for (var r = 0; r < i.length; r++) {
                    var n = i[r];
                    n = Gu(n);
                    n.player = undefined;
                    t.tracks[r] = n
                }
                return t
            };
            i.createModal = function e(t, i) {
                var r = this;
                i = i || {};
                i.content = t || "";
                var n = new fl(this, i);
                this.addChild(n);
                n.on("dispose", (function() {
                    r.removeChild(n)
                }));
                n.open();
                return n
            };
            i.updateCurrentBreakpoint_ = function e() {
                if (!this.responsive()) {
                    return
                }
                var t = this.currentBreakpoint();
                var i = this.currentWidth();
                for (var r = 0; r < dd.length; r++) {
                    var n = dd[r];
                    var a = this.breakpoints_[n];
                    if (i <= a) {
                        if (t === n) {
                            return
                        }
                        if (t) {
                            this.removeClass(hd[t])
                        }
                        this.addClass(hd[n]);
                        this.breakpoint_ = n;
                        break
                    }
                }
            };
            i.removeCurrentBreakpoint_ = function e() {
                var t = this.currentBreakpointClass();
                this.breakpoint_ = "";
                if (t) {
                    this.removeClass(t)
                }
            };
            i.breakpoints = function e(t) {
                if (t === undefined) {
                    return Ks(this.breakpoints_)
                }
                this.breakpoint_ = "";
                this.breakpoints_ = Ks({}, pd, t);
                this.updateCurrentBreakpoint_();
                return Ks(this.breakpoints_)
            };
            i.responsive = function e(t) {
                if (t === undefined) {
                    return this.responsive_
                }
                t = Boolean(t);
                var i = this.responsive_;
                if (t === i) {
                    return
                }
                this.responsive_ = t;
                if (t) {
                    this.on("playerresize", this.boundUpdateCurrentBreakpoint_);
                    this.updateCurrentBreakpoint_()
                } else {
                    this.off("playerresize", this.boundUpdateCurrentBreakpoint_);
                    this.removeCurrentBreakpoint_()
                }
                return t
            };
            i.currentBreakpoint = function e() {
                return this.breakpoint_
            };
            i.currentBreakpointClass = function e() {
                return hd[this.breakpoint_] || ""
            };
            i.loadMedia = function e(t, i) {
                var r = this;
                if (!t || typeof t !== "object") {
                    return
                }
                this.reset();
                this.cache_.media = Gu(t);
                var n = this.cache_.media,
                    a = n.artwork,
                    s = n.poster,
                    o = n.src,
                    u = n.textTracks;
                if (!a && s) {
                    this.cache_.media.artwork = [{
                        src: s,
                        type: cc(s)
                    }]
                }
                if (o) {
                    this.src(o)
                }
                if (s) {
                    this.poster(s)
                }
                if (Array.isArray(u)) {
                    u.forEach((function(e) {
                        return r.addRemoteTextTrack(e, false)
                    }))
                }
                this.ready(i)
            };
            i.getMedia = function e() {
                if (!this.cache_.media) {
                    var t = this.poster();
                    var i = this.currentSources();
                    var r = Array.prototype.map.call(this.remoteTextTracks(), (function(e) {
                        return {
                            kind: e.kind,
                            label: e.label,
                            language: e.language,
                            src: e.src
                        }
                    }));
                    var n = {
                        src: i,
                        textTracks: r
                    };
                    if (t) {
                        n.poster = t;
                        n.artwork = [{
                            src: n.poster,
                            type: cc(n.poster)
                        }]
                    }
                    return n
                }
                return Gu(this.cache_.media)
            };
            t.getTagSettings = function e(t) {
                var i = {
                    sources: [],
                    tracks: []
                };
                var r = Ro(t);
                var n = r["data-setup"];
                if (Po(t, "vjs-fill")) {
                    r.fill = true
                }
                if (Po(t, "vjs-fluid")) {
                    r.fluid = true
                }
                if (n !== null) {
                    var a = Z(n || "{}"),
                        s = a[0],
                        o = a[1];
                    if (s) {
                        qs.error(s)
                    }
                    Ks(r, o)
                }
                Ks(i, r);
                if (t.hasChildNodes()) {
                    var u = t.childNodes;
                    for (var l = 0, c = u.length; l < c; l++) {
                        var f = u[l];
                        var d = f.nodeName.toLowerCase();
                        if (d === "source") {
                            i.sources.push(Ro(f))
                        } else if (d === "track") {
                            i.tracks.push(Ro(f))
                        }
                    }
                }
                return i
            };
            i.flexNotSupported_ = function e() {
                var t = W.createElement("i");
                return !("flexBasis" in t.style || "webkitFlexBasis" in t.style || "mozFlexBasis" in t.style || "msFlexBasis" in t.style || "msFlexOrder" in t.style)
            };
            i.debug = function e(t) {
                if (t === undefined) {
                    return this.debugEnabled_
                }
                if (t) {
                    this.trigger("debugon");
                    this.previousLogLevel_ = this.log.level;
                    this.log.level("debug");
                    this.debugEnabled_ = true
                } else {
                    this.trigger("debugoff");
                    this.log.level(this.previousLogLevel_);
                    this.previousLogLevel_ = undefined;
                    this.debugEnabled_ = false
                }
            };
            i.playbackRates = function e(t) {
                if (t === undefined) {
                    return this.cache_.playbackRates
                }
                if (!Array.isArray(t)) {
                    return
                }
                if (!t.every((function(e) {
                        return typeof e === "number"
                    }))) {
                    return
                }
                this.cache_.playbackRates = t;
                this.trigger("playbackrateschange")
            };
            return t
        }($u);
        Vl.names.forEach((function(e) {
            var t = Vl[e];
            md.prototype[t.getterName] = function() {
                if (this.tech_) {
                    return this.tech_[t.getterName]()
                }
                this[t.privateName] = this[t.privateName] || new t.ListClass;
                return this[t.privateName]
            }
        }));
        md.prototype.crossorigin = md.prototype.crossOrigin;
        md.players = {};
        var vd = s.navigator;
        md.prototype.options_ = {
            techOrder: Gl.defaultTechOrder_,
            html5: {},
            inactivityTimeout: 2e3,
            playbackRates: [],
            liveui: false,
            children: ["mediaLoader", "posterImage", "textTrackDisplay", "loadingSpinner", "bigPlayButton", "liveTracker", "controlBar", "errorDisplay", "textTrackSettings", "resizeManager"],
            language: vd && (vd.languages && vd.languages[0] || vd.userLanguage || vd.language) || "en",
            languages: {},
            notSupportedMessage: "No compatible source was found for this media.",
            normalizeAutoplay: false,
            fullscreen: {
                options: {
                    navigationUI: "hide"
                }
            },
            breakpoints: {},
            responsive: false,
            audioOnlyMode: false,
            audioPosterMode: false
        };
        ["ended", "seeking", "seekable", "networkState", "readyState"].forEach((function(e) {
            md.prototype[e] = function() {
                return this.techGet_(e)
            }
        }));
        cd.forEach((function(e) {
            md.prototype["handleTech" + Vu(e) + "_"] = function() {
                return this.trigger(e)
            }
        }));
        $u.registerComponent("Player", md);
        var gd = "plugin";
        var yd = "activePlugins_";
        var _d = {};
        var bd = function e(t) {
            return _d.hasOwnProperty(t)
        };
        var Td = function e(t) {
            return bd(t) ? _d[t] : undefined
        };
        var Sd = function e(t, i) {
            t[yd] = t[yd] || {};
            t[yd][i] = true
        };
        var Ed = function e(t, i, r) {
            var n = (r ? "before" : "") + "pluginsetup";
            t.trigger(n, i);
            t.trigger(n + ":" + i.name, i)
        };
        var wd = function e(t, i) {
            var r = function e() {
                Ed(this, {
                    name: t,
                    plugin: i,
                    instance: null
                }, true);
                var r = i.apply(this, arguments);
                Sd(this, t);
                Ed(this, {
                    name: t,
                    plugin: i,
                    instance: r
                });
                return r
            };
            Object.keys(i).forEach((function(e) {
                r[e] = i[e]
            }));
            return r
        };
        var kd = function e(t, i) {
            i.prototype.name = t;
            return function() {
                Ed(this, {
                    name: t,
                    plugin: i,
                    instance: null
                }, true);
                for (var e = arguments.length, r = new Array(e), n = 0; n < e; n++) {
                    r[n] = arguments[n]
                }
                var a = rt(i, [this].concat(r));
                this[t] = function() {
                    return a
                };
                Ed(this, a.getEventHash());
                return a
            }
        };
        var Cd = function() {
            function e(t) {
                if (this.constructor === e) {
                    throw new Error("Plugin must be sub-classed; not directly instantiated.")
                }
                this.player = t;
                if (!this.log) {
                    this.log = this.player.log.createLogger(this.name)
                }
                Fu(this);
                delete this.trigger;
                Hu(this, this.constructor.defaultState);
                Sd(t, this.name);
                this.dispose = this.dispose.bind(this);
                t.on("dispose", this.dispose)
            }
            var t = e.prototype;
            t.version = function e() {
                return this.constructor.VERSION
            };
            t.getEventHash = function e(t) {
                if (t === void 0) {
                    t = {}
                }
                t.name = this.name;
                t.plugin = this.constructor;
                t.instance = this;
                return t
            };
            t.trigger = function e(t, i) {
                if (i === void 0) {
                    i = {}
                }
                return _u(this.eventBusEl_, t, this.getEventHash(i))
            };
            t.handleStateChanged = function e(t) {};
            t.dispose = function e() {
                var t = this.name,
                    i = this.player;
                this.trigger("dispose");
                this.off();
                i.off("dispose", this.dispose);
                i[yd][t] = false;
                this.player = this.state = null;
                i[t] = kd(t, _d[t])
            };
            e.isBasic = function t(i) {
                var r = typeof i === "string" ? Td(i) : i;
                return typeof r === "function" && !e.prototype.isPrototypeOf(r.prototype)
            };
            e.registerPlugin = function t(i, r) {
                if (typeof i !== "string") {
                    throw new Error('Illegal plugin name, "' + i + '", must be a string, was ' + typeof i + ".")
                }
                if (bd(i)) {
                    qs.warn('A plugin named "' + i + '" already exists. You may want to avoid re-registering plugins!')
                } else if (md.prototype.hasOwnProperty(i)) {
                    throw new Error('Illegal plugin name, "' + i + '", cannot share a name with an existing player method!')
                }
                if (typeof r !== "function") {
                    throw new Error('Illegal plugin for "' + i + '", must be a function, was ' + typeof r + ".")
                }
                _d[i] = r;
                if (i !== gd) {
                    if (e.isBasic(r)) {
                        md.prototype[i] = wd(i, r)
                    } else {
                        md.prototype[i] = kd(i, r)
                    }
                }
                return r
            };
            e.deregisterPlugin = function e(t) {
                if (t === gd) {
                    throw new Error("Cannot de-register base plugin.")
                }
                if (bd(t)) {
                    delete _d[t];
                    delete md.prototype[t]
                }
            };
            e.getPlugins = function e(t) {
                if (t === void 0) {
                    t = Object.keys(_d)
                }
                var i;
                t.forEach((function(e) {
                    var t = Td(e);
                    if (t) {
                        i = i || {};
                        i[e] = t
                    }
                }));
                return i
            };
            e.getPluginVersion = function e(t) {
                var i = Td(t);
                return i && i.VERSION || ""
            };
            return e
        }();
        Cd.getPlugin = Td;
        Cd.BASE_PLUGIN_NAME = gd;
        Cd.registerPlugin(gd, Cd);
        md.prototype.usingPlugin = function(e) {
            return !!this[yd] && this[yd][e] === true
        };
        md.prototype.hasPlugin = function(e) {
            return !!bd(e)
        };
        var Id = function e(t, i) {
            if (i === void 0) {
                i = {}
            }
            var r = function e() {
                t.apply(this, arguments)
            };
            var n = {};
            if (typeof i === "object") {
                if (i.constructor !== Object.prototype.constructor) {
                    r = i.constructor
                }
                n = i
            } else if (typeof i === "function") {
                r = i
            }
            at(r, t);
            if (t) {
                r.super_ = t
            }
            for (var a in n) {
                if (n.hasOwnProperty(a)) {
                    r.prototype[a] = n[a]
                }
            }
            return r
        };
        var Ad = function e(t) {
            return t.indexOf("#") === 0 ? t.slice(1) : t
        };

        function xd(e, t, i) {
            var r = xd.getPlayer(e);
            if (r) {
                if (t) {
                    qs.warn('Player "' + e + '" is already initialised. Options will not be applied.')
                }
                if (i) {
                    r.ready(i)
                }
                return r
            }
            var n = typeof e === "string" ? $o("#" + Ad(e)) : e;
            if (!wo(n)) {
                throw new TypeError("The element or ID supplied is not valid. (videojs)")
            }
            if (!n.ownerDocument.defaultView || !n.ownerDocument.body.contains(n)) {
                qs.warn("The element supplied is not included in the DOM")
            }
            t = t || {};
            if (t.restoreEl === true) {
                t.restoreEl = (n.parentNode && n.parentNode.hasAttribute("data-vjs-player") ? n.parentNode : n).cloneNode(true)
            }
            xs("beforesetup").forEach((function(e) {
                var i = e(n, Gu(t));
                if (!Ys(i) || Array.isArray(i)) {
                    qs.error("please return an object in beforesetup hooks");
                    return
                }
                t = Gu(t, i)
            }));
            var a = $u.getComponent("Player");
            r = new a(n, t, i);
            xs("setup").forEach((function(e) {
                return e(r)
            }));
            return r
        }
        xd.hooks_ = As;
        xd.hooks = xs;
        xd.hook = Ps;
        xd.hookOnce = Ds;
        xd.removeHook = Os;
        if (s.VIDEOJS_NO_DYNAMIC_STYLE !== true && Eo()) {
            var Pd = $o(".vjs-styles-defaults");
            if (!Pd) {
                Pd = nu("vjs-styles-defaults");
                var Od = $o("head");
                if (Od) {
                    Od.insertBefore(Pd, Od.firstChild)
                }
                au(Pd, "\n      .video-js {\n        width: 300px;\n        height: 150px;\n      }\n\n      .vjs-fluid:not(.vjs-audio-only-mode) {\n        padding-top: 56.25%\n      }\n    ")
            }
        }
        iu(1, xd);
        xd.VERSION = Is;
        xd.options = md.prototype.options_;
        xd.getPlayers = function() {
            return md.players
        };
        xd.getPlayer = function(e) {
            var t = md.players;
            var i;
            if (typeof e === "string") {
                var r = Ad(e);
                var n = t[r];
                if (n) {
                    return n
                }
                i = $o("#" + r)
            } else {
                i = e
            }
            if (wo(i)) {
                var a = i,
                    s = a.player,
                    o = a.playerId;
                if (s || t[o]) {
                    return s || t[o]
                }
            }
        };
        xd.getAllPlayers = function() {
            return Object.keys(md.players).map((function(e) {
                return md.players[e]
            })).filter(Boolean)
        };
        xd.players = md.players;
        xd.getComponent = $u.getComponent;
        xd.registerComponent = function(e, t) {
            if (Gl.isTech(t)) {
                qs.warn("The " + e + " tech was registered as a component. It should instead be registered using videojs.registerTech(name, tech)")
            }
            $u.registerComponent.call($u, e, t)
        };
        xd.getTech = Gl.getTech;
        xd.registerTech = Gl.registerTech;
        xd.use = Yl;
        Object.defineProperty(xd, "middleware", {
            value: {},
            writeable: false,
            enumerable: true
        });
        Object.defineProperty(xd.middleware, "TERMINATOR", {
            value: Kl,
            writeable: false,
            enumerable: true
        });
        xd.browser = _o;
        xd.TOUCH_ENABLED = po;
        xd.extend = Id;
        xd.mergeOptions = Gu;
        xd.bind = wu;
        xd.registerPlugin = Cd.registerPlugin;
        xd.deregisterPlugin = Cd.deregisterPlugin;
        xd.plugin = function(e, t) {
            qs.warn("videojs.plugin() is deprecated; use videojs.registerPlugin() instead");
            return Cd.registerPlugin(e, t)
        };
        xd.getPlugins = Cd.getPlugins;
        xd.getPlugin = Cd.getPlugin;
        xd.getPluginVersion = Cd.getPluginVersion;
        xd.addLanguage = function(e, t) {
            var i;
            e = ("" + e).toLowerCase();
            xd.options.languages = Gu(xd.options.languages, (i = {}, i[e] = t, i));
            return xd.options.languages[e]
        };
        xd.log = qs;
        xd.createLogger = Vs;
        xd.createTimeRange = xd.createTimeRanges = el;
        xd.formatTime = Dc;
        xd.setFormatTime = Pc;
        xd.resetFormatTime = Oc;
        xd.parseUrl = Cl;
        xd.isCrossOrigin = xl;
        xd.EventTarget = Iu;
        xd.on = gu;
        xd.one = bu;
        xd.off = yu;
        xd.trigger = _u;
        xd.xhr = ue;
        xd.TextTrack = Ll;
        xd.AudioTrack = Nl;
        xd.VideoTrack = Rl;
        ["isEl", "isTextNode", "createEl", "hasClass", "addClass", "removeClass", "toggleClass", "setAttributes", "getAttributes", "emptyEl", "appendContent", "insertContent"].forEach((function(e) {
            xd[e] = function() {
                qs.warn("videojs." + e + "() is deprecated; use videojs.dom." + e + "() instead");
                return Jo[e].apply(null, arguments)
            }
        }));
        xd.computedStyle = Qs;
        xd.dom = Jo;
        xd.url = Pl;
        xd.defineLazyProperty = od;
        xd.addLanguage("en", {
            "Non-Fullscreen": "Exit Fullscreen"
        });
        var Dd = ut;
        var Ld = function e(t, i, r) {
            if (t && r && r.responseURL && i !== r.responseURL) {
                return r.responseURL
            }
            return i
        };
        var Nd = function e(t) {
            if (xd.log.debug) {
                return xd.log.debug.bind(xd, "VHS:", t + " >")
            }
            return function() {}
        };
        var Rd = 1 / 30;
        var Md = Rd * 3;
        var Ud = function e(t, i) {
            var r = [];
            var n;
            if (t && t.length) {
                for (n = 0; n < t.length; n++) {
                    if (i(t.start(n), t.end(n))) {
                        r.push([t.start(n), t.end(n)])
                    }
                }
            }
            return xd.createTimeRanges(r)
        };
        var Bd = function e(t, i) {
            return Ud(t, (function(e, t) {
                return e - Md <= i && t + Md >= i
            }))
        };
        var Fd = function e(t, i) {
            return Ud(t, (function(e) {
                return e - Rd >= i
            }))
        };
        var jd = function e(t) {
            if (t.length < 2) {
                return xd.createTimeRanges()
            }
            var i = [];
            for (var r = 1; r < t.length; r++) {
                var n = t.end(r - 1);
                var a = t.start(r);
                i.push([n, a])
            }
            return xd.createTimeRanges(i)
        };
        var Hd = function e(t, i) {
            var r = null;
            var n = null;
            var a = 0;
            var s = [];
            var o = [];
            if (!t || !t.length || !i || !i.length) {
                return xd.createTimeRange()
            }
            var u = t.length;
            while (u--) {
                s.push({
                    time: t.start(u),
                    type: "start"
                });
                s.push({
                    time: t.end(u),
                    type: "end"
                })
            }
            u = i.length;
            while (u--) {
                s.push({
                    time: i.start(u),
                    type: "start"
                });
                s.push({
                    time: i.end(u),
                    type: "end"
                })
            }
            s.sort((function(e, t) {
                return e.time - t.time
            }));
            for (u = 0; u < s.length; u++) {
                if (s[u].type === "start") {
                    a++;
                    if (a === 2) {
                        r = s[u].time
                    }
                } else if (s[u].type === "end") {
                    a--;
                    if (a === 1) {
                        n = s[u].time
                    }
                }
                if (r !== null && n !== null) {
                    o.push([r, n]);
                    r = null;
                    n = null
                }
            }
            return xd.createTimeRanges(o)
        };
        var qd = function e(t) {
            var i = [];
            if (!t || !t.length) {
                return ""
            }
            for (var r = 0; r < t.length; r++) {
                i.push(t.start(r) + " => " + t.end(r))
            }
            return i.join(", ")
        };
        var Vd = function e(t, i, r) {
            if (r === void 0) {
                r = 1
            }
            var n = t.length ? t.end(t.length - 1) : 0;
            return (n - i) / r
        };
        var Wd = function e(t) {
            var i = [];
            for (var r = 0; r < t.length; r++) {
                i.push({
                    start: t.start(r),
                    end: t.end(r)
                })
            }
            return i
        };
        var Gd = function e(t, i) {
            if (t === i) {
                return false
            }
            if (!t && i || !i && t) {
                return true
            }
            if (t.length !== i.length) {
                return true
            }
            for (var r = 0; r < t.length; r++) {
                if (t.start(r) !== i.start(r) || t.end(r) !== i.end(r)) {
                    return true
                }
            }
            return false
        };
        var Xd = function e(t) {
            if (!t || !t.length || !t.end) {
                return
            }
            return t.end(t.length - 1)
        };
        var zd = function e(t, i) {
            var r = 0;
            if (!t || !t.length) {
                return r
            }
            for (var n = 0; n < t.length; n++) {
                var a = t.start(n);
                var s = t.end(n);
                if (i > s) {
                    continue
                }
                if (i > a && i <= s) {
                    r += s - i;
                    continue
                }
                r += s - a
            }
            return r
        };
        var Kd = xd.createTimeRange;
        var Yd = function e(t, i) {
            if (!i.preload) {
                return i.duration
            }
            var r = 0;
            (i.parts || []).forEach((function(e) {
                r += e.duration
            }));
            (i.preloadHints || []).forEach((function(e) {
                if (e.type === "PART") {
                    r += t.partTargetDuration
                }
            }));
            return r
        };
        var $d = function e(t) {
            return (t.segments || []).reduce((function(e, t, i) {
                if (t.parts) {
                    t.parts.forEach((function(r, n) {
                        e.push({
                            duration: r.duration,
                            segmentIndex: i,
                            partIndex: n,
                            part: r,
                            segment: t
                        })
                    }))
                } else {
                    e.push({
                        duration: t.duration,
                        segmentIndex: i,
                        partIndex: null,
                        segment: t,
                        part: null
                    })
                }
                return e
            }), [])
        };
        var Qd = function e(t) {
            var i = t.segments && t.segments.length && t.segments[t.segments.length - 1];
            return i && i.parts || []
        };
        var Jd = function e(t) {
            var i = t.preloadSegment;
            if (!i) {
                return
            }
            var r = i.parts,
                n = i.preloadHints;
            var a = (n || []).reduce((function(e, t) {
                return e + (t.type === "PART" ? 1 : 0)
            }), 0);
            a += r && r.length ? r.length : 0;
            return a
        };
        var Zd = function e(t, i) {
            if (i.endList) {
                return 0
            }
            if (t && t.suggestedPresentationDelay) {
                return t.suggestedPresentationDelay
            }
            var r = Qd(i).length > 0;
            if (r && i.serverControl && i.serverControl.partHoldBack) {
                return i.serverControl.partHoldBack
            } else if (r && i.partTargetDuration) {
                return i.partTargetDuration * 3
            } else if (i.serverControl && i.serverControl.holdBack) {
                return i.serverControl.holdBack
            } else if (i.targetDuration) {
                return i.targetDuration * 3
            }
            return 0
        };
        var eh = function e(t, i) {
            var r = 0;
            var n = i - t.mediaSequence;
            var a = t.segments[n];
            if (a) {
                if (typeof a.start !== "undefined") {
                    return {
                        result: a.start,
                        precise: true
                    }
                }
                if (typeof a.end !== "undefined") {
                    return {
                        result: a.end - a.duration,
                        precise: true
                    }
                }
            }
            while (n--) {
                a = t.segments[n];
                if (typeof a.end !== "undefined") {
                    return {
                        result: r + a.end,
                        precise: true
                    }
                }
                r += Yd(t, a);
                if (typeof a.start !== "undefined") {
                    return {
                        result: r + a.start,
                        precise: true
                    }
                }
            }
            return {
                result: r,
                precise: false
            }
        };
        var th = function e(t, i) {
            var r = 0;
            var n;
            var a = i - t.mediaSequence;
            for (; a < t.segments.length; a++) {
                n = t.segments[a];
                if (typeof n.start !== "undefined") {
                    return {
                        result: n.start - r,
                        precise: true
                    }
                }
                r += Yd(t, n);
                if (typeof n.end !== "undefined") {
                    return {
                        result: n.end - r,
                        precise: true
                    }
                }
            }
            return {
                result: -1,
                precise: false
            }
        };
        var ih = function e(t, i, r) {
            if (typeof i === "undefined") {
                i = t.mediaSequence + t.segments.length
            }
            if (i < t.mediaSequence) {
                return 0
            }
            var n = eh(t, i);
            if (n.precise) {
                return n.result
            }
            var a = th(t, i);
            if (a.precise) {
                return a.result
            }
            return n.result + r
        };
        var rh = function e(t, i, r) {
            if (!t) {
                return 0
            }
            if (typeof r !== "number") {
                r = 0
            }
            if (typeof i === "undefined") {
                if (t.totalDuration) {
                    return t.totalDuration
                }
                if (!t.endList) {
                    return s.Infinity
                }
            }
            return ih(t, i, r)
        };
        var nh = function e(t) {
            var i = t.defaultDuration,
                r = t.durationList,
                n = t.startIndex,
                a = t.endIndex;
            var s = 0;
            if (n > a) {
                var o = [a, n];
                n = o[0];
                a = o[1]
            }
            if (n < 0) {
                for (var u = n; u < Math.min(0, a); u++) {
                    s += i
                }
                n = 0
            }
            for (var l = n; l < a; l++) {
                s += r[l].duration
            }
            return s
        };
        var ah = function e(t, i, r, n) {
            if (!t || !t.segments) {
                return null
            }
            if (t.endList) {
                return rh(t)
            }
            if (i === null) {
                return null
            }
            i = i || 0;
            var a = ih(t, t.mediaSequence + t.segments.length, i);
            if (r) {
                n = typeof n === "number" ? n : Zd(null, t);
                a -= n
            }
            return Math.max(0, a)
        };
        var sh = function e(t, i, r) {
            var n = true;
            var a = i || 0;
            var s = ah(t, i, n, r);
            if (s === null) {
                return Kd()
            }
            return Kd(a, s)
        };
        var oh = function e(t) {
            var i = t.playlist,
                r = t.currentTime,
                n = t.startingSegmentIndex,
                a = t.startingPartIndex,
                s = t.startTime,
                o = t.experimentalExactManifestTimings;
            var u = r - s;
            var l = $d(i);
            var c = 0;
            for (var f = 0; f < l.length; f++) {
                var d = l[f];
                if (n !== d.segmentIndex) {
                    continue
                }
                if (typeof a === "number" && typeof d.partIndex === "number" && a !== d.partIndex) {
                    continue
                }
                c = f;
                break
            }
            if (u < 0) {
                if (c > 0) {
                    for (var h = c - 1; h >= 0; h--) {
                        var p = l[h];
                        u += p.duration;
                        if (o) {
                            if (u < 0) {
                                continue
                            }
                        } else if (u + Rd <= 0) {
                            continue
                        }
                        return {
                            partIndex: p.partIndex,
                            segmentIndex: p.segmentIndex,
                            startTime: s - nh({
                                defaultDuration: i.targetDuration,
                                durationList: l,
                                startIndex: c,
                                endIndex: h
                            })
                        }
                    }
                }
                return {
                    partIndex: l[0] && l[0].partIndex || null,
                    segmentIndex: l[0] && l[0].segmentIndex || 0,
                    startTime: r
                }
            }
            if (c < 0) {
                for (var m = c; m < 0; m++) {
                    u -= i.targetDuration;
                    if (u < 0) {
                        return {
                            partIndex: l[0] && l[0].partIndex || null,
                            segmentIndex: l[0] && l[0].segmentIndex || 0,
                            startTime: r
                        }
                    }
                }
                c = 0
            }
            for (var v = c; v < l.length; v++) {
                var g = l[v];
                u -= g.duration;
                if (o) {
                    if (u > 0) {
                        continue
                    }
                } else if (u - Rd >= 0) {
                    continue
                }
                return {
                    partIndex: g.partIndex,
                    segmentIndex: g.segmentIndex,
                    startTime: s + nh({
                        defaultDuration: i.targetDuration,
                        durationList: l,
                        startIndex: c,
                        endIndex: v
                    })
                }
            }
            return {
                segmentIndex: l[l.length - 1].segmentIndex,
                partIndex: l[l.length - 1].partIndex,
                startTime: r
            }
        };
        var uh = function e(t) {
            return t.excludeUntil && t.excludeUntil > Date.now()
        };
        var lh = function e(t) {
            return t.excludeUntil && t.excludeUntil === Infinity
        };
        var ch = function e(t) {
            var i = uh(t);
            return !t.disabled && !i
        };
        var fh = function e(t) {
            return t.disabled
        };
        var dh = function e(t) {
            for (var i = 0; i < t.segments.length; i++) {
                if (t.segments[i].key) {
                    return true
                }
            }
            return false
        };
        var hh = function e(t, i) {
            return i.attributes && i.attributes[t]
        };
        var ph = function e(t, i, r, n) {
            if (n === void 0) {
                n = 0
            }
            if (!hh("BANDWIDTH", r)) {
                return NaN
            }
            var a = t * r.attributes.BANDWIDTH;
            return (a - n * 8) / i
        };
        var mh = function e(t, i) {
            if (t.playlists.length === 1) {
                return true
            }
            var r = i.attributes.BANDWIDTH || Number.MAX_VALUE;
            return t.playlists.filter((function(e) {
                if (!ch(e)) {
                    return false
                }
                return (e.attributes.BANDWIDTH || 0) < r
            })).length === 0
        };
        var vh = function e(t, i) {
            if (!t && !i || !t && i || t && !i) {
                return false
            }
            if (t === i) {
                return true
            }
            if (t.id && i.id && t.id === i.id) {
                return true
            }
            if (t.resolvedUri && i.resolvedUri && t.resolvedUri === i.resolvedUri) {
                return true
            }
            if (t.uri && i.uri && t.uri === i.uri) {
                return true
            }
            return false
        };
        var gh = function e(t, i) {
            var r = t && t.mediaGroups && t.mediaGroups.AUDIO || {};
            var n = false;
            for (var a in r) {
                for (var s in r[a]) {
                    n = i(r[a][s]);
                    if (n) {
                        break
                    }
                }
                if (n) {
                    break
                }
            }
            return !!n
        };
        var yh = function e(t) {
            if (!t || !t.playlists || !t.playlists.length) {
                var i = gh(t, (function(e) {
                    return e.playlists && e.playlists.length || e.uri
                }));
                return i
            }
            var r = function e(i) {
                var r = t.playlists[i];
                var n = r.attributes && r.attributes.CODECS;
                if (n && n.split(",").every((function(e) {
                        return At(e)
                    }))) {
                    return "continue"
                }
                var a = gh(t, (function(e) {
                    return vh(r, e)
                }));
                if (a) {
                    return "continue"
                }
                return {
                    v: false
                }
            };
            for (var n = 0; n < t.playlists.length; n++) {
                var a = r(n);
                if (a === "continue") continue;
                if (typeof a === "object") return a.v
            }
            return true
        };
        var _h = {
            liveEdgeDelay: Zd,
            duration: rh,
            seekable: sh,
            getMediaInfoForTime: oh,
            isEnabled: ch,
            isDisabled: fh,
            isBlacklisted: uh,
            isIncompatible: lh,
            playlistEnd: ah,
            isAes: dh,
            hasAttribute: hh,
            estimateSegmentRequestTime: ph,
            isLowestEnabledRendition: mh,
            isAudioOnly: yh,
            playlistMatch: vh,
            segmentDurationWithParts: Yd
        };
        var bh = xd.log;
        var Th = function e(t, i) {
            return t + "-" + i
        };
        var Sh = function e(t) {
            var i = t.onwarn,
                r = t.oninfo,
                n = t.manifestString,
                a = t.customTagParsers,
                s = a === void 0 ? [] : a,
                o = t.customTagMappers,
                u = o === void 0 ? [] : o,
                l = t.experimentalLLHLS;
            var c = new Tt;
            if (i) {
                c.on("warn", i)
            }
            if (r) {
                c.on("info", r)
            }
            s.forEach((function(e) {
                return c.addParser(e)
            }));
            u.forEach((function(e) {
                return c.addTagMapper(e)
            }));
            c.push(n);
            c.end();
            var f = c.manifest;
            if (!l) {
                ["preloadSegment", "skip", "serverControl", "renditionReports", "partInf", "partTargetDuration"].forEach((function(e) {
                    if (f.hasOwnProperty(e)) {
                        delete f[e]
                    }
                }));
                if (f.segments) {
                    f.segments.forEach((function(e) {
                        ["parts", "preloadHints"].forEach((function(t) {
                            if (e.hasOwnProperty(t)) {
                                delete e[t]
                            }
                        }))
                    }))
                }
            }
            if (!f.targetDuration) {
                var d = 10;
                if (f.segments && f.segments.length) {
                    d = f.segments.reduce((function(e, t) {
                        return Math.max(e, t.duration)
                    }), 0)
                }
                if (i) {
                    i("manifest has no targetDuration defaulting to " + d)
                }
                f.targetDuration = d
            }
            var h = Qd(f);
            if (h.length && !f.partTargetDuration) {
                var p = h.reduce((function(e, t) {
                    return Math.max(e, t.duration)
                }), 0);
                if (i) {
                    i("manifest has no partTargetDuration defaulting to " + p);
                    bh.error("LL-HLS manifest has parts but lacks required #EXT-X-PART-INF:PART-TARGET value. See https://datatracker.ietf.org/doc/html/draft-pantos-hls-rfc8216bis-09#section-4.4.3.7. Playback is not guaranteed.")
                }
                f.partTargetDuration = p
            }
            return f
        };
        var Eh = function e(t, i) {
            if (!t.mediaGroups) {
                return
            } ["AUDIO", "SUBTITLES"].forEach((function(e) {
                if (!t.mediaGroups[e]) {
                    return
                }
                for (var r in t.mediaGroups[e]) {
                    for (var n in t.mediaGroups[e][r]) {
                        var a = t.mediaGroups[e][r][n];
                        i(a, e, r, n)
                    }
                }
            }))
        };
        var wh = function e(t) {
            var i = t.playlist,
                r = t.uri,
                n = t.id;
            i.id = n;
            i.playlistErrors_ = 0;
            if (r) {
                i.uri = r
            }
            i.attributes = i.attributes || {}
        };
        var kh = function e(t) {
            var i = t.playlists.length;
            while (i--) {
                var r = t.playlists[i];
                wh({
                    playlist: r,
                    id: Th(i, r.uri)
                });
                r.resolvedUri = Dd(t.uri, r.uri);
                t.playlists[r.id] = r;
                t.playlists[r.uri] = r;
                if (!r.attributes.BANDWIDTH) {
                    bh.warn("Invalid playlist STREAM-INF detected. Missing BANDWIDTH attribute.")
                }
            }
        };
        var Ch = function e(t) {
            Eh(t, (function(e) {
                if (e.uri) {
                    e.resolvedUri = Dd(t.uri, e.uri)
                }
            }))
        };
        var Ih = function e(t, i) {
            var r = Th(0, i);
            var n = {
                mediaGroups: {
                    AUDIO: {},
                    VIDEO: {},
                    "CLOSED-CAPTIONS": {},
                    SUBTITLES: {}
                },
                uri: s.location.href,
                resolvedUri: s.location.href,
                playlists: [{
                    uri: i,
                    id: r,
                    resolvedUri: i,
                    attributes: {}
                }]
            };
            n.playlists[r] = n.playlists[0];
            n.playlists[i] = n.playlists[0];
            return n
        };
        var Ah = function e(t, i) {
            t.uri = i;
            for (var r = 0; r < t.playlists.length; r++) {
                if (!t.playlists[r].uri) {
                    var n = "placeholder-uri-" + r;
                    t.playlists[r].uri = n
                }
            }
            var a = yh(t);
            Eh(t, (function(e, i, r, n) {
                var s = "placeholder-uri-" + i + "-" + r + "-" + n;
                if (!e.playlists || !e.playlists.length) {
                    if (a && i === "AUDIO" && !e.uri) {
                        for (var o = 0; o < t.playlists.length; o++) {
                            var u = t.playlists[o];
                            if (u.attributes && u.attributes.AUDIO && u.attributes.AUDIO === r) {
                                return
                            }
                        }
                    }
                    e.playlists = [X({}, e)]
                }
                e.playlists.forEach((function(e, i) {
                    var r = Th(i, s);
                    if (e.uri) {
                        e.resolvedUri = e.resolvedUri || Dd(t.uri, e.uri)
                    } else {
                        e.uri = i === 0 ? s : r;
                        e.resolvedUri = e.uri
                    }
                    e.id = e.id || r;
                    e.attributes = e.attributes || {};
                    t.playlists[e.id] = e;
                    t.playlists[e.uri] = e
                }))
            }));
            kh(t);
            Ch(t)
        };
        var xh = xd.mergeOptions,
            Ph = xd.EventTarget;
        var Oh = function e(t, i) {
            if (i.endList || !i.serverControl) {
                return t
            }
            var r = {};
            if (i.serverControl.canBlockReload) {
                var n = i.preloadSegment;
                var a = i.mediaSequence + i.segments.length;
                if (n) {
                    var o = n.parts || [];
                    var u = Jd(i) - 1;
                    if (u > -1 && u !== o.length - 1) {
                        r._HLS_part = u
                    }
                    if (u > -1 || o.length) {
                        a--
                    }
                }
                r._HLS_msn = a
            }
            if (i.serverControl && i.serverControl.canSkipUntil) {
                r._HLS_skip = i.serverControl.canSkipDateranges ? "v2" : "YES"
            }
            if (Object.keys(r).length) {
                var l = new s.URL(t);
                ["_HLS_skip", "_HLS_msn", "_HLS_part"].forEach((function(e) {
                    if (!r.hasOwnProperty(e)) {
                        return
                    }
                    l.searchParams.set(e, r[e])
                }));
                t = l.toString()
            }
            return t
        };
        var Dh = function e(t, i) {
            if (!t) {
                return i
            }
            var r = xh(t, i);
            if (t.preloadHints && !i.preloadHints) {
                delete r.preloadHints
            }
            if (t.parts && !i.parts) {
                delete r.parts
            } else if (t.parts && i.parts) {
                for (var n = 0; n < i.parts.length; n++) {
                    if (t.parts && t.parts[n]) {
                        r.parts[n] = xh(t.parts[n], i.parts[n])
                    }
                }
            }
            if (!t.skipped && i.skipped) {
                r.skipped = false
            }
            if (t.preload && !i.preload) {
                r.preload = false
            }
            return r
        };
        var Lh = function e(t, i, r) {
            var n = t.slice();
            var a = i.slice();
            r = r || 0;
            var s = [];
            var o;
            for (var u = 0; u < a.length; u++) {
                var l = n[u + r];
                var c = a[u];
                if (l) {
                    o = l.map || o;
                    s.push(Dh(l, c))
                } else {
                    if (o && !c.map) {
                        c.map = o
                    }
                    s.push(c)
                }
            }
            return s
        };
        var Nh = function e(t, i) {
            if (!t.resolvedUri && t.uri) {
                t.resolvedUri = Dd(i, t.uri)
            }
            if (t.key && !t.key.resolvedUri) {
                t.key.resolvedUri = Dd(i, t.key.uri)
            }
            if (t.map && !t.map.resolvedUri) {
                t.map.resolvedUri = Dd(i, t.map.uri)
            }
            if (t.map && t.map.key && !t.map.key.resolvedUri) {
                t.map.key.resolvedUri = Dd(i, t.map.key.uri)
            }
            if (t.parts && t.parts.length) {
                t.parts.forEach((function(e) {
                    if (e.resolvedUri) {
                        return
                    }
                    e.resolvedUri = Dd(i, e.uri)
                }))
            }
            if (t.preloadHints && t.preloadHints.length) {
                t.preloadHints.forEach((function(e) {
                    if (e.resolvedUri) {
                        return
                    }
                    e.resolvedUri = Dd(i, e.uri)
                }))
            }
        };
        var Rh = function e(t) {
            var i = t.segments || [];
            var r = t.preloadSegment;
            if (r && r.parts && r.parts.length) {
                if (r.preloadHints) {
                    for (var n = 0; n < r.preloadHints.length; n++) {
                        if (r.preloadHints[n].type === "MAP") {
                            return i
                        }
                    }
                }
                r.duration = t.targetDuration;
                r.preload = true;
                i.push(r)
            }
            return i
        };
        var Mh = function e(t, i) {
            return t === i || t.segments && i.segments && t.segments.length === i.segments.length && t.endList === i.endList && t.mediaSequence === i.mediaSequence && t.preloadSegment === i.preloadSegment
        };
        var Uh = function e(t, i, r) {
            if (r === void 0) {
                r = Mh
            }
            var n = xh(t, {});
            var a = n.playlists[i.id];
            if (!a) {
                return null
            }
            if (r(a, i)) {
                return null
            }
            i.segments = Rh(i);
            var s = xh(a, i);
            if (s.preloadSegment && !i.preloadSegment) {
                delete s.preloadSegment
            }
            if (a.segments) {
                if (i.skip) {
                    i.segments = i.segments || [];
                    for (var o = 0; o < i.skip.skippedSegments; o++) {
                        i.segments.unshift({
                            skipped: true
                        })
                    }
                }
                s.segments = Lh(a.segments, i.segments, i.mediaSequence - a.mediaSequence)
            }
            s.segments.forEach((function(e) {
                Nh(e, s.resolvedUri)
            }));
            for (var u = 0; u < n.playlists.length; u++) {
                if (n.playlists[u].id === i.id) {
                    n.playlists[u] = s
                }
            }
            n.playlists[i.id] = s;
            n.playlists[i.uri] = s;
            Eh(t, (function(e, t, r, n) {
                if (!e.playlists) {
                    return
                }
                for (var a = 0; a < e.playlists.length; a++) {
                    if (i.id === e.playlists[a].id) {
                        e.playlists[a] = s
                    }
                }
            }));
            return n
        };
        var Bh = function e(t, i) {
            var r = t.segments || [];
            var n = r[r.length - 1];
            var a = n && n.parts && n.parts[n.parts.length - 1];
            var s = a && a.duration || n && n.duration;
            if (i && s) {
                return s * 1e3
            }
            return (t.partTargetDuration || t.targetDuration || 10) * 500
        };
        var Fh = function(e) {
            J(t, e);

            function t(t, i, r) {
                var n;
                if (r === void 0) {
                    r = {}
                }
                n = e.call(this) || this;
                if (!t) {
                    throw new Error("A non-empty playlist URL or object is required")
                }
                n.logger_ = Nd("PlaylistLoader");
                var a = r,
                    s = a.withCredentials,
                    o = s === void 0 ? false : s,
                    u = a.handleManifestRedirects,
                    l = u === void 0 ? false : u;
                n.src = t;
                n.vhs_ = i;
                n.withCredentials = o;
                n.handleManifestRedirects = l;
                var c = i.options_;
                n.customTagParsers = c && c.customTagParsers || [];
                n.customTagMappers = c && c.customTagMappers || [];
                n.experimentalLLHLS = c && c.experimentalLLHLS || false;
                if (xd.browser.IE_VERSION) {
                    n.experimentalLLHLS = false
                }
                n.state = "HAVE_NOTHING";
                n.handleMediaupdatetimeout_ = n.handleMediaupdatetimeout_.bind(Y(n));
                n.on("mediaupdatetimeout", n.handleMediaupdatetimeout_);
                return n
            }
            var i = t.prototype;
            i.handleMediaupdatetimeout_ = function e() {
                var t = this;
                if (this.state !== "HAVE_METADATA") {
                    return
                }
                var i = this.media();
                var r = Dd(this.master.uri, i.uri);
                if (this.experimentalLLHLS) {
                    r = Oh(r, i)
                }
                this.state = "HAVE_CURRENT_METADATA";
                this.request = this.vhs_.xhr({
                    uri: r,
                    withCredentials: this.withCredentials
                }, (function(e, i) {
                    if (!t.request) {
                        return
                    }
                    if (e) {
                        return t.playlistRequestError(t.request, t.media(), "HAVE_METADATA")
                    }
                    t.haveMetadata({
                        playlistString: t.request.responseText,
                        url: t.media().uri,
                        id: t.media().id
                    })
                }))
            };
            i.playlistRequestError = function e(t, i, r) {
                var n = i.uri,
                    a = i.id;
                this.request = null;
                if (r) {
                    this.state = r
                }
                this.error = {
                    playlist: this.master.playlists[a],
                    status: t.status,
                    message: "HLS playlist request error at URL: " + n + ".",
                    responseText: t.responseText,
                    code: t.status >= 500 ? 4 : 2
                };
                this.trigger("error")
            };
            i.parseManifest_ = function e(t) {
                var i = this;
                var r = t.url,
                    n = t.manifestString;
                return Sh({
                    onwarn: function e(t) {
                        var n = t.message;
                        return i.logger_("m3u8-parser warn for " + r + ": " + n)
                    },
                    oninfo: function e(t) {
                        var n = t.message;
                        return i.logger_("m3u8-parser info for " + r + ": " + n)
                    },
                    manifestString: n,
                    customTagParsers: this.customTagParsers,
                    customTagMappers: this.customTagMappers,
                    experimentalLLHLS: this.experimentalLLHLS
                })
            };
            i.haveMetadata = function e(t) {
                var i = t.playlistString,
                    r = t.playlistObject,
                    n = t.url,
                    a = t.id;
                this.request = null;
                this.state = "HAVE_METADATA";
                var s = r || this.parseManifest_({
                    url: n,
                    manifestString: i
                });
                s.lastRequest = Date.now();
                wh({
                    playlist: s,
                    uri: n,
                    id: a
                });
                var o = Uh(this.master, s);
                this.targetDuration = s.partTargetDuration || s.targetDuration;
                this.pendingMedia_ = null;
                if (o) {
                    this.master = o;
                    this.media_ = this.master.playlists[a]
                } else {
                    this.trigger("playlistunchanged")
                }
                this.updateMediaUpdateTimeout_(Bh(this.media(), !!o));
                this.trigger("loadedplaylist")
            };
            i.dispose = function e() {
                this.trigger("dispose");
                this.stopRequest();
                s.clearTimeout(this.mediaUpdateTimeout);
                s.clearTimeout(this.finalRenditionTimeout);
                this.off()
            };
            i.stopRequest = function e() {
                if (this.request) {
                    var t = this.request;
                    this.request = null;
                    t.onreadystatechange = null;
                    t.abort()
                }
            };
            i.media = function e(t, i) {
                var r = this;
                if (!t) {
                    return this.media_
                }
                if (this.state === "HAVE_NOTHING") {
                    throw new Error("Cannot switch media playlist from " + this.state)
                }
                if (typeof t === "string") {
                    if (!this.master.playlists[t]) {
                        throw new Error("Unknown playlist URI: " + t)
                    }
                    t = this.master.playlists[t]
                }
                s.clearTimeout(this.finalRenditionTimeout);
                if (i) {
                    var n = (t.partTargetDuration || t.targetDuration) / 2 * 1e3 || 5 * 1e3;
                    this.finalRenditionTimeout = s.setTimeout(this.media.bind(this, t, false), n);
                    return
                }
                var a = this.state;
                var o = !this.media_ || t.id !== this.media_.id;
                var u = this.master.playlists[t.id];
                if (u && u.endList || t.endList && t.segments.length) {
                    if (this.request) {
                        this.request.onreadystatechange = null;
                        this.request.abort();
                        this.request = null
                    }
                    this.state = "HAVE_METADATA";
                    this.media_ = t;
                    if (o) {
                        this.trigger("mediachanging");
                        if (a === "HAVE_MASTER") {
                            this.trigger("loadedmetadata")
                        } else {
                            this.trigger("mediachange")
                        }
                    }
                    return
                }
                this.updateMediaUpdateTimeout_(Bh(t, true));
                if (!o) {
                    return
                }
                this.state = "SWITCHING_MEDIA";
                if (this.request) {
                    if (t.resolvedUri === this.request.url) {
                        return
                    }
                    this.request.onreadystatechange = null;
                    this.request.abort();
                    this.request = null
                }
                if (this.media_) {
                    this.trigger("mediachanging")
                }
                this.pendingMedia_ = t;
                this.request = this.vhs_.xhr({
                    uri: t.resolvedUri,
                    withCredentials: this.withCredentials
                }, (function(e, i) {
                    if (!r.request) {
                        return
                    }
                    t.lastRequest = Date.now();
                    t.resolvedUri = Ld(r.handleManifestRedirects, t.resolvedUri, i);
                    if (e) {
                        return r.playlistRequestError(r.request, t, a)
                    }
                    r.haveMetadata({
                        playlistString: i.responseText,
                        url: t.uri,
                        id: t.id
                    });
                    if (a === "HAVE_MASTER") {
                        r.trigger("loadedmetadata")
                    } else {
                        r.trigger("mediachange")
                    }
                }))
            };
            i.pause = function e() {
                if (this.mediaUpdateTimeout) {
                    s.clearTimeout(this.mediaUpdateTimeout);
                    this.mediaUpdateTimeout = null
                }
                this.stopRequest();
                if (this.state === "HAVE_NOTHING") {
                    this.started = false
                }
                if (this.state === "SWITCHING_MEDIA") {
                    if (this.media_) {
                        this.state = "HAVE_METADATA"
                    } else {
                        this.state = "HAVE_MASTER"
                    }
                } else if (this.state === "HAVE_CURRENT_METADATA") {
                    this.state = "HAVE_METADATA"
                }
            };
            i.load = function e(t) {
                var i = this;
                if (this.mediaUpdateTimeout) {
                    s.clearTimeout(this.mediaUpdateTimeout);
                    this.mediaUpdateTimeout = null
                }
                var r = this.media();
                if (t) {
                    var n = r ? (r.partTargetDuration || r.targetDuration) / 2 * 1e3 : 5 * 1e3;
                    this.mediaUpdateTimeout = s.setTimeout((function() {
                        i.mediaUpdateTimeout = null;
                        i.load()
                    }), n);
                    return
                }
                if (!this.started) {
                    this.start();
                    return
                }
                if (r && !r.endList) {
                    this.trigger("mediaupdatetimeout")
                } else {
                    this.trigger("loadedplaylist")
                }
            };
            i.updateMediaUpdateTimeout_ = function e(t) {
                var i = this;
                if (this.mediaUpdateTimeout) {
                    s.clearTimeout(this.mediaUpdateTimeout);
                    this.mediaUpdateTimeout = null
                }
                if (!this.media() || this.media().endList) {
                    return
                }
                this.mediaUpdateTimeout = s.setTimeout((function() {
                    i.mediaUpdateTimeout = null;
                    i.trigger("mediaupdatetimeout");
                    i.updateMediaUpdateTimeout_(t)
                }), t)
            };
            i.start = function e() {
                var t = this;
                this.started = true;
                if (typeof this.src === "object") {
                    if (!this.src.uri) {
                        this.src.uri = s.location.href
                    }
                    this.src.resolvedUri = this.src.uri;
                    setTimeout((function() {
                        t.setupInitialPlaylist(t.src)
                    }), 0);
                    return
                }
                this.request = this.vhs_.xhr({
                    uri: this.src,
                    withCredentials: this.withCredentials
                }, (function(e, i) {
                    if (!t.request) {
                        return
                    }
                    t.request = null;
                    if (e) {
                        t.error = {
                            status: i.status,
                            message: "HLS playlist request error at URL: " + t.src + ".",
                            responseText: i.responseText,
                            code: 2
                        };
                        if (t.state === "HAVE_NOTHING") {
                            t.started = false
                        }
                        return t.trigger("error")
                    }
                    t.src = Ld(t.handleManifestRedirects, t.src, i);
                    var r = t.parseManifest_({
                        manifestString: i.responseText,
                        url: t.src
                    });
                    t.setupInitialPlaylist(r)
                }))
            };
            i.srcUri = function e() {
                return typeof this.src === "string" ? this.src : this.src.uri
            };
            i.setupInitialPlaylist = function e(t) {
                this.state = "HAVE_MASTER";
                if (t.playlists) {
                    this.master = t;
                    Ah(this.master, this.srcUri());
                    t.playlists.forEach((function(e) {
                        e.segments = Rh(e);
                        e.segments.forEach((function(t) {
                            Nh(t, e.resolvedUri)
                        }))
                    }));
                    this.trigger("loadedplaylist");
                    if (!this.request) {
                        this.media(this.master.playlists[0])
                    }
                    return
                }
                var i = this.srcUri() || s.location.href;
                this.master = Ih(t, i);
                this.haveMetadata({
                    playlistObject: t,
                    url: i,
                    id: this.master.playlists[0].id
                });
                this.trigger("loadedmetadata")
            };
            return t
        }(Ph);
        var jh = xd.xhr,
            Hh = xd.mergeOptions;
        var qh = function e(t, i, r, n) {
            var a = t.responseType === "arraybuffer" ? t.response : t.responseText;
            if (!i && a) {
                t.responseTime = Date.now();
                t.roundTripTime = t.responseTime - t.requestTime;
                t.bytesReceived = a.byteLength || a.length;
                if (!t.bandwidth) {
                    t.bandwidth = Math.floor(t.bytesReceived / t.roundTripTime * 8 * 1e3)
                }
            }
            if (r.headers) {
                t.responseHeaders = r.headers
            }
            if (i && i.code === "ETIMEDOUT") {
                t.timedout = true
            }
            if (!i && !t.aborted && r.statusCode !== 200 && r.statusCode !== 206 && r.statusCode !== 0) {
                i = new Error("XHR Failed with a response of: " + (t && (a || t.responseText)))
            }
            n(i, t)
        };
        var Vh = function e() {
            var t = function e(t, i) {
                t = Hh({
                    timeout: 45e3
                }, t);
                var r = e.beforeRequest || xd.Vhs.xhr.beforeRequest;
                if (r && typeof r === "function") {
                    var n = r(t);
                    if (n) {
                        t = n
                    }
                }
                var a = xd.Vhs.xhr.original === true ? jh : xd.Vhs.xhr;
                var s = a(t, (function(e, t) {
                    return qh(s, e, t, i)
                }));
                var o = s.abort;
                s.abort = function() {
                    s.aborted = true;
                    return o.apply(s, arguments)
                };
                s.uri = t.uri;
                s.requestTime = Date.now();
                return s
            };
            t.original = true;
            return t
        };
        var Wh = function e(t) {
            var i;
            var r = t.offset;
            if (typeof t.offset === "bigint" || typeof t.length === "bigint") {
                i = s.BigInt(t.offset) + s.BigInt(t.length) - s.BigInt(1)
            } else {
                i = t.offset + t.length - 1
            }
            return "bytes=" + r + "-" + i
        };
        var Gh = function e(t) {
            var i = {};
            if (t.byterange) {
                i.Range = Wh(t.byterange)
            }
            return i
        };
        var Xh = function e(t, i) {
            return t.start(i) + "-" + t.end(i)
        };
        var zh = function e(t, i) {
            var r = t.toString(16);
            return "00".substring(0, 2 - r.length) + r + (i % 2 ? " " : "")
        };
        var Kh = function e(t) {
            if (t >= 32 && t < 126) {
                return String.fromCharCode(t)
            }
            return "."
        };
        var Yh = function e(t) {
            var i = {};
            Object.keys(t).forEach((function(e) {
                var r = t[e];
                if (jt(r)) {
                    i[e] = {
                        bytes: r.buffer,
                        byteOffset: r.byteOffset,
                        byteLength: r.byteLength
                    }
                } else {
                    i[e] = r
                }
            }));
            return i
        };
        var $h = function e(t) {
            var i = t.byterange || {
                length: Infinity,
                offset: 0
            };
            return [i.length, i.offset, t.resolvedUri].join(",")
        };
        var Qh = function e(t) {
            return t.resolvedUri
        };
        var Jh = function e(t) {
            var i = Array.prototype.slice.call(t);
            var r = 16;
            var n = "";
            var a;
            var s;
            for (var o = 0; o < i.length / r; o++) {
                a = i.slice(o * r, o * r + r).map(zh).join("");
                s = i.slice(o * r, o * r + r).map(Kh).join("");
                n += a + " " + s + "\n"
            }
            return n
        };
        var Zh = function e(t) {
            var i = t.bytes;
            return Jh(i)
        };
        var ep = function e(t) {
            var i = "";
            var r;
            for (r = 0; r < t.length; r++) {
                i += Xh(t, r) + " "
            }
            return i
        };
        var tp = Object.freeze({
            __proto__: null,
            createTransferableMessage: Yh,
            initSegmentId: $h,
            segmentKeyId: Qh,
            hexDump: Jh,
            tagDump: Zh,
            textRanges: ep
        });
        var ip = .25;
        var rp = function e(t, i) {
            if (!i.dateTimeObject) {
                return null
            }
            var r = i.videoTimingInfo.transmuxerPrependedSeconds;
            var n = i.videoTimingInfo.transmuxedPresentationStart;
            var a = n + r;
            var s = t - a;
            return new Date(i.dateTimeObject.getTime() + s * 1e3)
        };
        var np = function e(t) {
            return t.transmuxedPresentationEnd - t.transmuxedPresentationStart - t.transmuxerPrependedSeconds
        };
        var ap = function e(t, i) {
            var r;
            try {
                r = new Date(t)
            } catch (e) {
                return null
            }
            if (!i || !i.segments || i.segments.length === 0) {
                return null
            }
            var n = i.segments[0];
            if (r < n.dateTimeObject) {
                return null
            }
            for (var a = 0; a < i.segments.length - 1; a++) {
                n = i.segments[a];
                var s = i.segments[a + 1].dateTimeObject;
                if (r < s) {
                    break
                }
            }
            var o = i.segments[i.segments.length - 1];
            var u = o.dateTimeObject;
            var l = o.videoTimingInfo ? np(o.videoTimingInfo) : o.duration + o.duration * ip;
            var c = new Date(u.getTime() + l * 1e3);
            if (r > c) {
                return null
            }
            if (r > u) {
                n = o
            }
            return {
                segment: n,
                estimatedStart: n.videoTimingInfo ? n.videoTimingInfo.transmuxedPresentationStart : _h.duration(i, i.mediaSequence + i.segments.indexOf(n)),
                type: n.videoTimingInfo ? "accurate" : "estimate"
            }
        };
        var sp = function e(t, i) {
            if (!i || !i.segments || i.segments.length === 0) {
                return null
            }
            var r = 0;
            var n;
            for (var a = 0; a < i.segments.length; a++) {
                n = i.segments[a];
                r = n.videoTimingInfo ? n.videoTimingInfo.transmuxedPresentationEnd : r + n.duration;
                if (t <= r) {
                    break
                }
            }
            var s = i.segments[i.segments.length - 1];
            if (s.videoTimingInfo && s.videoTimingInfo.transmuxedPresentationEnd < t) {
                return null
            }
            if (t > r) {
                if (t > r + s.duration * ip) {
                    return null
                }
                n = s
            }
            return {
                segment: n,
                estimatedStart: n.videoTimingInfo ? n.videoTimingInfo.transmuxedPresentationStart : r - n.duration,
                type: n.videoTimingInfo ? "accurate" : "estimate"
            }
        };
        var op = function e(t, i) {
            var r;
            var n;
            try {
                r = new Date(t);
                n = new Date(i)
            } catch (e) {}
            var a = r.getTime();
            var s = n.getTime();
            return (s - a) / 1e3
        };
        var up = function e(t) {
            if (!t.segments || t.segments.length === 0) {
                return false
            }
            for (var i = 0; i < t.segments.length; i++) {
                var r = t.segments[i];
                if (!r.dateTimeObject) {
                    return false
                }
            }
            return true
        };
        var lp = function e(t) {
            var i = t.playlist,
                r = t.time,
                n = r === void 0 ? undefined : r,
                a = t.callback;
            if (!a) {
                throw new Error("getProgramTime: callback must be provided")
            }
            if (!i || n === undefined) {
                return a({
                    message: "getProgramTime: playlist and time must be provided"
                })
            }
            var s = sp(n, i);
            if (!s) {
                return a({
                    message: "valid programTime was not found"
                })
            }
            if (s.type === "estimate") {
                return a({
                    message: "Accurate programTime could not be determined." + " Please seek to e.seekTime and try again",
                    seekTime: s.estimatedStart
                })
            }
            var o = {
                mediaSeconds: n
            };
            var u = rp(n, s.segment);
            if (u) {
                o.programDateTime = u.toISOString()
            }
            return a(null, o)
        };
        var cp = function e(t) {
            var i = t.programTime,
                r = t.playlist,
                n = t.retryCount,
                a = n === void 0 ? 2 : n,
                s = t.seekTo,
                o = t.pauseAfterSeek,
                u = o === void 0 ? true : o,
                l = t.tech,
                c = t.callback;
            if (!c) {
                throw new Error("seekToProgramTime: callback must be provided")
            }
            if (typeof i === "undefined" || !r || !s) {
                return c({
                    message: "seekToProgramTime: programTime, seekTo and playlist must be provided"
                })
            }
            if (!r.endList && !l.hasStarted_) {
                return c({
                    message: "player must be playing a live stream to start buffering"
                })
            }
            if (!up(r)) {
                return c({
                    message: "programDateTime tags must be provided in the manifest " + r.resolvedUri
                })
            }
            var f = ap(i, r);
            if (!f) {
                return c({
                    message: i + " was not found in the stream"
                })
            }
            var d = f.segment;
            var h = op(d.dateTimeObject, i);
            if (f.type === "estimate") {
                if (a === 0) {
                    return c({
                        message: i + " is not buffered yet. Try again"
                    })
                }
                s(f.estimatedStart + h);
                l.one("seeked", (function() {
                    e({
                        programTime: i,
                        playlist: r,
                        retryCount: a - 1,
                        seekTo: s,
                        pauseAfterSeek: u,
                        tech: l,
                        callback: c
                    })
                }));
                return
            }
            var p = d.start + h;
            var m = function e() {
                return c(null, l.currentTime())
            };
            l.one("seeked", m);
            if (u) {
                l.pause()
            }
            s(p)
        };
        var fp = function e(t, i) {
            if (t.readyState === 4) {
                return i()
            }
            return
        };
        var dp = function e(t, i, r) {
            var n = [];
            var a;
            var s = false;
            var o = function e(t, i, n, a) {
                i.abort();
                s = true;
                return r(t, i, n, a)
            };
            var u = function e(t, i) {
                if (s) {
                    return
                }
                if (t) {
                    return o(t, i, "", n)
                }
                var r = i.responseText.substring(n && n.byteLength || 0, i.responseText.length);
                n = Kt(n, zt(r, true));
                a = a || Xa(n);
                if (n.length < 10 || a && n.length < a + 2) {
                    return fp(i, (function() {
                        return o(t, i, "", n)
                    }))
                }
                var u = ms(n);
                if (u === "ts" && n.length < 188) {
                    return fp(i, (function() {
                        return o(t, i, "", n)
                    }))
                }
                if (!u && n.length < 376) {
                    return fp(i, (function() {
                        return o(t, i, "", n)
                    }))
                }
                return o(null, i, u, n)
            };
            var l = {
                uri: t,
                beforeSend: function e(t) {
                    t.overrideMimeType("text/plain; charset=x-user-defined");
                    t.addEventListener("progress", (function(e) {
                        e.total;
                        e.loaded;
                        return qh(t, null, {
                            statusCode: t.status
                        }, u)
                    }))
                }
            };
            var c = i(l, (function(e, t) {
                return qh(c, e, t, u)
            }));
            return c
        };
        var hp = xd.EventTarget,
            pp = xd.mergeOptions;
        var mp = function e(t, i) {
            if (!Mh(t, i)) {
                return false
            }
            if (t.sidx && i.sidx && (t.sidx.offset !== i.sidx.offset || t.sidx.length !== i.sidx.length)) {
                return false
            } else if (!t.sidx && i.sidx || t.sidx && !i.sidx) {
                return false
            }
            if (t.segments && !i.segments || !t.segments && i.segments) {
                return false
            }
            if (!t.segments && !i.segments) {
                return true
            }
            for (var r = 0; r < t.segments.length; r++) {
                var n = t.segments[r];
                var a = i.segments[r];
                if (n.uri !== a.uri) {
                    return false
                }
                if (!n.byterange && !a.byterange) {
                    continue
                }
                var s = n.byterange;
                var o = a.byterange;
                if (s && !o || !s && o) {
                    return false
                }
                if (s.offset !== o.offset || s.length !== o.length) {
                    return false
                }
            }
            return true
        };
        var vp = function e(t) {
            var i = t.masterXml,
                r = t.srcUrl,
                n = t.clientOffset,
                a = t.sidxMapping,
                s = t.previousManifest;
            var o = Ma(i, {
                manifestUri: r,
                clientOffset: n,
                sidxMapping: a,
                previousManifest: s
            });
            Ah(o, r);
            return o
        };
        var gp = function e(t, i, r) {
            var n = true;
            var a = pp(t, {
                duration: i.duration,
                minimumUpdatePeriod: i.minimumUpdatePeriod,
                timelineStarts: i.timelineStarts
            });
            for (var s = 0; s < i.playlists.length; s++) {
                var o = i.playlists[s];
                if (o.sidx) {
                    var u = Gn(o.sidx);
                    if (r && r[u] && r[u].sidx) {
                        Mn(o, r[u].sidx, o.sidx.resolvedUri)
                    }
                }
                var l = Uh(a, o, mp);
                if (l) {
                    a = l;
                    n = false
                }
            }
            Eh(i, (function(e, t, i, r) {
                if (e.playlists && e.playlists.length) {
                    var s = e.playlists[0].id;
                    var o = Uh(a, e.playlists[0], mp);
                    if (o) {
                        a = o;
                        a.mediaGroups[t][i][r].playlists[0] = a.playlists[s];
                        n = false
                    }
                }
            }));
            if (i.minimumUpdatePeriod !== t.minimumUpdatePeriod) {
                n = false
            }
            if (n) {
                return null
            }
            return a
        };
        var yp = function e(t, i) {
            var r = Boolean(!t.map && !i.map);
            var n = r || Boolean(t.map && i.map && t.map.byterange.offset === i.map.byterange.offset && t.map.byterange.length === i.map.byterange.length);
            return n && t.uri === i.uri && t.byterange.offset === i.byterange.offset && t.byterange.length === i.byterange.length
        };
        var _p = function e(t, i) {
            var r = {};
            for (var n in t) {
                var a = t[n];
                var s = a.sidx;
                if (s) {
                    var o = Gn(s);
                    if (!i[o]) {
                        break
                    }
                    var u = i[o].sidxInfo;
                    if (yp(u, s)) {
                        r[o] = i[o]
                    }
                }
            }
            return r
        };
        var bp = function e(t, i) {
            var r = _p(t.playlists, i);
            var n = r;
            Eh(t, (function(e, t, r, a) {
                if (e.playlists && e.playlists.length) {
                    var s = e.playlists;
                    n = pp(n, _p(s, i))
                }
            }));
            return n
        };
        var Tp = function(e) {
            J(t, e);

            function t(t, i, r, n) {
                var a;
                if (r === void 0) {
                    r = {}
                }
                a = e.call(this) || this;
                a.masterPlaylistLoader_ = n || Y(a);
                if (!n) {
                    a.isMaster_ = true
                }
                var s = r,
                    o = s.withCredentials,
                    u = o === void 0 ? false : o,
                    l = s.handleManifestRedirects,
                    c = l === void 0 ? false : l;
                a.vhs_ = i;
                a.withCredentials = u;
                a.handleManifestRedirects = c;
                if (!t) {
                    throw new Error("A non-empty playlist URL or object is required")
                }
                a.on("minimumUpdatePeriod", (function() {
                    a.refreshXml_()
                }));
                a.on("mediaupdatetimeout", (function() {
                    a.refreshMedia_(a.media().id)
                }));
                a.state = "HAVE_NOTHING";
                a.loadedPlaylists_ = {};
                a.logger_ = Nd("DashPlaylistLoader");
                if (a.isMaster_) {
                    a.masterPlaylistLoader_.srcUrl = t;
                    a.masterPlaylistLoader_.sidxMapping_ = {}
                } else {
                    a.childPlaylist_ = t
                }
                return a
            }
            var i = t.prototype;
            i.requestErrored_ = function e(t, i, r) {
                if (!this.request) {
                    return true
                }
                this.request = null;
                if (t) {
                    this.error = typeof t === "object" && !(t instanceof Error) ? t : {
                        status: i.status,
                        message: "DASH request error at URL: " + i.uri,
                        response: i.response,
                        code: 2
                    };
                    if (r) {
                        this.state = r
                    }
                    this.trigger("error");
                    return true
                }
            };
            i.addSidxSegments_ = function e(t, i, r) {
                var n = this;
                var a = t.sidx && Gn(t.sidx);
                if (!t.sidx || !a || this.masterPlaylistLoader_.sidxMapping_[a]) {
                    this.mediaRequest_ = s.setTimeout((function() {
                        return r(false)
                    }), 0);
                    return
                }
                var o = Ld(this.handleManifestRedirects, t.sidx.resolvedUri);
                var u = function e(s, o) {
                    if (n.requestErrored_(s, o, i)) {
                        return
                    }
                    var u = n.masterPlaylistLoader_.sidxMapping_;
                    var l;
                    try {
                        l = Va(qt(o.response).subarray(8))
                    } catch (e) {
                        n.requestErrored_(e, o, i);
                        return
                    }
                    u[a] = {
                        sidxInfo: t.sidx,
                        sidx: l
                    };
                    Mn(t, l, t.sidx.resolvedUri);
                    return r(true)
                };
                this.request = dp(o, this.vhs_.xhr, (function(e, i, r, a) {
                    if (e) {
                        return u(e, i)
                    }
                    if (!r || r !== "mp4") {
                        return u({
                            status: i.status,
                            message: "Unsupported " + (r || "unknown") + " container type for sidx segment at URL: " + o,
                            response: "",
                            playlist: t,
                            internal: true,
                            blacklistDuration: Infinity,
                            code: 2
                        }, i)
                    }
                    var s = t.sidx.byterange,
                        l = s.offset,
                        c = s.length;
                    if (a.length >= c + l) {
                        return u(e, {
                            response: a.subarray(l, l + c),
                            status: i.status,
                            uri: i.uri
                        })
                    }
                    n.request = n.vhs_.xhr({
                        uri: o,
                        responseType: "arraybuffer",
                        headers: Gh({
                            byterange: t.sidx.byterange
                        })
                    }, u)
                }))
            };
            i.dispose = function e() {
                this.trigger("dispose");
                this.stopRequest();
                this.loadedPlaylists_ = {};
                s.clearTimeout(this.minimumUpdatePeriodTimeout_);
                s.clearTimeout(this.mediaRequest_);
                s.clearTimeout(this.mediaUpdateTimeout);
                this.mediaUpdateTimeout = null;
                this.mediaRequest_ = null;
                this.minimumUpdatePeriodTimeout_ = null;
                if (this.masterPlaylistLoader_.createMupOnMedia_) {
                    this.off("loadedmetadata", this.masterPlaylistLoader_.createMupOnMedia_);
                    this.masterPlaylistLoader_.createMupOnMedia_ = null
                }
                this.off()
            };
            i.hasPendingRequest = function e() {
                return this.request || this.mediaRequest_
            };
            i.stopRequest = function e() {
                if (this.request) {
                    var t = this.request;
                    this.request = null;
                    t.onreadystatechange = null;
                    t.abort()
                }
            };
            i.media = function e(t) {
                var i = this;
                if (!t) {
                    return this.media_
                }
                if (this.state === "HAVE_NOTHING") {
                    throw new Error("Cannot switch media playlist from " + this.state)
                }
                var r = this.state;
                if (typeof t === "string") {
                    if (!this.masterPlaylistLoader_.master.playlists[t]) {
                        throw new Error("Unknown playlist URI: " + t)
                    }
                    t = this.masterPlaylistLoader_.master.playlists[t]
                }
                var n = !this.media_ || t.id !== this.media_.id;
                if (n && this.loadedPlaylists_[t.id] && this.loadedPlaylists_[t.id].endList) {
                    this.state = "HAVE_METADATA";
                    this.media_ = t;
                    if (n) {
                        this.trigger("mediachanging");
                        this.trigger("mediachange")
                    }
                    return
                }
                if (!n) {
                    return
                }
                if (this.media_) {
                    this.trigger("mediachanging")
                }
                this.addSidxSegments_(t, r, (function(e) {
                    i.haveMetadata({
                        startingState: r,
                        playlist: t
                    })
                }))
            };
            i.haveMetadata = function e(t) {
                var i = t.startingState,
                    r = t.playlist;
                this.state = "HAVE_METADATA";
                this.loadedPlaylists_[r.id] = r;
                this.mediaRequest_ = null;
                this.refreshMedia_(r.id);
                if (i === "HAVE_MASTER") {
                    this.trigger("loadedmetadata")
                } else {
                    this.trigger("mediachange")
                }
            };
            i.pause = function e() {
                if (this.masterPlaylistLoader_.createMupOnMedia_) {
                    this.off("loadedmetadata", this.masterPlaylistLoader_.createMupOnMedia_);
                    this.masterPlaylistLoader_.createMupOnMedia_ = null
                }
                this.stopRequest();
                s.clearTimeout(this.mediaUpdateTimeout);
                this.mediaUpdateTimeout = null;
                if (this.isMaster_) {
                    s.clearTimeout(this.masterPlaylistLoader_.minimumUpdatePeriodTimeout_);
                    this.masterPlaylistLoader_.minimumUpdatePeriodTimeout_ = null
                }
                if (this.state === "HAVE_NOTHING") {
                    this.started = false
                }
            };
            i.load = function e(t) {
                var i = this;
                s.clearTimeout(this.mediaUpdateTimeout);
                this.mediaUpdateTimeout = null;
                var r = this.media();
                if (t) {
                    var n = r ? r.targetDuration / 2 * 1e3 : 5 * 1e3;
                    this.mediaUpdateTimeout = s.setTimeout((function() {
                        return i.load()
                    }), n);
                    return
                }
                if (!this.started) {
                    this.start();
                    return
                }
                if (r && !r.endList) {
                    if (this.isMaster_ && !this.minimumUpdatePeriodTimeout_) {
                        this.trigger("minimumUpdatePeriod");
                        this.updateMinimumUpdatePeriodTimeout_()
                    }
                    this.trigger("mediaupdatetimeout")
                } else {
                    this.trigger("loadedplaylist")
                }
            };
            i.start = function e() {
                var t = this;
                this.started = true;
                if (!this.isMaster_) {
                    this.mediaRequest_ = s.setTimeout((function() {
                        return t.haveMaster_()
                    }), 0);
                    return
                }
                this.requestMaster_((function(e, i) {
                    t.haveMaster_();
                    if (!t.hasPendingRequest() && !t.media_) {
                        t.media(t.masterPlaylistLoader_.master.playlists[0])
                    }
                }))
            };
            i.requestMaster_ = function e(t) {
                var i = this;
                this.request = this.vhs_.xhr({
                    uri: this.masterPlaylistLoader_.srcUrl,
                    withCredentials: this.withCredentials
                }, (function(e, r) {
                    if (i.requestErrored_(e, r)) {
                        if (i.state === "HAVE_NOTHING") {
                            i.started = false
                        }
                        return
                    }
                    var n = r.responseText !== i.masterPlaylistLoader_.masterXml_;
                    i.masterPlaylistLoader_.masterXml_ = r.responseText;
                    if (r.responseHeaders && r.responseHeaders.date) {
                        i.masterLoaded_ = Date.parse(r.responseHeaders.date)
                    } else {
                        i.masterLoaded_ = Date.now()
                    }
                    i.masterPlaylistLoader_.srcUrl = Ld(i.handleManifestRedirects, i.masterPlaylistLoader_.srcUrl, r);
                    if (n) {
                        i.handleMaster_();
                        i.syncClientServerClock_((function() {
                            return t(r, n)
                        }));
                        return
                    }
                    return t(r, n)
                }))
            };
            i.syncClientServerClock_ = function e(t) {
                var i = this;
                var r = Ua(this.masterPlaylistLoader_.masterXml_);
                if (r === null) {
                    this.masterPlaylistLoader_.clientOffset_ = this.masterLoaded_ - Date.now();
                    return t()
                }
                if (r.method === "DIRECT") {
                    this.masterPlaylistLoader_.clientOffset_ = r.value - Date.now();
                    return t()
                }
                this.request = this.vhs_.xhr({
                    uri: Dd(this.masterPlaylistLoader_.srcUrl, r.value),
                    method: r.method,
                    withCredentials: this.withCredentials
                }, (function(e, n) {
                    if (!i.request) {
                        return
                    }
                    if (e) {
                        i.masterPlaylistLoader_.clientOffset_ = i.masterLoaded_ - Date.now();
                        return t()
                    }
                    var a;
                    if (r.method === "HEAD") {
                        if (!n.responseHeaders || !n.responseHeaders.date) {
                            a = i.masterLoaded_
                        } else {
                            a = Date.parse(n.responseHeaders.date)
                        }
                    } else {
                        a = Date.parse(n.responseText)
                    }
                    i.masterPlaylistLoader_.clientOffset_ = a - Date.now();
                    t()
                }))
            };
            i.haveMaster_ = function e() {
                this.state = "HAVE_MASTER";
                if (this.isMaster_) {
                    this.trigger("loadedplaylist")
                } else if (!this.media_) {
                    this.media(this.childPlaylist_)
                }
            };
            i.handleMaster_ = function e() {
                this.mediaRequest_ = null;
                var t = this.masterPlaylistLoader_.master;
                var i = vp({
                    masterXml: this.masterPlaylistLoader_.masterXml_,
                    srcUrl: this.masterPlaylistLoader_.srcUrl,
                    clientOffset: this.masterPlaylistLoader_.clientOffset_,
                    sidxMapping: this.masterPlaylistLoader_.sidxMapping_,
                    previousManifest: t
                });
                if (t) {
                    i = gp(t, i, this.masterPlaylistLoader_.sidxMapping_)
                }
                this.masterPlaylistLoader_.master = i ? i : t;
                var r = this.masterPlaylistLoader_.master.locations && this.masterPlaylistLoader_.master.locations[0];
                if (r && r !== this.masterPlaylistLoader_.srcUrl) {
                    this.masterPlaylistLoader_.srcUrl = r
                }
                if (!t || i && i.minimumUpdatePeriod !== t.minimumUpdatePeriod) {
                    this.updateMinimumUpdatePeriodTimeout_()
                }
                return Boolean(i)
            };
            i.updateMinimumUpdatePeriodTimeout_ = function e() {
                var t = this.masterPlaylistLoader_;
                if (t.createMupOnMedia_) {
                    t.off("loadedmetadata", t.createMupOnMedia_);
                    t.createMupOnMedia_ = null
                }
                if (t.minimumUpdatePeriodTimeout_) {
                    s.clearTimeout(t.minimumUpdatePeriodTimeout_);
                    t.minimumUpdatePeriodTimeout_ = null
                }
                var i = t.master && t.master.minimumUpdatePeriod;
                if (i === 0) {
                    if (t.media()) {
                        i = t.media().targetDuration * 1e3
                    } else {
                        t.createMupOnMedia_ = t.updateMinimumUpdatePeriodTimeout_;
                        t.one("loadedmetadata", t.createMupOnMedia_)
                    }
                }
                if (typeof i !== "number" || i <= 0) {
                    if (i < 0) {
                        this.logger_("found invalid minimumUpdatePeriod of " + i + ", not setting a timeout")
                    }
                    return
                }
                this.createMUPTimeout_(i)
            };
            i.createMUPTimeout_ = function e(t) {
                var i = this.masterPlaylistLoader_;
                i.minimumUpdatePeriodTimeout_ = s.setTimeout((function() {
                    i.minimumUpdatePeriodTimeout_ = null;
                    i.trigger("minimumUpdatePeriod");
                    i.createMUPTimeout_(t)
                }), t)
            };
            i.refreshXml_ = function e() {
                var t = this;
                this.requestMaster_((function(e, i) {
                    if (!i) {
                        return
                    }
                    if (t.media_) {
                        t.media_ = t.masterPlaylistLoader_.master.playlists[t.media_.id]
                    }
                    t.masterPlaylistLoader_.sidxMapping_ = bp(t.masterPlaylistLoader_.master, t.masterPlaylistLoader_.sidxMapping_);
                    t.addSidxSegments_(t.media(), t.state, (function(e) {
                        t.refreshMedia_(t.media().id)
                    }))
                }))
            };
            i.refreshMedia_ = function e(t) {
                var i = this;
                if (!t) {
                    throw new Error("refreshMedia_ must take a media id")
                }
                if (this.media_ && this.isMaster_) {
                    this.handleMaster_()
                }
                var r = this.masterPlaylistLoader_.master.playlists;
                var n = !this.media_ || this.media_ !== r[t];
                if (n) {
                    this.media_ = r[t]
                } else {
                    this.trigger("playlistunchanged")
                }
                if (!this.mediaUpdateTimeout) {
                    var a = function e() {
                        if (i.media().endList) {
                            return
                        }
                        i.mediaUpdateTimeout = s.setTimeout((function() {
                            i.trigger("mediaupdatetimeout");
                            e()
                        }), Bh(i.media(), Boolean(n)))
                    };
                    a()
                }
                this.trigger("loadedplaylist")
            };
            return t
        }(hp);
        var Sp = {
            GOAL_BUFFER_LENGTH: 30,
            MAX_GOAL_BUFFER_LENGTH: 60,
            BACK_BUFFER_LENGTH: 30,
            GOAL_BUFFER_LENGTH_RATE: 1,
            INITIAL_BANDWIDTH: 4194304,
            BANDWIDTH_VARIANCE: 1.2,
            BUFFER_LOW_WATER_LINE: 0,
            MAX_BUFFER_LOW_WATER_LINE: 30,
            EXPERIMENTAL_MAX_BUFFER_LOW_WATER_LINE: 16,
            BUFFER_LOW_WATER_LINE_RATE: 1,
            BUFFER_HIGH_WATER_LINE: 30
        };
        var Ep = function e(t) {
            var i = new Uint8Array(new ArrayBuffer(t.length));
            for (var r = 0; r < t.length; r++) {
                i[r] = t.charCodeAt(r)
            }
            return i.buffer
        };
        var wp = function e(t) {
            t.on = t.addEventListener;
            t.off = t.removeEventListener;
            return t
        };
        var kp = function e(t) {
            try {
                return URL.createObjectURL(new Blob([t], {
                    type: "application/javascript"
                }))
            } catch (e) {
                var i = new BlobBuilder;
                i.append(t);
                return URL.createObjectURL(i.getBlob())
            }
        };
        var Cp = function e(t) {
            return function() {
                var e = kp(t);
                var i = wp(new Worker(e));
                i.objURL = e;
                var r = i.terminate;
                i.on = i.addEventListener;
                i.off = i.removeEventListener;
                i.terminate = function() {
                    URL.revokeObjectURL(e);
                    return r.call(this)
                };
                return i
            }
        };
        var Ip = function e(t) {
            return "var browserWorkerPolyFill = " + wp.toString() + ";\n" + "browserWorkerPolyFill(self);\n" + t
        };
        var Ap = function e(t) {
            return t.toString().replace(/^function.+?{/, "").slice(0, -1)
        };
        var xp = Ip(Ap((function() {
            var e = function e() {
                this.init = function() {
                    var e = {};
                    this.on = function(t, i) {
                        if (!e[t]) {
                            e[t] = []
                        }
                        e[t] = e[t].concat(i)
                    };
                    this.off = function(t, i) {
                        var r;
                        if (!e[t]) {
                            return false
                        }
                        r = e[t].indexOf(i);
                        e[t] = e[t].slice();
                        e[t].splice(r, 1);
                        return r > -1
                    };
                    this.trigger = function(t) {
                        var i, r, n, a;
                        i = e[t];
                        if (!i) {
                            return
                        }
                        if (arguments.length === 2) {
                            n = i.length;
                            for (r = 0; r < n; ++r) {
                                i[r].call(this, arguments[1])
                            }
                        } else {
                            a = [];
                            r = arguments.length;
                            for (r = 1; r < arguments.length; ++r) {
                                a.push(arguments[r])
                            }
                            n = i.length;
                            for (r = 0; r < n; ++r) {
                                i[r].apply(this, a)
                            }
                        }
                    };
                    this.dispose = function() {
                        e = {}
                    }
                }
            };
            e.prototype.pipe = function(e) {
                this.on("data", (function(t) {
                    e.push(t)
                }));
                this.on("done", (function(t) {
                    e.flush(t)
                }));
                this.on("partialdone", (function(t) {
                    e.partialFlush(t)
                }));
                this.on("endedtimeline", (function(t) {
                    e.endTimeline(t)
                }));
                this.on("reset", (function(t) {
                    e.reset(t)
                }));
                return e
            };
            e.prototype.push = function(e) {
                this.trigger("data", e)
            };
            e.prototype.flush = function(e) {
                this.trigger("done", e)
            };
            e.prototype.partialFlush = function(e) {
                this.trigger("partialdone", e)
            };
            e.prototype.endTimeline = function(e) {
                this.trigger("endedtimeline", e)
            };
            e.prototype.reset = function(e) {
                this.trigger("reset", e)
            };
            var t = e;
            var i = Math.pow(2, 32);
            var r = function e(t) {
                var r = new DataView(t.buffer, t.byteOffset, t.byteLength);
                var n;
                if (r.getBigUint64) {
                    n = r.getBigUint64(0);
                    if (n < Number.MAX_SAFE_INTEGER) {
                        return Number(n)
                    }
                    return n
                }
                return r.getUint32(0) * i + r.getUint32(4)
            };
            var n = {
                getUint64: r,
                MAX_UINT32: i
            };
            var a = n.MAX_UINT32;
            var s, o, u, l, c, f, d, h, p, m, v, g, y, _, b, T, S, E, w, k, C, I, A, x, P, O, D, L, N, R, M, U, B, F, j, H;
            (function() {
                var e;
                A = {
                    avc1: [],
                    avcC: [],
                    btrt: [],
                    dinf: [],
                    dref: [],
                    esds: [],
                    ftyp: [],
                    hdlr: [],
                    mdat: [],
                    mdhd: [],
                    mdia: [],
                    mfhd: [],
                    minf: [],
                    moof: [],
                    moov: [],
                    mp4a: [],
                    mvex: [],
                    mvhd: [],
                    pasp: [],
                    sdtp: [],
                    smhd: [],
                    stbl: [],
                    stco: [],
                    stsc: [],
                    stsd: [],
                    stsz: [],
                    stts: [],
                    styp: [],
                    tfdt: [],
                    tfhd: [],
                    traf: [],
                    trak: [],
                    trun: [],
                    trex: [],
                    tkhd: [],
                    vmhd: []
                };
                if (typeof Uint8Array === "undefined") {
                    return
                }
                for (e in A) {
                    if (A.hasOwnProperty(e)) {
                        A[e] = [e.charCodeAt(0), e.charCodeAt(1), e.charCodeAt(2), e.charCodeAt(3)]
                    }
                }
                x = new Uint8Array(["i".charCodeAt(0), "s".charCodeAt(0), "o".charCodeAt(0), "m".charCodeAt(0)]);
                O = new Uint8Array(["a".charCodeAt(0), "v".charCodeAt(0), "c".charCodeAt(0), "1".charCodeAt(0)]);
                P = new Uint8Array([0, 0, 0, 1]);
                D = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 118, 105, 100, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 86, 105, 100, 101, 111, 72, 97, 110, 100, 108, 101, 114, 0]);
                L = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 115, 111, 117, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 83, 111, 117, 110, 100, 72, 97, 110, 100, 108, 101, 114, 0]);
                N = {
                    video: D,
                    audio: L
                };
                U = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 12, 117, 114, 108, 32, 0, 0, 0, 1]);
                M = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0]);
                B = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0]);
                F = B;
                j = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
                H = B;
                R = new Uint8Array([0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0])
            })();
            s = function e(t) {
                var i = [],
                    r = 0,
                    n, a, s;
                for (n = 1; n < arguments.length; n++) {
                    i.push(arguments[n])
                }
                n = i.length;
                while (n--) {
                    r += i[n].byteLength
                }
                a = new Uint8Array(r + 8);
                s = new DataView(a.buffer, a.byteOffset, a.byteLength);
                s.setUint32(0, a.byteLength);
                a.set(t, 4);
                for (n = 0, r = 8; n < i.length; n++) {
                    a.set(i[n], r);
                    r += i[n].byteLength
                }
                return a
            };
            o = function e() {
                return s(A.dinf, s(A.dref, U))
            };
            u = function e(t) {
                return s(A.esds, new Uint8Array([0, 0, 0, 0, 3, 25, 0, 0, 0, 4, 17, 64, 21, 0, 6, 0, 0, 0, 218, 192, 0, 0, 218, 192, 5, 2, t.audioobjecttype << 3 | t.samplingfrequencyindex >>> 1, t.samplingfrequencyindex << 7 | t.channelcount << 3, 6, 1, 2]))
            };
            l = function e() {
                return s(A.ftyp, x, P, x, O)
            };
            T = function e(t) {
                return s(A.hdlr, N[t])
            };
            c = function e(t) {
                return s(A.mdat, t)
            };
            b = function e(t) {
                var i = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 3, 0, 1, 95, 144, t.duration >>> 24 & 255, t.duration >>> 16 & 255, t.duration >>> 8 & 255, t.duration & 255, 85, 196, 0, 0]);
                if (t.samplerate) {
                    i[12] = t.samplerate >>> 24 & 255;
                    i[13] = t.samplerate >>> 16 & 255;
                    i[14] = t.samplerate >>> 8 & 255;
                    i[15] = t.samplerate & 255
                }
                return s(A.mdhd, i)
            };
            _ = function e(t) {
                return s(A.mdia, b(t), T(t.type), d(t))
            };
            f = function e(t) {
                return s(A.mfhd, new Uint8Array([0, 0, 0, 0, (t & 4278190080) >> 24, (t & 16711680) >> 16, (t & 65280) >> 8, t & 255]))
            };
            d = function e(t) {
                return s(A.minf, t.type === "video" ? s(A.vmhd, R) : s(A.smhd, M), o(), E(t))
            };
            h = function e(t, i) {
                var r = [],
                    n = i.length;
                while (n--) {
                    r[n] = k(i[n])
                }
                return s.apply(null, [A.moof, f(t)].concat(r))
            };
            p = function e(t) {
                var i = t.length,
                    r = [];
                while (i--) {
                    r[i] = g(t[i])
                }
                return s.apply(null, [A.moov, v(4294967295)].concat(r).concat(m(t)))
            };
            m = function e(t) {
                var i = t.length,
                    r = [];
                while (i--) {
                    r[i] = C(t[i])
                }
                return s.apply(null, [A.mvex].concat(r))
            };
            v = function e(t) {
                var i = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 1, 95, 144, (t & 4278190080) >> 24, (t & 16711680) >> 16, (t & 65280) >> 8, t & 255, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255]);
                return s(A.mvhd, i)
            };
            S = function e(t) {
                var i = t.samples || [],
                    r = new Uint8Array(4 + i.length),
                    n, a;
                for (a = 0; a < i.length; a++) {
                    n = i[a].flags;
                    r[a + 4] = n.dependsOn << 4 | n.isDependedOn << 2 | n.hasRedundancy
                }
                return s(A.sdtp, r)
            };
            E = function e(t) {
                return s(A.stbl, w(t), s(A.stts, H), s(A.stsc, F), s(A.stsz, j), s(A.stco, B))
            };
            (function() {
                var e, t;
                w = function i(r) {
                    return s(A.stsd, new Uint8Array([0, 0, 0, 0, 0, 0, 0, 1]), r.type === "video" ? e(r) : t(r))
                };
                e = function e(t) {
                    var i = t.sps || [],
                        r = t.pps || [],
                        n = [],
                        a = [],
                        o, u;
                    for (o = 0; o < i.length; o++) {
                        n.push((i[o].byteLength & 65280) >>> 8);
                        n.push(i[o].byteLength & 255);
                        n = n.concat(Array.prototype.slice.call(i[o]))
                    }
                    for (o = 0; o < r.length; o++) {
                        a.push((r[o].byteLength & 65280) >>> 8);
                        a.push(r[o].byteLength & 255);
                        a = a.concat(Array.prototype.slice.call(r[o]))
                    }
                    u = [A.avc1, new Uint8Array([0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (t.width & 65280) >> 8, t.width & 255, (t.height & 65280) >> 8, t.height & 255, 0, 72, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 1, 19, 118, 105, 100, 101, 111, 106, 115, 45, 99, 111, 110, 116, 114, 105, 98, 45, 104, 108, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 17, 17]), s(A.avcC, new Uint8Array([1, t.profileIdc, t.profileCompatibility, t.levelIdc, 255].concat([i.length], n, [r.length], a))), s(A.btrt, new Uint8Array([0, 28, 156, 128, 0, 45, 198, 192, 0, 45, 198, 192]))];
                    if (t.sarRatio) {
                        var l = t.sarRatio[0],
                            c = t.sarRatio[1];
                        u.push(s(A.pasp, new Uint8Array([(l & 4278190080) >> 24, (l & 16711680) >> 16, (l & 65280) >> 8, l & 255, (c & 4278190080) >> 24, (c & 16711680) >> 16, (c & 65280) >> 8, c & 255])))
                    }
                    return s.apply(null, u)
                };
                t = function e(t) {
                    return s(A.mp4a, new Uint8Array([0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, (t.channelcount & 65280) >> 8, t.channelcount & 255, (t.samplesize & 65280) >> 8, t.samplesize & 255, 0, 0, 0, 0, (t.samplerate & 65280) >> 8, t.samplerate & 255, 0, 0]), u(t))
                }
            })();
            y = function e(t) {
                var i = new Uint8Array([0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, (t.id & 4278190080) >> 24, (t.id & 16711680) >> 16, (t.id & 65280) >> 8, t.id & 255, 0, 0, 0, 0, (t.duration & 4278190080) >> 24, (t.duration & 16711680) >> 16, (t.duration & 65280) >> 8, t.duration & 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, (t.width & 65280) >> 8, t.width & 255, 0, 0, (t.height & 65280) >> 8, t.height & 255, 0, 0]);
                return s(A.tkhd, i)
            };
            k = function e(t) {
                var i, r, n, o, u, l, c;
                i = s(A.tfhd, new Uint8Array([0, 0, 0, 58, (t.id & 4278190080) >> 24, (t.id & 16711680) >> 16, (t.id & 65280) >> 8, t.id & 255, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]));
                l = Math.floor(t.baseMediaDecodeTime / a);
                c = Math.floor(t.baseMediaDecodeTime % a);
                r = s(A.tfdt, new Uint8Array([1, 0, 0, 0, l >>> 24 & 255, l >>> 16 & 255, l >>> 8 & 255, l & 255, c >>> 24 & 255, c >>> 16 & 255, c >>> 8 & 255, c & 255]));
                u = 32 + 20 + 8 + 16 + 8 + 8;
                if (t.type === "audio") {
                    n = I(t, u);
                    return s(A.traf, i, r, n)
                }
                o = S(t);
                n = I(t, o.length + u);
                return s(A.traf, i, r, n, o)
            };
            g = function e(t) {
                t.duration = t.duration || 4294967295;
                return s(A.trak, y(t), _(t))
            };
            C = function e(t) {
                var i = new Uint8Array([0, 0, 0, 0, (t.id & 4278190080) >> 24, (t.id & 16711680) >> 16, (t.id & 65280) >> 8, t.id & 255, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]);
                if (t.type !== "video") {
                    i[i.length - 1] = 0
                }
                return s(A.trex, i)
            };
            (function() {
                var e, t, i;
                i = function e(t, i) {
                    var r = 0,
                        n = 0,
                        a = 0,
                        s = 0;
                    if (t.length) {
                        if (t[0].duration !== undefined) {
                            r = 1
                        }
                        if (t[0].size !== undefined) {
                            n = 2
                        }
                        if (t[0].flags !== undefined) {
                            a = 4
                        }
                        if (t[0].compositionTimeOffset !== undefined) {
                            s = 8
                        }
                    }
                    return [0, 0, r | n | a | s, 1, (t.length & 4278190080) >>> 24, (t.length & 16711680) >>> 16, (t.length & 65280) >>> 8, t.length & 255, (i & 4278190080) >>> 24, (i & 16711680) >>> 16, (i & 65280) >>> 8, i & 255]
                };
                t = function e(t, r) {
                    var n, a, o, u, l, c;
                    u = t.samples || [];
                    r += 8 + 12 + 16 * u.length;
                    o = i(u, r);
                    a = new Uint8Array(o.length + u.length * 16);
                    a.set(o);
                    n = o.length;
                    for (c = 0; c < u.length; c++) {
                        l = u[c];
                        a[n++] = (l.duration & 4278190080) >>> 24;
                        a[n++] = (l.duration & 16711680) >>> 16;
                        a[n++] = (l.duration & 65280) >>> 8;
                        a[n++] = l.duration & 255;
                        a[n++] = (l.size & 4278190080) >>> 24;
                        a[n++] = (l.size & 16711680) >>> 16;
                        a[n++] = (l.size & 65280) >>> 8;
                        a[n++] = l.size & 255;
                        a[n++] = l.flags.isLeading << 2 | l.flags.dependsOn;
                        a[n++] = l.flags.isDependedOn << 6 | l.flags.hasRedundancy << 4 | l.flags.paddingValue << 1 | l.flags.isNonSyncSample;
                        a[n++] = l.flags.degradationPriority & 240 << 8;
                        a[n++] = l.flags.degradationPriority & 15;
                        a[n++] = (l.compositionTimeOffset & 4278190080) >>> 24;
                        a[n++] = (l.compositionTimeOffset & 16711680) >>> 16;
                        a[n++] = (l.compositionTimeOffset & 65280) >>> 8;
                        a[n++] = l.compositionTimeOffset & 255
                    }
                    return s(A.trun, a)
                };
                e = function e(t, r) {
                    var n, a, o, u, l, c;
                    u = t.samples || [];
                    r += 8 + 12 + 8 * u.length;
                    o = i(u, r);
                    n = new Uint8Array(o.length + u.length * 8);
                    n.set(o);
                    a = o.length;
                    for (c = 0; c < u.length; c++) {
                        l = u[c];
                        n[a++] = (l.duration & 4278190080) >>> 24;
                        n[a++] = (l.duration & 16711680) >>> 16;
                        n[a++] = (l.duration & 65280) >>> 8;
                        n[a++] = l.duration & 255;
                        n[a++] = (l.size & 4278190080) >>> 24;
                        n[a++] = (l.size & 16711680) >>> 16;
                        n[a++] = (l.size & 65280) >>> 8;
                        n[a++] = l.size & 255
                    }
                    return s(A.trun, n)
                };
                I = function i(r, n) {
                    if (r.type === "audio") {
                        return e(r, n)
                    }
                    return t(r, n)
                }
            })();
            var q = {
                ftyp: l,
                mdat: c,
                moof: h,
                moov: p,
                initSegment: function e(t) {
                    var i = l(),
                        r = p(t),
                        n;
                    n = new Uint8Array(i.byteLength + r.byteLength);
                    n.set(i);
                    n.set(r, i.byteLength);
                    return n
                }
            };
            var V = function e(t) {
                var i, r, n = [],
                    a = [];
                a.byteLength = 0;
                a.nalCount = 0;
                a.duration = 0;
                n.byteLength = 0;
                for (i = 0; i < t.length; i++) {
                    r = t[i];
                    if (r.nalUnitType === "access_unit_delimiter_rbsp") {
                        if (n.length) {
                            n.duration = r.dts - n.dts;
                            a.byteLength += n.byteLength;
                            a.nalCount += n.length;
                            a.duration += n.duration;
                            a.push(n)
                        }
                        n = [r];
                        n.byteLength = r.data.byteLength;
                        n.pts = r.pts;
                        n.dts = r.dts
                    } else {
                        if (r.nalUnitType === "slice_layer_without_partitioning_rbsp_idr") {
                            n.keyFrame = true
                        }
                        n.duration = r.dts - n.dts;
                        n.byteLength += r.data.byteLength;
                        n.push(r)
                    }
                }
                if (a.length && (!n.duration || n.duration <= 0)) {
                    n.duration = a[a.length - 1].duration
                }
                a.byteLength += n.byteLength;
                a.nalCount += n.length;
                a.duration += n.duration;
                a.push(n);
                return a
            };
            var W = function e(t) {
                var i, r, n = [],
                    a = [];
                n.byteLength = 0;
                n.nalCount = 0;
                n.duration = 0;
                n.pts = t[0].pts;
                n.dts = t[0].dts;
                a.byteLength = 0;
                a.nalCount = 0;
                a.duration = 0;
                a.pts = t[0].pts;
                a.dts = t[0].dts;
                for (i = 0; i < t.length; i++) {
                    r = t[i];
                    if (r.keyFrame) {
                        if (n.length) {
                            a.push(n);
                            a.byteLength += n.byteLength;
                            a.nalCount += n.nalCount;
                            a.duration += n.duration
                        }
                        n = [r];
                        n.nalCount = r.length;
                        n.byteLength = r.byteLength;
                        n.pts = r.pts;
                        n.dts = r.dts;
                        n.duration = r.duration
                    } else {
                        n.duration += r.duration;
                        n.nalCount += r.length;
                        n.byteLength += r.byteLength;
                        n.push(r)
                    }
                }
                if (a.length && n.duration <= 0) {
                    n.duration = a[a.length - 1].duration
                }
                a.byteLength += n.byteLength;
                a.nalCount += n.nalCount;
                a.duration += n.duration;
                a.push(n);
                return a
            };
            var G = function e(t) {
                var i;
                if (!t[0][0].keyFrame && t.length > 1) {
                    i = t.shift();
                    t.byteLength -= i.byteLength;
                    t.nalCount -= i.nalCount;
                    t[0][0].dts = i.dts;
                    t[0][0].pts = i.pts;
                    t[0][0].duration += i.duration
                }
                return t
            };
            var X = function e() {
                return {
                    size: 0,
                    flags: {
                        isLeading: 0,
                        dependsOn: 1,
                        isDependedOn: 0,
                        hasRedundancy: 0,
                        degradationPriority: 0,
                        isNonSyncSample: 1
                    }
                }
            };
            var z = function e(t, i) {
                var r = X();
                r.dataOffset = i;
                r.compositionTimeOffset = t.pts - t.dts;
                r.duration = t.duration;
                r.size = 4 * t.length;
                r.size += t.byteLength;
                if (t.keyFrame) {
                    r.flags.dependsOn = 2;
                    r.flags.isNonSyncSample = 0
                }
                return r
            };
            var K = function e(t, i) {
                var r, n, a, s, o, u = i || 0,
                    l = [];
                for (r = 0; r < t.length; r++) {
                    s = t[r];
                    for (n = 0; n < s.length; n++) {
                        o = s[n];
                        a = z(o, u);
                        u += a.size;
                        l.push(a)
                    }
                }
                return l
            };
            var Y = function e(t) {
                var i, r, n, a, s, o, u = 0,
                    l = t.byteLength,
                    c = t.nalCount,
                    f = l + 4 * c,
                    d = new Uint8Array(f),
                    h = new DataView(d.buffer);
                for (i = 0; i < t.length; i++) {
                    a = t[i];
                    for (r = 0; r < a.length; r++) {
                        s = a[r];
                        for (n = 0; n < s.length; n++) {
                            o = s[n];
                            h.setUint32(u, o.data.byteLength);
                            u += 4;
                            d.set(o.data, u);
                            u += o.data.byteLength
                        }
                    }
                }
                return d
            };
            var $ = function e(t, i) {
                var r, n = i || 0,
                    a = [];
                r = z(t, n);
                a.push(r);
                return a
            };
            var Q = function e(t) {
                var i, r, n = 0,
                    a = t.byteLength,
                    s = t.length,
                    o = a + 4 * s,
                    u = new Uint8Array(o),
                    l = new DataView(u.buffer);
                for (i = 0; i < t.length; i++) {
                    r = t[i];
                    l.setUint32(n, r.data.byteLength);
                    n += 4;
                    u.set(r.data, n);
                    n += r.data.byteLength
                }
                return u
            };
            var J = {
                groupNalsIntoFrames: V,
                groupFramesIntoGops: W,
                extendFirstKeyFrame: G,
                generateSampleTable: K,
                concatenateNalData: Y,
                generateSampleTableForFrame: $,
                concatenateNalDataForFrame: Q
            };
            var Z = [33, 16, 5, 32, 164, 27];
            var ee = [33, 65, 108, 84, 1, 2, 4, 8, 168, 2, 4, 8, 17, 191, 252];
            var te = function e(t) {
                var i = [];
                while (t--) {
                    i.push(0)
                }
                return i
            };
            var ie = function e(t) {
                return Object.keys(t).reduce((function(e, i) {
                    e[i] = new Uint8Array(t[i].reduce((function(e, t) {
                        return e.concat(t)
                    }), []));
                    return e
                }), {})
            };
            var re;
            var ne = function e() {
                if (!re) {
                    var t = {
                        96e3: [Z, [227, 64], te(154), [56]],
                        88200: [Z, [231], te(170), [56]],
                        64e3: [Z, [248, 192], te(240), [56]],
                        48e3: [Z, [255, 192], te(268), [55, 148, 128], te(54), [112]],
                        44100: [Z, [255, 192], te(268), [55, 163, 128], te(84), [112]],
                        32e3: [Z, [255, 192], te(268), [55, 234], te(226), [112]],
                        24e3: [Z, [255, 192], te(268), [55, 255, 128], te(268), [111, 112], te(126), [224]],
                        16e3: [Z, [255, 192], te(268), [55, 255, 128], te(268), [111, 255], te(269), [223, 108], te(195), [1, 192]],
                        12e3: [ee, te(268), [3, 127, 248], te(268), [6, 255, 240], te(268), [13, 255, 224], te(268), [27, 253, 128], te(259), [56]],
                        11025: [ee, te(268), [3, 127, 248], te(268), [6, 255, 240], te(268), [13, 255, 224], te(268), [27, 255, 192], te(268), [55, 175, 128], te(108), [112]],
                        8e3: [ee, te(268), [3, 121, 16], te(47), [7]]
                    };
                    re = ie(t)
                }
                return re
            };
            var ae = 9e4,
                se, oe, ue, le, ce, fe, de;
            se = function e(t) {
                return t * ae
            };
            oe = function e(t, i) {
                return t * i
            };
            ue = function e(t) {
                return t / ae
            };
            le = function e(t, i) {
                return t / i
            };
            ce = function e(t, i) {
                return se(le(t, i))
            };
            fe = function e(t, i) {
                return oe(ue(t), i)
            };
            de = function e(t, i, r) {
                return ue(r ? t : t - i)
            };
            var he = {
                ONE_SECOND_IN_TS: ae,
                secondsToVideoTs: se,
                secondsToAudioTs: oe,
                videoTsToSeconds: ue,
                audioTsToSeconds: le,
                audioTsToVideoTs: ce,
                videoTsToAudioTs: fe,
                metadataTsToSeconds: de
            };
            var pe = function e(t) {
                var i, r, n = 0;
                for (i = 0; i < t.length; i++) {
                    r = t[i];
                    n += r.data.byteLength
                }
                return n
            };
            var me = function e(t, i, r, n) {
                var a, s = 0,
                    o = 0,
                    u = 0,
                    l = 0,
                    c, f, d;
                if (!i.length) {
                    return
                }
                a = he.audioTsToVideoTs(t.baseMediaDecodeTime, t.samplerate);
                s = Math.ceil(he.ONE_SECOND_IN_TS / (t.samplerate / 1024));
                if (r && n) {
                    o = a - Math.max(r, n);
                    u = Math.floor(o / s);
                    l = u * s
                }
                if (u < 1 || l > he.ONE_SECOND_IN_TS / 2) {
                    return
                }
                c = ne()[t.samplerate];
                if (!c) {
                    c = i[0].data
                }
                for (f = 0; f < u; f++) {
                    d = i[0];
                    i.splice(0, 0, {
                        data: c,
                        dts: d.dts - s,
                        pts: d.pts - s
                    })
                }
                t.baseMediaDecodeTime -= Math.floor(he.videoTsToAudioTs(l, t.samplerate));
                return l
            };
            var ve = function e(t, i, r) {
                if (i.minSegmentDts >= r) {
                    return t
                }
                i.minSegmentDts = Infinity;
                return t.filter((function(e) {
                    if (e.dts >= r) {
                        i.minSegmentDts = Math.min(i.minSegmentDts, e.dts);
                        i.minSegmentPts = i.minSegmentDts;
                        return true
                    }
                    return false
                }))
            };
            var ge = function e(t) {
                var i, r, n = [];
                for (i = 0; i < t.length; i++) {
                    r = t[i];
                    n.push({
                        size: r.data.byteLength,
                        duration: 1024
                    })
                }
                return n
            };
            var ye = function e(t) {
                var i, r, n = 0,
                    a = new Uint8Array(pe(t));
                for (i = 0; i < t.length; i++) {
                    r = t[i];
                    a.set(r.data, n);
                    n += r.data.byteLength
                }
                return a
            };
            var _e = {
                prefixWithSilence: me,
                trimAdtsFramesByEarliestDts: ve,
                generateSampleTable: ge,
                concatenateFrameData: ye
            };
            var be = he.ONE_SECOND_IN_TS;
            var Te = function e(t, i) {
                if (typeof i.pts === "number") {
                    if (t.timelineStartInfo.pts === undefined) {
                        t.timelineStartInfo.pts = i.pts
                    }
                    if (t.minSegmentPts === undefined) {
                        t.minSegmentPts = i.pts
                    } else {
                        t.minSegmentPts = Math.min(t.minSegmentPts, i.pts)
                    }
                    if (t.maxSegmentPts === undefined) {
                        t.maxSegmentPts = i.pts
                    } else {
                        t.maxSegmentPts = Math.max(t.maxSegmentPts, i.pts)
                    }
                }
                if (typeof i.dts === "number") {
                    if (t.timelineStartInfo.dts === undefined) {
                        t.timelineStartInfo.dts = i.dts
                    }
                    if (t.minSegmentDts === undefined) {
                        t.minSegmentDts = i.dts
                    } else {
                        t.minSegmentDts = Math.min(t.minSegmentDts, i.dts)
                    }
                    if (t.maxSegmentDts === undefined) {
                        t.maxSegmentDts = i.dts
                    } else {
                        t.maxSegmentDts = Math.max(t.maxSegmentDts, i.dts)
                    }
                }
            };
            var Se = function e(t) {
                delete t.minSegmentDts;
                delete t.maxSegmentDts;
                delete t.minSegmentPts;
                delete t.maxSegmentPts
            };
            var Ee = function e(t, i) {
                var r, n, a = t.minSegmentDts;
                if (!i) {
                    a -= t.timelineStartInfo.dts
                }
                r = t.timelineStartInfo.baseMediaDecodeTime;
                r += a;
                r = Math.max(0, r);
                if (t.type === "audio") {
                    n = t.samplerate / be;
                    r *= n;
                    r = Math.floor(r)
                }
                return r
            };
            var we = {
                clearDtsInfo: Se,
                calculateTrackBaseMediaDecodeTime: Ee,
                collectDtsInfo: Te
            };
            var ke = 4,
                Ce = 128;
            var Ie = function e(t) {
                var i = 0,
                    r = {
                        payloadType: -1,
                        payloadSize: 0
                    },
                    n = 0,
                    a = 0;
                while (i < t.byteLength) {
                    if (t[i] === Ce) {
                        break
                    }
                    while (t[i] === 255) {
                        n += 255;
                        i++
                    }
                    n += t[i++];
                    while (t[i] === 255) {
                        a += 255;
                        i++
                    }
                    a += t[i++];
                    if (!r.payload && n === ke) {
                        var s = String.fromCharCode(t[i + 3], t[i + 4], t[i + 5], t[i + 6]);
                        if (s === "GA94") {
                            r.payloadType = n;
                            r.payloadSize = a;
                            r.payload = t.subarray(i, i + a);
                            break
                        } else {
                            r.payload = void 0
                        }
                    }
                    i += a;
                    n = 0;
                    a = 0
                }
                return r
            };
            var Ae = function e(t) {
                if (t.payload[0] !== 181) {
                    return null
                }
                if ((t.payload[1] << 8 | t.payload[2]) !== 49) {
                    return null
                }
                if (String.fromCharCode(t.payload[3], t.payload[4], t.payload[5], t.payload[6]) !== "GA94") {
                    return null
                }
                if (t.payload[7] !== 3) {
                    return null
                }
                return t.payload.subarray(8, t.payload.length - 1)
            };
            var xe = function e(t, i) {
                var r = [],
                    n, a, s, o;
                if (!(i[0] & 64)) {
                    return r
                }
                a = i[0] & 31;
                for (n = 0; n < a; n++) {
                    s = n * 3;
                    o = {
                        type: i[s + 2] & 3,
                        pts: t
                    };
                    if (i[s + 2] & 4) {
                        o.ccData = i[s + 3] << 8 | i[s + 4];
                        r.push(o)
                    }
                }
                return r
            };
            var Pe = function e(t) {
                var i = t.byteLength,
                    r = [],
                    n = 1,
                    a, s;
                while (n < i - 2) {
                    if (t[n] === 0 && t[n + 1] === 0 && t[n + 2] === 3) {
                        r.push(n + 2);
                        n += 2
                    } else {
                        n++
                    }
                }
                if (r.length === 0) {
                    return t
                }
                a = i - r.length;
                s = new Uint8Array(a);
                var o = 0;
                for (n = 0; n < a; o++, n++) {
                    if (o === r[0]) {
                        o++;
                        r.shift()
                    }
                    s[n] = t[o]
                }
                return s
            };
            var Oe = {
                parseSei: Ie,
                parseUserData: Ae,
                parseCaptionPackets: xe,
                discardEmulationPreventionBytes: Pe,
                USER_DATA_REGISTERED_ITU_T_T35: ke
            };
            var De = function e(t) {
                t = t || {};
                e.prototype.init.call(this);
                this.parse708captions_ = typeof t.parse708captions === "boolean" ? t.parse708captions : true;
                this.captionPackets_ = [];
                this.ccStreams_ = [new We(0, 0), new We(0, 1), new We(1, 0), new We(1, 1)];
                if (this.parse708captions_) {
                    this.cc708Stream_ = new Be({
                        captionServices: t.captionServices
                    })
                }
                this.reset();
                this.ccStreams_.forEach((function(e) {
                    e.on("data", this.trigger.bind(this, "data"));
                    e.on("partialdone", this.trigger.bind(this, "partialdone"));
                    e.on("done", this.trigger.bind(this, "done"))
                }), this);
                if (this.parse708captions_) {
                    this.cc708Stream_.on("data", this.trigger.bind(this, "data"));
                    this.cc708Stream_.on("partialdone", this.trigger.bind(this, "partialdone"));
                    this.cc708Stream_.on("done", this.trigger.bind(this, "done"))
                }
            };
            De.prototype = new t;
            De.prototype.push = function(e) {
                var t, i, r;
                if (e.nalUnitType !== "sei_rbsp") {
                    return
                }
                t = Oe.parseSei(e.escapedRBSP);
                if (!t.payload) {
                    return
                }
                if (t.payloadType !== Oe.USER_DATA_REGISTERED_ITU_T_T35) {
                    return
                }
                i = Oe.parseUserData(t);
                if (!i) {
                    return
                }
                if (e.dts < this.latestDts_) {
                    this.ignoreNextEqualDts_ = true;
                    return
                } else if (e.dts === this.latestDts_ && this.ignoreNextEqualDts_) {
                    this.numSameDts_--;
                    if (!this.numSameDts_) {
                        this.ignoreNextEqualDts_ = false
                    }
                    return
                }
                r = Oe.parseCaptionPackets(e.pts, i);
                this.captionPackets_ = this.captionPackets_.concat(r);
                if (this.latestDts_ !== e.dts) {
                    this.numSameDts_ = 0
                }
                this.numSameDts_++;
                this.latestDts_ = e.dts
            };
            De.prototype.flushCCStreams = function(e) {
                this.ccStreams_.forEach((function(t) {
                    return e === "flush" ? t.flush() : t.partialFlush()
                }), this)
            };
            De.prototype.flushStream = function(e) {
                if (!this.captionPackets_.length) {
                    this.flushCCStreams(e);
                    return
                }
                this.captionPackets_.forEach((function(e, t) {
                    e.presortIndex = t
                }));
                this.captionPackets_.sort((function(e, t) {
                    if (e.pts === t.pts) {
                        return e.presortIndex - t.presortIndex
                    }
                    return e.pts - t.pts
                }));
                this.captionPackets_.forEach((function(e) {
                    if (e.type < 2) {
                        this.dispatchCea608Packet(e)
                    } else {
                        this.dispatchCea708Packet(e)
                    }
                }), this);
                this.captionPackets_.length = 0;
                this.flushCCStreams(e)
            };
            De.prototype.flush = function() {
                return this.flushStream("flush")
            };
            De.prototype.partialFlush = function() {
                return this.flushStream("partialFlush")
            };
            De.prototype.reset = function() {
                this.latestDts_ = null;
                this.ignoreNextEqualDts_ = false;
                this.numSameDts_ = 0;
                this.activeCea608Channel_ = [null, null];
                this.ccStreams_.forEach((function(e) {
                    e.reset()
                }))
            };
            De.prototype.dispatchCea608Packet = function(e) {
                if (this.setsTextOrXDSActive(e)) {
                    this.activeCea608Channel_[e.type] = null
                } else if (this.setsChannel1Active(e)) {
                    this.activeCea608Channel_[e.type] = 0
                } else if (this.setsChannel2Active(e)) {
                    this.activeCea608Channel_[e.type] = 1
                }
                if (this.activeCea608Channel_[e.type] === null) {
                    return
                }
                this.ccStreams_[(e.type << 1) + this.activeCea608Channel_[e.type]].push(e)
            };
            De.prototype.setsChannel1Active = function(e) {
                return (e.ccData & 30720) === 4096
            };
            De.prototype.setsChannel2Active = function(e) {
                return (e.ccData & 30720) === 6144
            };
            De.prototype.setsTextOrXDSActive = function(e) {
                return (e.ccData & 28928) === 256 || (e.ccData & 30974) === 4138 || (e.ccData & 30974) === 6186
            };
            De.prototype.dispatchCea708Packet = function(e) {
                if (this.parse708captions_) {
                    this.cc708Stream_.push(e)
                }
            };
            var Le = {
                127: 9834,
                4128: 32,
                4129: 160,
                4133: 8230,
                4138: 352,
                4140: 338,
                4144: 9608,
                4145: 8216,
                4146: 8217,
                4147: 8220,
                4148: 8221,
                4149: 8226,
                4153: 8482,
                4154: 353,
                4156: 339,
                4157: 8480,
                4159: 376,
                4214: 8539,
                4215: 8540,
                4216: 8541,
                4217: 8542,
                4218: 9168,
                4219: 9124,
                4220: 9123,
                4221: 9135,
                4222: 9126,
                4223: 9121,
                4256: 12600
            };
            var Ne = function e(t) {
                var i = Le[t] || t;
                if (t & 4096 && t === i) {
                    return ""
                }
                return String.fromCharCode(i)
            };
            var Re = function e(t) {
                return 32 <= t && t <= 127 || 160 <= t && t <= 255
            };
            var Me = function e(t) {
                this.windowNum = t;
                this.reset()
            };
            Me.prototype.reset = function() {
                this.clearText();
                this.pendingNewLine = false;
                this.winAttr = {};
                this.penAttr = {};
                this.penLoc = {};
                this.penColor = {};
                this.visible = 0;
                this.rowLock = 0;
                this.columnLock = 0;
                this.priority = 0;
                this.relativePositioning = 0;
                this.anchorVertical = 0;
                this.anchorHorizontal = 0;
                this.anchorPoint = 0;
                this.rowCount = 1;
                this.virtualRowCount = this.rowCount + 1;
                this.columnCount = 41;
                this.windowStyle = 0;
                this.penStyle = 0
            };
            Me.prototype.getText = function() {
                return this.rows.join("\n")
            };
            Me.prototype.clearText = function() {
                this.rows = [""];
                this.rowIdx = 0
            };
            Me.prototype.newLine = function(e) {
                if (this.rows.length >= this.virtualRowCount && typeof this.beforeRowOverflow === "function") {
                    this.beforeRowOverflow(e)
                }
                if (this.rows.length > 0) {
                    this.rows.push("");
                    this.rowIdx++
                }
                while (this.rows.length > this.virtualRowCount) {
                    this.rows.shift();
                    this.rowIdx--
                }
            };
            Me.prototype.isEmpty = function() {
                if (this.rows.length === 0) {
                    return true
                } else if (this.rows.length === 1) {
                    return this.rows[0] === ""
                }
                return false
            };
            Me.prototype.addText = function(e) {
                this.rows[this.rowIdx] += e
            };
            Me.prototype.backspace = function() {
                if (!this.isEmpty()) {
                    var e = this.rows[this.rowIdx];
                    this.rows[this.rowIdx] = e.substr(0, e.length - 1)
                }
            };
            var Ue = function e(t, i, r) {
                this.serviceNum = t;
                this.text = "";
                this.currentWindow = new Me(-1);
                this.windows = [];
                this.stream = r;
                if (typeof i === "string") {
                    this.createTextDecoder(i)
                }
            };
            Ue.prototype.init = function(e, t) {
                this.startPts = e;
                for (var i = 0; i < 8; i++) {
                    this.windows[i] = new Me(i);
                    if (typeof t === "function") {
                        this.windows[i].beforeRowOverflow = t
                    }
                }
            };
            Ue.prototype.setCurrentWindow = function(e) {
                this.currentWindow = this.windows[e]
            };
            Ue.prototype.createTextDecoder = function(e) {
                if (typeof TextDecoder === "undefined") {
                    this.stream.trigger("log", {
                        level: "warn",
                        message: "The `encoding` option is unsupported without TextDecoder support"
                    })
                } else {
                    try {
                        this.textDecoder_ = new TextDecoder(e)
                    } catch (t) {
                        this.stream.trigger("log", {
                            level: "warn",
                            message: "TextDecoder could not be created with " + e + " encoding. " + t
                        })
                    }
                }
            };
            var Be = function e(t) {
                t = t || {};
                e.prototype.init.call(this);
                var i = this;
                var r = t.captionServices || {};
                var n = {};
                var a;
                Object.keys(r).forEach((function(e) {
                    a = r[e];
                    if (/^SERVICE/.test(e)) {
                        n[e] = a.encoding
                    }
                }));
                this.serviceEncodings = n;
                this.current708Packet = null;
                this.services = {};
                this.push = function(e) {
                    if (e.type === 3) {
                        i.new708Packet();
                        i.add708Bytes(e)
                    } else {
                        if (i.current708Packet === null) {
                            i.new708Packet()
                        }
                        i.add708Bytes(e)
                    }
                }
            };
            Be.prototype = new t;
            Be.prototype.new708Packet = function() {
                if (this.current708Packet !== null) {
                    this.push708Packet()
                }
                this.current708Packet = {
                    data: [],
                    ptsVals: []
                }
            };
            Be.prototype.add708Bytes = function(e) {
                var t = e.ccData;
                var i = t >>> 8;
                var r = t & 255;
                this.current708Packet.ptsVals.push(e.pts);
                this.current708Packet.data.push(i);
                this.current708Packet.data.push(r)
            };
            Be.prototype.push708Packet = function() {
                var e = this.current708Packet;
                var t = e.data;
                var i = null;
                var r = null;
                var n = 0;
                var a = t[n++];
                e.seq = a >> 6;
                e.sizeCode = a & 63;
                for (; n < t.length; n++) {
                    a = t[n++];
                    i = a >> 5;
                    r = a & 31;
                    if (i === 7 && r > 0) {
                        a = t[n++];
                        i = a
                    }
                    this.pushServiceBlock(i, n, r);
                    if (r > 0) {
                        n += r - 1
                    }
                }
            };
            Be.prototype.pushServiceBlock = function(e, t, i) {
                var r;
                var n = t;
                var a = this.current708Packet.data;
                var s = this.services[e];
                if (!s) {
                    s = this.initService(e, n)
                }
                for (; n < t + i && n < a.length; n++) {
                    r = a[n];
                    if (Re(r)) {
                        n = this.handleText(n, s)
                    } else if (r === 24) {
                        n = this.multiByteCharacter(n, s)
                    } else if (r === 16) {
                        n = this.extendedCommands(n, s)
                    } else if (128 <= r && r <= 135) {
                        n = this.setCurrentWindow(n, s)
                    } else if (152 <= r && r <= 159) {
                        n = this.defineWindow(n, s)
                    } else if (r === 136) {
                        n = this.clearWindows(n, s)
                    } else if (r === 140) {
                        n = this.deleteWindows(n, s)
                    } else if (r === 137) {
                        n = this.displayWindows(n, s)
                    } else if (r === 138) {
                        n = this.hideWindows(n, s)
                    } else if (r === 139) {
                        n = this.toggleWindows(n, s)
                    } else if (r === 151) {
                        n = this.setWindowAttributes(n, s)
                    } else if (r === 144) {
                        n = this.setPenAttributes(n, s)
                    } else if (r === 145) {
                        n = this.setPenColor(n, s)
                    } else if (r === 146) {
                        n = this.setPenLocation(n, s)
                    } else if (r === 143) {
                        s = this.reset(n, s)
                    } else if (r === 8) {
                        s.currentWindow.backspace()
                    } else if (r === 12) {
                        s.currentWindow.clearText()
                    } else if (r === 13) {
                        s.currentWindow.pendingNewLine = true
                    } else if (r === 14) {
                        s.currentWindow.clearText()
                    } else if (r === 141) {
                        n++
                    } else;
                }
            };
            Be.prototype.extendedCommands = function(e, t) {
                var i = this.current708Packet.data;
                var r = i[++e];
                if (Re(r)) {
                    e = this.handleText(e, t, {
                        isExtended: true
                    })
                }
                return e
            };
            Be.prototype.getPts = function(e) {
                return this.current708Packet.ptsVals[Math.floor(e / 2)]
            };
            Be.prototype.initService = function(e, t) {
                var i = "SERVICE" + e;
                var r = this;
                var i;
                var n;
                if (i in this.serviceEncodings) {
                    n = this.serviceEncodings[i]
                }
                this.services[e] = new Ue(e, n, r);
                this.services[e].init(this.getPts(t), (function(t) {
                    r.flushDisplayed(t, r.services[e])
                }));
                return this.services[e]
            };
            Be.prototype.handleText = function(e, t, i) {
                var r = i && i.isExtended;
                var n = i && i.isMultiByte;
                var a = this.current708Packet.data;
                var s = r ? 4096 : 0;
                var o = a[e];
                var u = a[e + 1];
                var l = t.currentWindow;
                var c;
                var f;
                if (t.textDecoder_ && !r) {
                    if (n) {
                        f = [o, u];
                        e++
                    } else {
                        f = [o]
                    }
                    c = t.textDecoder_.decode(new Uint8Array(f))
                } else {
                    c = Ne(s | o)
                }
                if (l.pendingNewLine && !l.isEmpty()) {
                    l.newLine(this.getPts(e))
                }
                l.pendingNewLine = false;
                l.addText(c);
                return e
            };
            Be.prototype.multiByteCharacter = function(e, t) {
                var i = this.current708Packet.data;
                var r = i[e + 1];
                var n = i[e + 2];
                if (Re(r) && Re(n)) {
                    e = this.handleText(++e, t, {
                        isMultiByte: true
                    })
                }
                return e
            };
            Be.prototype.setCurrentWindow = function(e, t) {
                var i = this.current708Packet.data;
                var r = i[e];
                var n = r & 7;
                t.setCurrentWindow(n);
                return e
            };
            Be.prototype.defineWindow = function(e, t) {
                var i = this.current708Packet.data;
                var r = i[e];
                var n = r & 7;
                t.setCurrentWindow(n);
                var a = t.currentWindow;
                r = i[++e];
                a.visible = (r & 32) >> 5;
                a.rowLock = (r & 16) >> 4;
                a.columnLock = (r & 8) >> 3;
                a.priority = r & 7;
                r = i[++e];
                a.relativePositioning = (r & 128) >> 7;
                a.anchorVertical = r & 127;
                r = i[++e];
                a.anchorHorizontal = r;
                r = i[++e];
                a.anchorPoint = (r & 240) >> 4;
                a.rowCount = r & 15;
                r = i[++e];
                a.columnCount = r & 63;
                r = i[++e];
                a.windowStyle = (r & 56) >> 3;
                a.penStyle = r & 7;
                a.virtualRowCount = a.rowCount + 1;
                return e
            };
            Be.prototype.setWindowAttributes = function(e, t) {
                var i = this.current708Packet.data;
                var r = i[e];
                var n = t.currentWindow.winAttr;
                r = i[++e];
                n.fillOpacity = (r & 192) >> 6;
                n.fillRed = (r & 48) >> 4;
                n.fillGreen = (r & 12) >> 2;
                n.fillBlue = r & 3;
                r = i[++e];
                n.borderType = (r & 192) >> 6;
                n.borderRed = (r & 48) >> 4;
                n.borderGreen = (r & 12) >> 2;
                n.borderBlue = r & 3;
                r = i[++e];
                n.borderType += (r & 128) >> 5;
                n.wordWrap = (r & 64) >> 6;
                n.printDirection = (r & 48) >> 4;
                n.scrollDirection = (r & 12) >> 2;
                n.justify = r & 3;
                r = i[++e];
                n.effectSpeed = (r & 240) >> 4;
                n.effectDirection = (r & 12) >> 2;
                n.displayEffect = r & 3;
                return e
            };
            Be.prototype.flushDisplayed = function(e, t) {
                var i = [];
                for (var r = 0; r < 8; r++) {
                    if (t.windows[r].visible && !t.windows[r].isEmpty()) {
                        i.push(t.windows[r].getText())
                    }
                }
                t.endPts = e;
                t.text = i.join("\n\n");
                this.pushCaption(t);
                t.startPts = e
            };
            Be.prototype.pushCaption = function(e) {
                if (e.text !== "") {
                    this.trigger("data", {
                        startPts: e.startPts,
                        endPts: e.endPts,
                        text: e.text,
                        stream: "cc708_" + e.serviceNum
                    });
                    e.text = "";
                    e.startPts = e.endPts
                }
            };
            Be.prototype.displayWindows = function(e, t) {
                var i = this.current708Packet.data;
                var r = i[++e];
                var n = this.getPts(e);
                this.flushDisplayed(n, t);
                for (var a = 0; a < 8; a++) {
                    if (r & 1 << a) {
                        t.windows[a].visible = 1
                    }
                }
                return e
            };
            Be.prototype.hideWindows = function(e, t) {
                var i = this.current708Packet.data;
                var r = i[++e];
                var n = this.getPts(e);
                this.flushDisplayed(n, t);
                for (var a = 0; a < 8; a++) {
                    if (r & 1 << a) {
                        t.windows[a].visible = 0
                    }
                }
                return e
            };
            Be.prototype.toggleWindows = function(e, t) {
                var i = this.current708Packet.data;
                var r = i[++e];
                var n = this.getPts(e);
                this.flushDisplayed(n, t);
                for (var a = 0; a < 8; a++) {
                    if (r & 1 << a) {
                        t.windows[a].visible ^= 1
                    }
                }
                return e
            };
            Be.prototype.clearWindows = function(e, t) {
                var i = this.current708Packet.data;
                var r = i[++e];
                var n = this.getPts(e);
                this.flushDisplayed(n, t);
                for (var a = 0; a < 8; a++) {
                    if (r & 1 << a) {
                        t.windows[a].clearText()
                    }
                }
                return e
            };
            Be.prototype.deleteWindows = function(e, t) {
                var i = this.current708Packet.data;
                var r = i[++e];
                var n = this.getPts(e);
                this.flushDisplayed(n, t);
                for (var a = 0; a < 8; a++) {
                    if (r & 1 << a) {
                        t.windows[a].reset()
                    }
                }
                return e
            };
            Be.prototype.setPenAttributes = function(e, t) {
                var i = this.current708Packet.data;
                var r = i[e];
                var n = t.currentWindow.penAttr;
                r = i[++e];
                n.textTag = (r & 240) >> 4;
                n.offset = (r & 12) >> 2;
                n.penSize = r & 3;
                r = i[++e];
                n.italics = (r & 128) >> 7;
                n.underline = (r & 64) >> 6;
                n.edgeType = (r & 56) >> 3;
                n.fontStyle = r & 7;
                return e
            };
            Be.prototype.setPenColor = function(e, t) {
                var i = this.current708Packet.data;
                var r = i[e];
                var n = t.currentWindow.penColor;
                r = i[++e];
                n.fgOpacity = (r & 192) >> 6;
                n.fgRed = (r & 48) >> 4;
                n.fgGreen = (r & 12) >> 2;
                n.fgBlue = r & 3;
                r = i[++e];
                n.bgOpacity = (r & 192) >> 6;
                n.bgRed = (r & 48) >> 4;
                n.bgGreen = (r & 12) >> 2;
                n.bgBlue = r & 3;
                r = i[++e];
                n.edgeRed = (r & 48) >> 4;
                n.edgeGreen = (r & 12) >> 2;
                n.edgeBlue = r & 3;
                return e
            };
            Be.prototype.setPenLocation = function(e, t) {
                var i = this.current708Packet.data;
                var r = i[e];
                var n = t.currentWindow.penLoc;
                t.currentWindow.pendingNewLine = true;
                r = i[++e];
                n.row = r & 15;
                r = i[++e];
                n.column = r & 63;
                return e
            };
            Be.prototype.reset = function(e, t) {
                var i = this.getPts(e);
                this.flushDisplayed(i, t);
                return this.initService(t.serviceNum, e)
            };
            var Fe = {
                42: 225,
                92: 233,
                94: 237,
                95: 243,
                96: 250,
                123: 231,
                124: 247,
                125: 209,
                126: 241,
                127: 9608,
                304: 174,
                305: 176,
                306: 189,
                307: 191,
                308: 8482,
                309: 162,
                310: 163,
                311: 9834,
                312: 224,
                313: 160,
                314: 232,
                315: 226,
                316: 234,
                317: 238,
                318: 244,
                319: 251,
                544: 193,
                545: 201,
                546: 211,
                547: 218,
                548: 220,
                549: 252,
                550: 8216,
                551: 161,
                552: 42,
                553: 39,
                554: 8212,
                555: 169,
                556: 8480,
                557: 8226,
                558: 8220,
                559: 8221,
                560: 192,
                561: 194,
                562: 199,
                563: 200,
                564: 202,
                565: 203,
                566: 235,
                567: 206,
                568: 207,
                569: 239,
                570: 212,
                571: 217,
                572: 249,
                573: 219,
                574: 171,
                575: 187,
                800: 195,
                801: 227,
                802: 205,
                803: 204,
                804: 236,
                805: 210,
                806: 242,
                807: 213,
                808: 245,
                809: 123,
                810: 125,
                811: 92,
                812: 94,
                813: 95,
                814: 124,
                815: 126,
                816: 196,
                817: 228,
                818: 214,
                819: 246,
                820: 223,
                821: 165,
                822: 164,
                823: 9474,
                824: 197,
                825: 229,
                826: 216,
                827: 248,
                828: 9484,
                829: 9488,
                830: 9492,
                831: 9496
            };
            var je = function e(t) {
                if (t === null) {
                    return ""
                }
                t = Fe[t] || t;
                return String.fromCharCode(t)
            };
            var He = 14;
            var qe = [4352, 4384, 4608, 4640, 5376, 5408, 5632, 5664, 5888, 5920, 4096, 4864, 4896, 5120, 5152];
            var Ve = function e() {
                var t = [],
                    i = He + 1;
                while (i--) {
                    t.push("")
                }
                return t
            };
            var We = function e(t, i) {
                e.prototype.init.call(this);
                this.field_ = t || 0;
                this.dataChannel_ = i || 0;
                this.name_ = "CC" + ((this.field_ << 1 | this.dataChannel_) + 1);
                this.setConstants();
                this.reset();
                this.push = function(e) {
                    var t, i, r, n, a;
                    t = e.ccData & 32639;
                    if (t === this.lastControlCode_) {
                        this.lastControlCode_ = null;
                        return
                    }
                    if ((t & 61440) === 4096) {
                        this.lastControlCode_ = t
                    } else if (t !== this.PADDING_) {
                        this.lastControlCode_ = null
                    }
                    r = t >>> 8;
                    n = t & 255;
                    if (t === this.PADDING_) {
                        return
                    } else if (t === this.RESUME_CAPTION_LOADING_) {
                        this.mode_ = "popOn"
                    } else if (t === this.END_OF_CAPTION_) {
                        this.mode_ = "popOn";
                        this.clearFormatting(e.pts);
                        this.flushDisplayed(e.pts);
                        i = this.displayed_;
                        this.displayed_ = this.nonDisplayed_;
                        this.nonDisplayed_ = i;
                        this.startPts_ = e.pts
                    } else if (t === this.ROLL_UP_2_ROWS_) {
                        this.rollUpRows_ = 2;
                        this.setRollUp(e.pts)
                    } else if (t === this.ROLL_UP_3_ROWS_) {
                        this.rollUpRows_ = 3;
                        this.setRollUp(e.pts)
                    } else if (t === this.ROLL_UP_4_ROWS_) {
                        this.rollUpRows_ = 4;
                        this.setRollUp(e.pts)
                    } else if (t === this.CARRIAGE_RETURN_) {
                        this.clearFormatting(e.pts);
                        this.flushDisplayed(e.pts);
                        this.shiftRowsUp_();
                        this.startPts_ = e.pts
                    } else if (t === this.BACKSPACE_) {
                        if (this.mode_ === "popOn") {
                            this.nonDisplayed_[this.row_] = this.nonDisplayed_[this.row_].slice(0, -1)
                        } else {
                            this.displayed_[this.row_] = this.displayed_[this.row_].slice(0, -1)
                        }
                    } else if (t === this.ERASE_DISPLAYED_MEMORY_) {
                        this.flushDisplayed(e.pts);
                        this.displayed_ = Ve()
                    } else if (t === this.ERASE_NON_DISPLAYED_MEMORY_) {
                        this.nonDisplayed_ = Ve()
                    } else if (t === this.RESUME_DIRECT_CAPTIONING_) {
                        if (this.mode_ !== "paintOn") {
                            this.flushDisplayed(e.pts);
                            this.displayed_ = Ve()
                        }
                        this.mode_ = "paintOn";
                        this.startPts_ = e.pts
                    } else if (this.isSpecialCharacter(r, n)) {
                        r = (r & 3) << 8;
                        a = je(r | n);
                        this[this.mode_](e.pts, a);
                        this.column_++
                    } else if (this.isExtCharacter(r, n)) {
                        if (this.mode_ === "popOn") {
                            this.nonDisplayed_[this.row_] = this.nonDisplayed_[this.row_].slice(0, -1)
                        } else {
                            this.displayed_[this.row_] = this.displayed_[this.row_].slice(0, -1)
                        }
                        r = (r & 3) << 8;
                        a = je(r | n);
                        this[this.mode_](e.pts, a);
                        this.column_++
                    } else if (this.isMidRowCode(r, n)) {
                        this.clearFormatting(e.pts);
                        this[this.mode_](e.pts, " ");
                        this.column_++;
                        if ((n & 14) === 14) {
                            this.addFormatting(e.pts, ["i"])
                        }
                        if ((n & 1) === 1) {
                            this.addFormatting(e.pts, ["u"])
                        }
                    } else if (this.isOffsetControlCode(r, n)) {
                        this.column_ += n & 3
                    } else if (this.isPAC(r, n)) {
                        var s = qe.indexOf(t & 7968);
                        if (this.mode_ === "rollUp") {
                            if (s - this.rollUpRows_ + 1 < 0) {
                                s = this.rollUpRows_ - 1
                            }
                            this.setRollUp(e.pts, s)
                        }
                        if (s !== this.row_) {
                            this.clearFormatting(e.pts);
                            this.row_ = s
                        }
                        if (n & 1 && this.formatting_.indexOf("u") === -1) {
                            this.addFormatting(e.pts, ["u"])
                        }
                        if ((t & 16) === 16) {
                            this.column_ = ((t & 14) >> 1) * 4
                        }
                        if (this.isColorPAC(n)) {
                            if ((n & 14) === 14) {
                                this.addFormatting(e.pts, ["i"])
                            }
                        }
                    } else if (this.isNormalChar(r)) {
                        if (n === 0) {
                            n = null
                        }
                        a = je(r);
                        a += je(n);
                        this[this.mode_](e.pts, a);
                        this.column_ += a.length
                    }
                }
            };
            We.prototype = new t;
            We.prototype.flushDisplayed = function(e) {
                var t = this.displayed_.map((function(e, t) {
                    try {
                        return e.trim()
                    } catch (e) {
                        this.trigger("log", {
                            level: "warn",
                            message: "Skipping a malformed 608 caption at index " + t + "."
                        });
                        return ""
                    }
                }), this).join("\n").replace(/^\n+|\n+$/g, "");
                if (t.length) {
                    this.trigger("data", {
                        startPts: this.startPts_,
                        endPts: e,
                        text: t,
                        stream: this.name_
                    })
                }
            };
            We.prototype.reset = function() {
                this.mode_ = "popOn";
                this.topRow_ = 0;
                this.startPts_ = 0;
                this.displayed_ = Ve();
                this.nonDisplayed_ = Ve();
                this.lastControlCode_ = null;
                this.column_ = 0;
                this.row_ = He;
                this.rollUpRows_ = 2;
                this.formatting_ = []
            };
            We.prototype.setConstants = function() {
                if (this.dataChannel_ === 0) {
                    this.BASE_ = 16;
                    this.EXT_ = 17;
                    this.CONTROL_ = (20 | this.field_) << 8;
                    this.OFFSET_ = 23
                } else if (this.dataChannel_ === 1) {
                    this.BASE_ = 24;
                    this.EXT_ = 25;
                    this.CONTROL_ = (28 | this.field_) << 8;
                    this.OFFSET_ = 31
                }
                this.PADDING_ = 0;
                this.RESUME_CAPTION_LOADING_ = this.CONTROL_ | 32;
                this.END_OF_CAPTION_ = this.CONTROL_ | 47;
                this.ROLL_UP_2_ROWS_ = this.CONTROL_ | 37;
                this.ROLL_UP_3_ROWS_ = this.CONTROL_ | 38;
                this.ROLL_UP_4_ROWS_ = this.CONTROL_ | 39;
                this.CARRIAGE_RETURN_ = this.CONTROL_ | 45;
                this.RESUME_DIRECT_CAPTIONING_ = this.CONTROL_ | 41;
                this.BACKSPACE_ = this.CONTROL_ | 33;
                this.ERASE_DISPLAYED_MEMORY_ = this.CONTROL_ | 44;
                this.ERASE_NON_DISPLAYED_MEMORY_ = this.CONTROL_ | 46
            };
            We.prototype.isSpecialCharacter = function(e, t) {
                return e === this.EXT_ && t >= 48 && t <= 63
            };
            We.prototype.isExtCharacter = function(e, t) {
                return (e === this.EXT_ + 1 || e === this.EXT_ + 2) && t >= 32 && t <= 63
            };
            We.prototype.isMidRowCode = function(e, t) {
                return e === this.EXT_ && t >= 32 && t <= 47
            };
            We.prototype.isOffsetControlCode = function(e, t) {
                return e === this.OFFSET_ && t >= 33 && t <= 35
            };
            We.prototype.isPAC = function(e, t) {
                return e >= this.BASE_ && e < this.BASE_ + 8 && t >= 64 && t <= 127
            };
            We.prototype.isColorPAC = function(e) {
                return e >= 64 && e <= 79 || e >= 96 && e <= 127
            };
            We.prototype.isNormalChar = function(e) {
                return e >= 32 && e <= 127
            };
            We.prototype.setRollUp = function(e, t) {
                if (this.mode_ !== "rollUp") {
                    this.row_ = He;
                    this.mode_ = "rollUp";
                    this.flushDisplayed(e);
                    this.nonDisplayed_ = Ve();
                    this.displayed_ = Ve()
                }
                if (t !== undefined && t !== this.row_) {
                    for (var i = 0; i < this.rollUpRows_; i++) {
                        this.displayed_[t - i] = this.displayed_[this.row_ - i];
                        this.displayed_[this.row_ - i] = ""
                    }
                }
                if (t === undefined) {
                    t = this.row_
                }
                this.topRow_ = t - this.rollUpRows_ + 1
            };
            We.prototype.addFormatting = function(e, t) {
                this.formatting_ = this.formatting_.concat(t);
                var i = t.reduce((function(e, t) {
                    return e + "<" + t + ">"
                }), "");
                this[this.mode_](e, i)
            };
            We.prototype.clearFormatting = function(e) {
                if (!this.formatting_.length) {
                    return
                }
                var t = this.formatting_.reverse().reduce((function(e, t) {
                    return e + "</" + t + ">"
                }), "");
                this.formatting_ = [];
                this[this.mode_](e, t)
            };
            We.prototype.popOn = function(e, t) {
                var i = this.nonDisplayed_[this.row_];
                i += t;
                this.nonDisplayed_[this.row_] = i
            };
            We.prototype.rollUp = function(e, t) {
                var i = this.displayed_[this.row_];
                i += t;
                this.displayed_[this.row_] = i
            };
            We.prototype.shiftRowsUp_ = function() {
                var e;
                for (e = 0; e < this.topRow_; e++) {
                    this.displayed_[e] = ""
                }
                for (e = this.row_ + 1; e < He + 1; e++) {
                    this.displayed_[e] = ""
                }
                for (e = this.topRow_; e < this.row_; e++) {
                    this.displayed_[e] = this.displayed_[e + 1]
                }
                this.displayed_[this.row_] = ""
            };
            We.prototype.paintOn = function(e, t) {
                var i = this.displayed_[this.row_];
                i += t;
                this.displayed_[this.row_] = i
            };
            var Ge = {
                CaptionStream: De,
                Cea608Stream: We,
                Cea708Stream: Be
            };
            var Xe = {
                H264_STREAM_TYPE: 27,
                ADTS_STREAM_TYPE: 15,
                METADATA_STREAM_TYPE: 21
            };
            var ze = 8589934592;
            var Ke = 4294967296;
            var Ye = "shared";
            var $e = function e(t, i) {
                var r = 1;
                if (t > i) {
                    r = -1
                }
                while (Math.abs(i - t) > Ke) {
                    t += r * ze
                }
                return t
            };
            var Qe = function e(t) {
                var i, r;
                e.prototype.init.call(this);
                this.type_ = t || Ye;
                this.push = function(e) {
                    if (this.type_ !== Ye && e.type !== this.type_) {
                        return
                    }
                    if (r === undefined) {
                        r = e.dts
                    }
                    e.dts = $e(e.dts, r);
                    e.pts = $e(e.pts, r);
                    i = e.dts;
                    this.trigger("data", e)
                };
                this.flush = function() {
                    r = i;
                    this.trigger("done")
                };
                this.endTimeline = function() {
                    this.flush();
                    this.trigger("endedtimeline")
                };
                this.discontinuity = function() {
                    r = void 0;
                    i = void 0
                };
                this.reset = function() {
                    this.discontinuity();
                    this.trigger("reset")
                }
            };
            Qe.prototype = new t;
            var Je = {
                TimestampRolloverStream: Qe,
                handleRollover: $e
            };
            var Ze = function e(t, i, r) {
                    var n, a = "";
                    for (n = i; n < r; n++) {
                        a += "%" + ("00" + t[n].toString(16)).slice(-2)
                    }
                    return a
                },
                et = function e(t, i, r) {
                    return decodeURIComponent(Ze(t, i, r))
                },
                tt = function e(t, i, r) {
                    return unescape(Ze(t, i, r))
                },
                it = function e(t) {
                    return t[0] << 21 | t[1] << 14 | t[2] << 7 | t[3]
                },
                rt = {
                    TXXX: function e(t) {
                        var i;
                        if (t.data[0] !== 3) {
                            return
                        }
                        for (i = 1; i < t.data.length; i++) {
                            if (t.data[i] === 0) {
                                t.description = et(t.data, 1, i);
                                t.value = et(t.data, i + 1, t.data.length).replace(/\0*$/, "");
                                break
                            }
                        }
                        t.data = t.value
                    },
                    WXXX: function e(t) {
                        var i;
                        if (t.data[0] !== 3) {
                            return
                        }
                        for (i = 1; i < t.data.length; i++) {
                            if (t.data[i] === 0) {
                                t.description = et(t.data, 1, i);
                                t.url = et(t.data, i + 1, t.data.length);
                                break
                            }
                        }
                    },
                    PRIV: function e(t) {
                        var i;
                        for (i = 0; i < t.data.length; i++) {
                            if (t.data[i] === 0) {
                                t.owner = tt(t.data, 0, i);
                                break
                            }
                        }
                        t.privateData = t.data.subarray(i + 1);
                        t.data = t.privateData
                    }
                },
                nt;
            nt = function e(t) {
                var i = {
                        descriptor: t && t.descriptor
                    },
                    r = 0,
                    n = [],
                    a = 0,
                    s;
                nt.prototype.init.call(this);
                this.dispatchType = Xe.METADATA_STREAM_TYPE.toString(16);
                if (i.descriptor) {
                    for (s = 0; s < i.descriptor.length; s++) {
                        this.dispatchType += ("00" + i.descriptor[s].toString(16)).slice(-2)
                    }
                }
                this.push = function(e) {
                    var t, i, s, o, u, l;
                    if (e.type !== "timed-metadata") {
                        return
                    }
                    if (e.dataAlignmentIndicator) {
                        a = 0;
                        n.length = 0
                    }
                    if (n.length === 0 && (e.data.length < 10 || e.data[0] !== "I".charCodeAt(0) || e.data[1] !== "D".charCodeAt(0) || e.data[2] !== "3".charCodeAt(0))) {
                        this.trigger("log", {
                            level: "warn",
                            message: "Skipping unrecognized metadata packet"
                        });
                        return
                    }
                    n.push(e);
                    a += e.data.byteLength;
                    if (n.length === 1) {
                        r = it(e.data.subarray(6, 10));
                        r += 10
                    }
                    if (a < r) {
                        return
                    }
                    t = {
                        data: new Uint8Array(r),
                        frames: [],
                        pts: n[0].pts,
                        dts: n[0].dts
                    };
                    for (u = 0; u < r;) {
                        t.data.set(n[0].data.subarray(0, r - u), u);
                        u += n[0].data.byteLength;
                        a -= n[0].data.byteLength;
                        n.shift()
                    }
                    i = 10;
                    if (t.data[5] & 64) {
                        i += 4;
                        i += it(t.data.subarray(10, 14));
                        r -= it(t.data.subarray(16, 20))
                    }
                    do {
                        s = it(t.data.subarray(i + 4, i + 8));
                        if (s < 1) {
                            this.trigger("log", {
                                level: "warn",
                                message: "Malformed ID3 frame encountered. Skipping metadata parsing."
                            });
                            return
                        }
                        l = String.fromCharCode(t.data[i], t.data[i + 1], t.data[i + 2], t.data[i + 3]);
                        o = {
                            id: l,
                            data: t.data.subarray(i + 10, i + s + 10)
                        };
                        o.key = o.id;
                        if (rt[o.id]) {
                            rt[o.id](o);
                            if (o.owner === "com.apple.streaming.transportStreamTimestamp") {
                                var c = o.data,
                                    f = (c[3] & 1) << 30 | c[4] << 22 | c[5] << 14 | c[6] << 6 | c[7] >>> 2;
                                f *= 4;
                                f += c[7] & 3;
                                o.timeStamp = f;
                                if (t.pts === undefined && t.dts === undefined) {
                                    t.pts = o.timeStamp;
                                    t.dts = o.timeStamp
                                }
                                this.trigger("timestamp", o)
                            }
                        }
                        t.frames.push(o);
                        i += 10;
                        i += s
                    } while (i < r);
                    this.trigger("data", t)
                }
            };
            nt.prototype = new t;
            var at = nt;
            var st = Je.TimestampRolloverStream;
            var ot, ut, lt;
            var ct = 188,
                ft = 71;
            ot = function e() {
                var t = new Uint8Array(ct),
                    i = 0;
                ot.prototype.init.call(this);
                this.push = function(e) {
                    var r = 0,
                        n = ct,
                        a;
                    if (i) {
                        a = new Uint8Array(e.byteLength + i);
                        a.set(t.subarray(0, i));
                        a.set(e, i);
                        i = 0
                    } else {
                        a = e
                    }
                    while (n < a.byteLength) {
                        if (a[r] === ft && a[n] === ft) {
                            this.trigger("data", a.subarray(r, n));
                            r += ct;
                            n += ct;
                            continue
                        }
                        r++;
                        n++
                    }
                    if (r < a.byteLength) {
                        t.set(a.subarray(r), 0);
                        i = a.byteLength - r
                    }
                };
                this.flush = function() {
                    if (i === ct && t[0] === ft) {
                        this.trigger("data", t);
                        i = 0
                    }
                    this.trigger("done")
                };
                this.endTimeline = function() {
                    this.flush();
                    this.trigger("endedtimeline")
                };
                this.reset = function() {
                    i = 0;
                    this.trigger("reset")
                }
            };
            ot.prototype = new t;
            ut = function e() {
                var t, i, r, n;
                ut.prototype.init.call(this);
                n = this;
                this.packetsWaitingForPmt = [];
                this.programMapTable = undefined;
                t = function e(t, n) {
                    var a = 0;
                    if (n.payloadUnitStartIndicator) {
                        a += t[a] + 1
                    }
                    if (n.type === "pat") {
                        i(t.subarray(a), n)
                    } else {
                        r(t.subarray(a), n)
                    }
                };
                i = function e(t, i) {
                    i.section_number = t[7];
                    i.last_section_number = t[8];
                    n.pmtPid = (t[10] & 31) << 8 | t[11];
                    i.pmtPid = n.pmtPid
                };
                r = function e(t, i) {
                    var r, a, s, o;
                    if (!(t[5] & 1)) {
                        return
                    }
                    n.programMapTable = {
                        video: null,
                        audio: null,
                        "timed-metadata": {}
                    };
                    r = (t[1] & 15) << 8 | t[2];
                    a = 3 + r - 4;
                    s = (t[10] & 15) << 8 | t[11];
                    o = 12 + s;
                    while (o < a) {
                        var u = t[o];
                        var l = (t[o + 1] & 31) << 8 | t[o + 2];
                        if (u === Xe.H264_STREAM_TYPE && n.programMapTable.video === null) {
                            n.programMapTable.video = l
                        } else if (u === Xe.ADTS_STREAM_TYPE && n.programMapTable.audio === null) {
                            n.programMapTable.audio = l
                        } else if (u === Xe.METADATA_STREAM_TYPE) {
                            n.programMapTable["timed-metadata"][l] = u
                        }
                        o += ((t[o + 3] & 15) << 8 | t[o + 4]) + 5
                    }
                    i.programMapTable = n.programMapTable
                };
                this.push = function(e) {
                    var i = {},
                        r = 4;
                    i.payloadUnitStartIndicator = !!(e[1] & 64);
                    i.pid = e[1] & 31;
                    i.pid <<= 8;
                    i.pid |= e[2];
                    if ((e[3] & 48) >>> 4 > 1) {
                        r += e[r] + 1
                    }
                    if (i.pid === 0) {
                        i.type = "pat";
                        t(e.subarray(r), i);
                        this.trigger("data", i)
                    } else if (i.pid === this.pmtPid) {
                        i.type = "pmt";
                        t(e.subarray(r), i);
                        this.trigger("data", i);
                        while (this.packetsWaitingForPmt.length) {
                            this.processPes_.apply(this, this.packetsWaitingForPmt.shift())
                        }
                    } else if (this.programMapTable === undefined) {
                        this.packetsWaitingForPmt.push([e, r, i])
                    } else {
                        this.processPes_(e, r, i)
                    }
                };
                this.processPes_ = function(e, t, i) {
                    if (i.pid === this.programMapTable.video) {
                        i.streamType = Xe.H264_STREAM_TYPE
                    } else if (i.pid === this.programMapTable.audio) {
                        i.streamType = Xe.ADTS_STREAM_TYPE
                    } else {
                        i.streamType = this.programMapTable["timed-metadata"][i.pid]
                    }
                    i.type = "pes";
                    i.data = e.subarray(t);
                    this.trigger("data", i)
                }
            };
            ut.prototype = new t;
            ut.STREAM_TYPES = {
                h264: 27,
                adts: 15
            };
            lt = function e() {
                var t = this,
                    i = false,
                    r = {
                        data: [],
                        size: 0
                    },
                    n = {
                        data: [],
                        size: 0
                    },
                    a = {
                        data: [],
                        size: 0
                    },
                    s, o = function e(t, i) {
                        var r;
                        var n = t[0] << 16 | t[1] << 8 | t[2];
                        i.data = new Uint8Array;
                        if (n !== 1) {
                            return
                        }
                        i.packetLength = 6 + (t[4] << 8 | t[5]);
                        i.dataAlignmentIndicator = (t[6] & 4) !== 0;
                        r = t[7];
                        if (r & 192) {
                            i.pts = (t[9] & 14) << 27 | (t[10] & 255) << 20 | (t[11] & 254) << 12 | (t[12] & 255) << 5 | (t[13] & 254) >>> 3;
                            i.pts *= 4;
                            i.pts += (t[13] & 6) >>> 1;
                            i.dts = i.pts;
                            if (r & 64) {
                                i.dts = (t[14] & 14) << 27 | (t[15] & 255) << 20 | (t[16] & 254) << 12 | (t[17] & 255) << 5 | (t[18] & 254) >>> 3;
                                i.dts *= 4;
                                i.dts += (t[18] & 6) >>> 1
                            }
                        }
                        i.data = t.subarray(9 + t[8])
                    },
                    u = function e(i, r, n) {
                        var a = new Uint8Array(i.size),
                            s = {
                                type: r
                            },
                            u = 0,
                            l = 0,
                            c = false,
                            f;
                        if (!i.data.length || i.size < 9) {
                            return
                        }
                        s.trackId = i.data[0].pid;
                        for (u = 0; u < i.data.length; u++) {
                            f = i.data[u];
                            a.set(f.data, l);
                            l += f.data.byteLength
                        }
                        o(a, s);
                        c = r === "video" || s.packetLength <= i.size;
                        if (n || c) {
                            i.size = 0;
                            i.data.length = 0
                        }
                        if (c) {
                            t.trigger("data", s)
                        }
                    };
                lt.prototype.init.call(this);
                this.push = function(e) {
                    ({
                        pat: function e() {},
                        pes: function t() {
                            var i, s;
                            switch (e.streamType) {
                                case Xe.H264_STREAM_TYPE:
                                    i = r;
                                    s = "video";
                                    break;
                                case Xe.ADTS_STREAM_TYPE:
                                    i = n;
                                    s = "audio";
                                    break;
                                case Xe.METADATA_STREAM_TYPE:
                                    i = a;
                                    s = "timed-metadata";
                                    break;
                                default:
                                    return
                            }
                            if (e.payloadUnitStartIndicator) {
                                u(i, s, true)
                            }
                            i.data.push(e);
                            i.size += e.data.byteLength
                        },
                        pmt: function r() {
                            var n = {
                                type: "metadata",
                                tracks: []
                            };
                            s = e.programMapTable;
                            if (s.video !== null) {
                                n.tracks.push({
                                    timelineStartInfo: {
                                        baseMediaDecodeTime: 0
                                    },
                                    id: +s.video,
                                    codec: "avc",
                                    type: "video"
                                })
                            }
                            if (s.audio !== null) {
                                n.tracks.push({
                                    timelineStartInfo: {
                                        baseMediaDecodeTime: 0
                                    },
                                    id: +s.audio,
                                    codec: "adts",
                                    type: "audio"
                                })
                            }
                            i = true;
                            t.trigger("data", n)
                        }
                    })[e.type]()
                };
                this.reset = function() {
                    r.size = 0;
                    r.data.length = 0;
                    n.size = 0;
                    n.data.length = 0;
                    this.trigger("reset")
                };
                this.flushStreams_ = function() {
                    u(r, "video");
                    u(n, "audio");
                    u(a, "timed-metadata")
                };
                this.flush = function() {
                    if (!i && s) {
                        var e = {
                            type: "metadata",
                            tracks: []
                        };
                        if (s.video !== null) {
                            e.tracks.push({
                                timelineStartInfo: {
                                    baseMediaDecodeTime: 0
                                },
                                id: +s.video,
                                codec: "avc",
                                type: "video"
                            })
                        }
                        if (s.audio !== null) {
                            e.tracks.push({
                                timelineStartInfo: {
                                    baseMediaDecodeTime: 0
                                },
                                id: +s.audio,
                                codec: "adts",
                                type: "audio"
                            })
                        }
                        t.trigger("data", e)
                    }
                    i = false;
                    this.flushStreams_();
                    this.trigger("done")
                }
            };
            lt.prototype = new t;
            var dt = {
                PAT_PID: 0,
                MP2T_PACKET_LENGTH: ct,
                TransportPacketStream: ot,
                TransportParseStream: ut,
                ElementaryStream: lt,
                TimestampRolloverStream: st,
                CaptionStream: Ge.CaptionStream,
                Cea608Stream: Ge.Cea608Stream,
                Cea708Stream: Ge.Cea708Stream,
                MetadataStream: at
            };
            for (var ht in Xe) {
                if (Xe.hasOwnProperty(ht)) {
                    dt[ht] = Xe[ht]
                }
            }
            var pt = dt;
            var mt = he.ONE_SECOND_IN_TS;
            var vt;
            var gt = [96e3, 88200, 64e3, 48e3, 44100, 32e3, 24e3, 22050, 16e3, 12e3, 11025, 8e3, 7350];
            vt = function e(t) {
                var i, r = 0;
                vt.prototype.init.call(this);
                this.skipWarn_ = function(e, t) {
                    this.trigger("log", {
                        level: "warn",
                        message: "adts skiping bytes " + e + " to " + t + " in frame " + r + " outside syncword"
                    })
                };
                this.push = function(e) {
                    var n = 0,
                        a, s, o, u, l;
                    if (!t) {
                        r = 0
                    }
                    if (e.type !== "audio") {
                        return
                    }
                    if (i && i.length) {
                        o = i;
                        i = new Uint8Array(o.byteLength + e.data.byteLength);
                        i.set(o);
                        i.set(e.data, o.byteLength)
                    } else {
                        i = e.data
                    }
                    var c;
                    while (n + 7 < i.length) {
                        if (i[n] !== 255 || (i[n + 1] & 246) !== 240) {
                            if (typeof c !== "number") {
                                c = n
                            }
                            n++;
                            continue
                        }
                        if (typeof c === "number") {
                            this.skipWarn_(c, n);
                            c = null
                        }
                        s = (~i[n + 1] & 1) * 2;
                        a = (i[n + 3] & 3) << 11 | i[n + 4] << 3 | (i[n + 5] & 224) >> 5;
                        u = ((i[n + 6] & 3) + 1) * 1024;
                        l = u * mt / gt[(i[n + 2] & 60) >>> 2];
                        if (i.byteLength - n < a) {
                            break
                        }
                        this.trigger("data", {
                            pts: e.pts + r * l,
                            dts: e.dts + r * l,
                            sampleCount: u,
                            audioobjecttype: (i[n + 2] >>> 6 & 3) + 1,
                            channelcount: (i[n + 2] & 1) << 2 | (i[n + 3] & 192) >>> 6,
                            samplerate: gt[(i[n + 2] & 60) >>> 2],
                            samplingfrequencyindex: (i[n + 2] & 60) >>> 2,
                            samplesize: 16,
                            data: i.subarray(n + 7 + s, n + a)
                        });
                        r++;
                        n += a
                    }
                    if (typeof c === "number") {
                        this.skipWarn_(c, n);
                        c = null
                    }
                    i = i.subarray(n)
                };
                this.flush = function() {
                    r = 0;
                    this.trigger("done")
                };
                this.reset = function() {
                    i = void 0;
                    this.trigger("reset")
                };
                this.endTimeline = function() {
                    i = void 0;
                    this.trigger("endedtimeline")
                }
            };
            vt.prototype = new t;
            var yt = vt;
            var _t;
            _t = function e(t) {
                var i = t.byteLength,
                    r = 0,
                    n = 0;
                this.length = function() {
                    return 8 * i
                };
                this.bitsAvailable = function() {
                    return 8 * i + n
                };
                this.loadWord = function() {
                    var e = t.byteLength - i,
                        a = new Uint8Array(4),
                        s = Math.min(4, i);
                    if (s === 0) {
                        throw new Error("no bytes available")
                    }
                    a.set(t.subarray(e, e + s));
                    r = new DataView(a.buffer).getUint32(0);
                    n = s * 8;
                    i -= s
                };
                this.skipBits = function(e) {
                    var t;
                    if (n > e) {
                        r <<= e;
                        n -= e
                    } else {
                        e -= n;
                        t = Math.floor(e / 8);
                        e -= t * 8;
                        i -= t;
                        this.loadWord();
                        r <<= e;
                        n -= e
                    }
                };
                this.readBits = function(e) {
                    var t = Math.min(n, e),
                        a = r >>> 32 - t;
                    n -= t;
                    if (n > 0) {
                        r <<= t
                    } else if (i > 0) {
                        this.loadWord()
                    }
                    t = e - t;
                    if (t > 0) {
                        return a << t | this.readBits(t)
                    }
                    return a
                };
                this.skipLeadingZeros = function() {
                    var e;
                    for (e = 0; e < n; ++e) {
                        if ((r & 2147483648 >>> e) !== 0) {
                            r <<= e;
                            n -= e;
                            return e
                        }
                    }
                    this.loadWord();
                    return e + this.skipLeadingZeros()
                };
                this.skipUnsignedExpGolomb = function() {
                    this.skipBits(1 + this.skipLeadingZeros())
                };
                this.skipExpGolomb = function() {
                    this.skipBits(1 + this.skipLeadingZeros())
                };
                this.readUnsignedExpGolomb = function() {
                    var e = this.skipLeadingZeros();
                    return this.readBits(e + 1) - 1
                };
                this.readExpGolomb = function() {
                    var e = this.readUnsignedExpGolomb();
                    if (1 & e) {
                        return 1 + e >>> 1
                    }
                    return -1 * (e >>> 1)
                };
                this.readBoolean = function() {
                    return this.readBits(1) === 1
                };
                this.readUnsignedByte = function() {
                    return this.readBits(8)
                };
                this.loadWord()
            };
            var bt = _t;
            var Tt, St;
            var Et;
            St = function e() {
                var t = 0,
                    i, r;
                St.prototype.init.call(this);
                this.push = function(e) {
                    var n;
                    if (!r) {
                        r = e.data
                    } else {
                        n = new Uint8Array(r.byteLength + e.data.byteLength);
                        n.set(r);
                        n.set(e.data, r.byteLength);
                        r = n
                    }
                    var a = r.byteLength;
                    for (; t < a - 3; t++) {
                        if (r[t + 2] === 1) {
                            i = t + 5;
                            break
                        }
                    }
                    while (i < a) {
                        switch (r[i]) {
                            case 0:
                                if (r[i - 1] !== 0) {
                                    i += 2;
                                    break
                                } else if (r[i - 2] !== 0) {
                                    i++;
                                    break
                                }
                                if (t + 3 !== i - 2) {
                                    this.trigger("data", r.subarray(t + 3, i - 2))
                                }
                                do {
                                    i++
                                } while (r[i] !== 1 && i < a);
                                t = i - 2;
                                i += 3;
                                break;
                            case 1:
                                if (r[i - 1] !== 0 || r[i - 2] !== 0) {
                                    i += 3;
                                    break
                                }
                                this.trigger("data", r.subarray(t + 3, i - 2));
                                t = i - 2;
                                i += 3;
                                break;
                            default:
                                i += 3;
                                break
                        }
                    }
                    r = r.subarray(t);
                    i -= t;
                    t = 0
                };
                this.reset = function() {
                    r = null;
                    t = 0;
                    this.trigger("reset")
                };
                this.flush = function() {
                    if (r && r.byteLength > 3) {
                        this.trigger("data", r.subarray(t + 3))
                    }
                    r = null;
                    t = 0;
                    this.trigger("done")
                };
                this.endTimeline = function() {
                    this.flush();
                    this.trigger("endedtimeline")
                }
            };
            St.prototype = new t;
            Et = {
                100: true,
                110: true,
                122: true,
                244: true,
                44: true,
                83: true,
                86: true,
                118: true,
                128: true,
                138: true,
                139: true,
                134: true
            };
            Tt = function e() {
                var t = new St,
                    i, r, n, a, s, o, u;
                Tt.prototype.init.call(this);
                i = this;
                this.push = function(e) {
                    if (e.type !== "video") {
                        return
                    }
                    r = e.trackId;
                    n = e.pts;
                    a = e.dts;
                    t.push(e)
                };
                t.on("data", (function(e) {
                    var t = {
                        trackId: r,
                        pts: n,
                        dts: a,
                        data: e,
                        nalUnitTypeCode: e[0] & 31
                    };
                    switch (t.nalUnitTypeCode) {
                        case 5:
                            t.nalUnitType = "slice_layer_without_partitioning_rbsp_idr";
                            break;
                        case 6:
                            t.nalUnitType = "sei_rbsp";
                            t.escapedRBSP = s(e.subarray(1));
                            break;
                        case 7:
                            t.nalUnitType = "seq_parameter_set_rbsp";
                            t.escapedRBSP = s(e.subarray(1));
                            t.config = o(t.escapedRBSP);
                            break;
                        case 8:
                            t.nalUnitType = "pic_parameter_set_rbsp";
                            break;
                        case 9:
                            t.nalUnitType = "access_unit_delimiter_rbsp";
                            break
                    }
                    i.trigger("data", t)
                }));
                t.on("done", (function() {
                    i.trigger("done")
                }));
                t.on("partialdone", (function() {
                    i.trigger("partialdone")
                }));
                t.on("reset", (function() {
                    i.trigger("reset")
                }));
                t.on("endedtimeline", (function() {
                    i.trigger("endedtimeline")
                }));
                this.flush = function() {
                    t.flush()
                };
                this.partialFlush = function() {
                    t.partialFlush()
                };
                this.reset = function() {
                    t.reset()
                };
                this.endTimeline = function() {
                    t.endTimeline()
                };
                u = function e(t, i) {
                    var r = 8,
                        n = 8,
                        a, s;
                    for (a = 0; a < t; a++) {
                        if (n !== 0) {
                            s = i.readExpGolomb();
                            n = (r + s + 256) % 256
                        }
                        r = n === 0 ? r : n
                    }
                };
                s = function e(t) {
                    var i = t.byteLength,
                        r = [],
                        n = 1,
                        a, s;
                    while (n < i - 2) {
                        if (t[n] === 0 && t[n + 1] === 0 && t[n + 2] === 3) {
                            r.push(n + 2);
                            n += 2
                        } else {
                            n++
                        }
                    }
                    if (r.length === 0) {
                        return t
                    }
                    a = i - r.length;
                    s = new Uint8Array(a);
                    var o = 0;
                    for (n = 0; n < a; o++, n++) {
                        if (o === r[0]) {
                            o++;
                            r.shift()
                        }
                        s[n] = t[o]
                    }
                    return s
                };
                o = function e(t) {
                    var i = 0,
                        r = 0,
                        n = 0,
                        a = 0,
                        s, o, l, c, f, d, h, p, m, v, g, y = [1, 1],
                        _, b;
                    s = new bt(t);
                    o = s.readUnsignedByte();
                    c = s.readUnsignedByte();
                    l = s.readUnsignedByte();
                    s.skipUnsignedExpGolomb();
                    if (Et[o]) {
                        f = s.readUnsignedExpGolomb();
                        if (f === 3) {
                            s.skipBits(1)
                        }
                        s.skipUnsignedExpGolomb();
                        s.skipUnsignedExpGolomb();
                        s.skipBits(1);
                        if (s.readBoolean()) {
                            g = f !== 3 ? 8 : 12;
                            for (b = 0; b < g; b++) {
                                if (s.readBoolean()) {
                                    if (b < 6) {
                                        u(16, s)
                                    } else {
                                        u(64, s)
                                    }
                                }
                            }
                        }
                    }
                    s.skipUnsignedExpGolomb();
                    d = s.readUnsignedExpGolomb();
                    if (d === 0) {
                        s.readUnsignedExpGolomb()
                    } else if (d === 1) {
                        s.skipBits(1);
                        s.skipExpGolomb();
                        s.skipExpGolomb();
                        h = s.readUnsignedExpGolomb();
                        for (b = 0; b < h; b++) {
                            s.skipExpGolomb()
                        }
                    }
                    s.skipUnsignedExpGolomb();
                    s.skipBits(1);
                    p = s.readUnsignedExpGolomb();
                    m = s.readUnsignedExpGolomb();
                    v = s.readBits(1);
                    if (v === 0) {
                        s.skipBits(1)
                    }
                    s.skipBits(1);
                    if (s.readBoolean()) {
                        i = s.readUnsignedExpGolomb();
                        r = s.readUnsignedExpGolomb();
                        n = s.readUnsignedExpGolomb();
                        a = s.readUnsignedExpGolomb()
                    }
                    if (s.readBoolean()) {
                        if (s.readBoolean()) {
                            _ = s.readUnsignedByte();
                            switch (_) {
                                case 1:
                                    y = [1, 1];
                                    break;
                                case 2:
                                    y = [12, 11];
                                    break;
                                case 3:
                                    y = [10, 11];
                                    break;
                                case 4:
                                    y = [16, 11];
                                    break;
                                case 5:
                                    y = [40, 33];
                                    break;
                                case 6:
                                    y = [24, 11];
                                    break;
                                case 7:
                                    y = [20, 11];
                                    break;
                                case 8:
                                    y = [32, 11];
                                    break;
                                case 9:
                                    y = [80, 33];
                                    break;
                                case 10:
                                    y = [18, 11];
                                    break;
                                case 11:
                                    y = [15, 11];
                                    break;
                                case 12:
                                    y = [64, 33];
                                    break;
                                case 13:
                                    y = [160, 99];
                                    break;
                                case 14:
                                    y = [4, 3];
                                    break;
                                case 15:
                                    y = [3, 2];
                                    break;
                                case 16:
                                    y = [2, 1];
                                    break;
                                case 255: {
                                    y = [s.readUnsignedByte() << 8 | s.readUnsignedByte(), s.readUnsignedByte() << 8 | s.readUnsignedByte()];
                                    break
                                }
                            }
                            if (y) {
                                y[0] / y[1]
                            }
                        }
                    }
                    return {
                        profileIdc: o,
                        levelIdc: l,
                        profileCompatibility: c,
                        width: (p + 1) * 16 - i * 2 - r * 2,
                        height: (2 - v) * (m + 1) * 16 - n * 2 - a * 2,
                        sarRatio: y
                    }
                }
            };
            Tt.prototype = new t;
            var wt = {
                H264Stream: Tt,
                NalByteStream: St
            };
            var kt = [96e3, 88200, 64e3, 48e3, 44100, 32e3, 24e3, 22050, 16e3, 12e3, 11025, 8e3, 7350];
            var Ct = function e(t, i) {
                var r = t[i + 6] << 21 | t[i + 7] << 14 | t[i + 8] << 7 | t[i + 9],
                    n = t[i + 5],
                    a = (n & 16) >> 4;
                r = r >= 0 ? r : 0;
                if (a) {
                    return r + 20
                }
                return r + 10
            };
            var It = function e(t, i) {
                if (t.length - i < 10 || t[i] !== "I".charCodeAt(0) || t[i + 1] !== "D".charCodeAt(0) || t[i + 2] !== "3".charCodeAt(0)) {
                    return i
                }
                i += Ct(t, i);
                return e(t, i)
            };
            var At = function e(t) {
                var i = It(t, 0);
                return t.length >= i + 2 && (t[i] & 255) === 255 && (t[i + 1] & 240) === 240 && (t[i + 1] & 22) === 16
            };
            var xt = function e(t) {
                return t[0] << 21 | t[1] << 14 | t[2] << 7 | t[3]
            };
            var Pt = function e(t, i, r) {
                var n, a = "";
                for (n = i; n < r; n++) {
                    a += "%" + ("00" + t[n].toString(16)).slice(-2)
                }
                return a
            };
            var Ot = function e(t, i, r) {
                return unescape(Pt(t, i, r))
            };
            var Dt = function e(t, i) {
                var r = (t[i + 5] & 224) >> 5,
                    n = t[i + 4] << 3,
                    a = t[i + 3] & 3 << 11;
                return a | n | r
            };
            var Lt = function e(t, i) {
                if (t[i] === "I".charCodeAt(0) && t[i + 1] === "D".charCodeAt(0) && t[i + 2] === "3".charCodeAt(0)) {
                    return "timed-metadata"
                } else if (t[i] & 255 === 255 && (t[i + 1] & 240) === 240) {
                    return "audio"
                }
                return null
            };
            var Nt = function e(t) {
                var i = 0;
                while (i + 5 < t.length) {
                    if (t[i] !== 255 || (t[i + 1] & 246) !== 240) {
                        i++;
                        continue
                    }
                    return kt[(t[i + 2] & 60) >>> 2]
                }
                return null
            };
            var Rt = function e(t) {
                var i, r, n, a;
                i = 10;
                if (t[5] & 64) {
                    i += 4;
                    i += xt(t.subarray(10, 14))
                }
                do {
                    r = xt(t.subarray(i + 4, i + 8));
                    if (r < 1) {
                        return null
                    }
                    a = String.fromCharCode(t[i], t[i + 1], t[i + 2], t[i + 3]);
                    if (a === "PRIV") {
                        n = t.subarray(i + 10, i + r + 10);
                        for (var s = 0; s < n.byteLength; s++) {
                            if (n[s] === 0) {
                                var o = Ot(n, 0, s);
                                if (o === "com.apple.streaming.transportStreamTimestamp") {
                                    var u = n.subarray(s + 1);
                                    var l = (u[3] & 1) << 30 | u[4] << 22 | u[5] << 14 | u[6] << 6 | u[7] >>> 2;
                                    l *= 4;
                                    l += u[7] & 3;
                                    return l
                                }
                                break
                            }
                        }
                    }
                    i += 10;
                    i += r
                } while (i < t.byteLength);
                return null
            };
            var Mt = {
                isLikelyAacData: At,
                parseId3TagSize: Ct,
                parseAdtsSize: Dt,
                parseType: Lt,
                parseSampleRate: Nt,
                parseAacTimestamp: Rt
            };
            var Ut;
            Ut = function e() {
                var t = new Uint8Array,
                    i = 0;
                Ut.prototype.init.call(this);
                this.setTimestamp = function(e) {
                    i = e
                };
                this.push = function(e) {
                    var r = 0,
                        n = 0,
                        a, s, o, u;
                    if (t.length) {
                        u = t.length;
                        t = new Uint8Array(e.byteLength + u);
                        t.set(t.subarray(0, u));
                        t.set(e, u)
                    } else {
                        t = e
                    }
                    while (t.length - n >= 3) {
                        if (t[n] === "I".charCodeAt(0) && t[n + 1] === "D".charCodeAt(0) && t[n + 2] === "3".charCodeAt(0)) {
                            if (t.length - n < 10) {
                                break
                            }
                            r = Mt.parseId3TagSize(t, n);
                            if (n + r > t.length) {
                                break
                            }
                            s = {
                                type: "timed-metadata",
                                data: t.subarray(n, n + r)
                            };
                            this.trigger("data", s);
                            n += r;
                            continue
                        } else if ((t[n] & 255) === 255 && (t[n + 1] & 240) === 240) {
                            if (t.length - n < 7) {
                                break
                            }
                            r = Mt.parseAdtsSize(t, n);
                            if (n + r > t.length) {
                                break
                            }
                            o = {
                                type: "audio",
                                data: t.subarray(n, n + r),
                                pts: i,
                                dts: i
                            };
                            this.trigger("data", o);
                            n += r;
                            continue
                        }
                        n++
                    }
                    a = t.length - n;
                    if (a > 0) {
                        t = t.subarray(n)
                    } else {
                        t = new Uint8Array
                    }
                };
                this.reset = function() {
                    t = new Uint8Array;
                    this.trigger("reset")
                };
                this.endTimeline = function() {
                    t = new Uint8Array;
                    this.trigger("endedtimeline")
                }
            };
            Ut.prototype = new t;
            var Bt = Ut;
            var Ft = ["audioobjecttype", "channelcount", "samplerate", "samplingfrequencyindex", "samplesize"];
            var jt = Ft;
            var Ht = ["width", "height", "profileIdc", "levelIdc", "profileCompatibility", "sarRatio"];
            var qt = Ht;
            var Vt = wt.H264Stream;
            var Wt = Mt.isLikelyAacData;
            var Gt = he.ONE_SECOND_IN_TS;
            var Xt, zt, Kt, Yt;
            var $t = function e(t, i) {
                i.stream = t;
                this.trigger("log", i)
            };
            var Qt = function e(t, i) {
                var r = Object.keys(i);
                for (var n = 0; n < r.length; n++) {
                    var a = r[n];
                    if (a === "headOfPipeline" || !i[a].on) {
                        continue
                    }
                    i[a].on("log", $t.bind(t, a))
                }
            };
            var Jt = function e(t, i) {
                var r;
                if (t.length !== i.length) {
                    return false
                }
                for (r = 0; r < t.length; r++) {
                    if (t[r] !== i[r]) {
                        return false
                    }
                }
                return true
            };
            var Zt = function e(t, i, r, n, a, s) {
                var o = r - i,
                    u = n - i,
                    l = a - r;
                return {
                    start: {
                        dts: t,
                        pts: t + o
                    },
                    end: {
                        dts: t + u,
                        pts: t + l
                    },
                    prependedContentDuration: s,
                    baseMediaDecodeTime: t
                }
            };
            zt = function e(t, i) {
                var r = [],
                    n, a = 0,
                    s = 0,
                    o = Infinity;
                i = i || {};
                n = i.firstSequenceNumber || 0;
                zt.prototype.init.call(this);
                this.push = function(e) {
                    we.collectDtsInfo(t, e);
                    if (t) {
                        jt.forEach((function(i) {
                            t[i] = e[i]
                        }))
                    }
                    r.push(e)
                };
                this.setEarliestDts = function(e) {
                    a = e
                };
                this.setVideoBaseMediaDecodeTime = function(e) {
                    o = e
                };
                this.setAudioAppendStart = function(e) {
                    s = e
                };
                this.flush = function() {
                    var e, u, l, c, f, d, h;
                    if (r.length === 0) {
                        this.trigger("done", "AudioSegmentStream");
                        return
                    }
                    e = _e.trimAdtsFramesByEarliestDts(r, t, a);
                    t.baseMediaDecodeTime = we.calculateTrackBaseMediaDecodeTime(t, i.keepOriginalTimestamps);
                    h = _e.prefixWithSilence(t, e, s, o);
                    t.samples = _e.generateSampleTable(e);
                    l = q.mdat(_e.concatenateFrameData(e));
                    r = [];
                    u = q.moof(n, [t]);
                    c = new Uint8Array(u.byteLength + l.byteLength);
                    n++;
                    c.set(u);
                    c.set(l, u.byteLength);
                    we.clearDtsInfo(t);
                    f = Math.ceil(Gt * 1024 / t.samplerate);
                    if (e.length) {
                        d = e.length * f;
                        this.trigger("segmentTimingInfo", Zt(he.audioTsToVideoTs(t.baseMediaDecodeTime, t.samplerate), e[0].dts, e[0].pts, e[0].dts + d, e[0].pts + d, h || 0));
                        this.trigger("timingInfo", {
                            start: e[0].pts,
                            end: e[0].pts + d
                        })
                    }
                    this.trigger("data", {
                        track: t,
                        boxes: c
                    });
                    this.trigger("done", "AudioSegmentStream")
                };
                this.reset = function() {
                    we.clearDtsInfo(t);
                    r = [];
                    this.trigger("reset")
                }
            };
            zt.prototype = new t;
            Xt = function e(t, i) {
                var r, n = [],
                    a = [],
                    s, o;
                i = i || {};
                r = i.firstSequenceNumber || 0;
                Xt.prototype.init.call(this);
                delete t.minPTS;
                this.gopCache_ = [];
                this.push = function(e) {
                    we.collectDtsInfo(t, e);
                    if (e.nalUnitType === "seq_parameter_set_rbsp" && !s) {
                        s = e.config;
                        t.sps = [e.data];
                        qt.forEach((function(e) {
                            t[e] = s[e]
                        }), this)
                    }
                    if (e.nalUnitType === "pic_parameter_set_rbsp" && !o) {
                        o = e.data;
                        t.pps = [e.data]
                    }
                    n.push(e)
                };
                this.flush = function() {
                    var e, s, o, u, l, c, f = 0,
                        d, h;
                    while (n.length) {
                        if (n[0].nalUnitType === "access_unit_delimiter_rbsp") {
                            break
                        }
                        n.shift()
                    }
                    if (n.length === 0) {
                        this.resetStream_();
                        this.trigger("done", "VideoSegmentStream");
                        return
                    }
                    e = J.groupNalsIntoFrames(n);
                    o = J.groupFramesIntoGops(e);
                    if (!o[0][0].keyFrame) {
                        s = this.getGopForFusion_(n[0], t);
                        if (s) {
                            f = s.duration;
                            o.unshift(s);
                            o.byteLength += s.byteLength;
                            o.nalCount += s.nalCount;
                            o.pts = s.pts;
                            o.dts = s.dts;
                            o.duration += s.duration
                        } else {
                            o = J.extendFirstKeyFrame(o)
                        }
                    }
                    if (a.length) {
                        var p;
                        if (i.alignGopsAtEnd) {
                            p = this.alignGopsAtEnd_(o)
                        } else {
                            p = this.alignGopsAtStart_(o)
                        }
                        if (!p) {
                            this.gopCache_.unshift({
                                gop: o.pop(),
                                pps: t.pps,
                                sps: t.sps
                            });
                            this.gopCache_.length = Math.min(6, this.gopCache_.length);
                            n = [];
                            this.resetStream_();
                            this.trigger("done", "VideoSegmentStream");
                            return
                        }
                        we.clearDtsInfo(t);
                        o = p
                    }
                    we.collectDtsInfo(t, o);
                    t.samples = J.generateSampleTable(o);
                    l = q.mdat(J.concatenateNalData(o));
                    t.baseMediaDecodeTime = we.calculateTrackBaseMediaDecodeTime(t, i.keepOriginalTimestamps);
                    this.trigger("processedGopsInfo", o.map((function(e) {
                        return {
                            pts: e.pts,
                            dts: e.dts,
                            byteLength: e.byteLength
                        }
                    })));
                    d = o[0];
                    h = o[o.length - 1];
                    this.trigger("segmentTimingInfo", Zt(t.baseMediaDecodeTime, d.dts, d.pts, h.dts + h.duration, h.pts + h.duration, f));
                    this.trigger("timingInfo", {
                        start: o[0].pts,
                        end: o[o.length - 1].pts + o[o.length - 1].duration
                    });
                    this.gopCache_.unshift({
                        gop: o.pop(),
                        pps: t.pps,
                        sps: t.sps
                    });
                    this.gopCache_.length = Math.min(6, this.gopCache_.length);
                    n = [];
                    this.trigger("baseMediaDecodeTime", t.baseMediaDecodeTime);
                    this.trigger("timelineStartInfo", t.timelineStartInfo);
                    u = q.moof(r, [t]);
                    c = new Uint8Array(u.byteLength + l.byteLength);
                    r++;
                    c.set(u);
                    c.set(l, u.byteLength);
                    this.trigger("data", {
                        track: t,
                        boxes: c
                    });
                    this.resetStream_();
                    this.trigger("done", "VideoSegmentStream")
                };
                this.reset = function() {
                    this.resetStream_();
                    n = [];
                    this.gopCache_.length = 0;
                    a.length = 0;
                    this.trigger("reset")
                };
                this.resetStream_ = function() {
                    we.clearDtsInfo(t);
                    s = undefined;
                    o = undefined
                };
                this.getGopForFusion_ = function(e) {
                    var i = 45e3,
                        r = 1e4,
                        n = Infinity,
                        a, s, o, u, l;
                    for (l = 0; l < this.gopCache_.length; l++) {
                        u = this.gopCache_[l];
                        o = u.gop;
                        if (!(t.pps && Jt(t.pps[0], u.pps[0])) || !(t.sps && Jt(t.sps[0], u.sps[0]))) {
                            continue
                        }
                        if (o.dts < t.timelineStartInfo.dts) {
                            continue
                        }
                        a = e.dts - o.dts - o.duration;
                        if (a >= -r && a <= i) {
                            if (!s || n > a) {
                                s = u;
                                n = a
                            }
                        }
                    }
                    if (s) {
                        return s.gop
                    }
                    return null
                };
                this.alignGopsAtStart_ = function(e) {
                    var t, i, r, n, s, o, u, l;
                    s = e.byteLength;
                    o = e.nalCount;
                    u = e.duration;
                    t = i = 0;
                    while (t < a.length && i < e.length) {
                        r = a[t];
                        n = e[i];
                        if (r.pts === n.pts) {
                            break
                        }
                        if (n.pts > r.pts) {
                            t++;
                            continue
                        }
                        i++;
                        s -= n.byteLength;
                        o -= n.nalCount;
                        u -= n.duration
                    }
                    if (i === 0) {
                        return e
                    }
                    if (i === e.length) {
                        return null
                    }
                    l = e.slice(i);
                    l.byteLength = s;
                    l.duration = u;
                    l.nalCount = o;
                    l.pts = l[0].pts;
                    l.dts = l[0].dts;
                    return l
                };
                this.alignGopsAtEnd_ = function(e) {
                    var t, i, r, n, s, o;
                    t = a.length - 1;
                    i = e.length - 1;
                    s = null;
                    o = false;
                    while (t >= 0 && i >= 0) {
                        r = a[t];
                        n = e[i];
                        if (r.pts === n.pts) {
                            o = true;
                            break
                        }
                        if (r.pts > n.pts) {
                            t--;
                            continue
                        }
                        if (t === a.length - 1) {
                            s = i
                        }
                        i--
                    }
                    if (!o && s === null) {
                        return null
                    }
                    var u;
                    if (o) {
                        u = i
                    } else {
                        u = s
                    }
                    if (u === 0) {
                        return e
                    }
                    var l = e.slice(u);
                    var c = l.reduce((function(e, t) {
                        e.byteLength += t.byteLength;
                        e.duration += t.duration;
                        e.nalCount += t.nalCount;
                        return e
                    }), {
                        byteLength: 0,
                        duration: 0,
                        nalCount: 0
                    });
                    l.byteLength = c.byteLength;
                    l.duration = c.duration;
                    l.nalCount = c.nalCount;
                    l.pts = l[0].pts;
                    l.dts = l[0].dts;
                    return l
                };
                this.alignGopsWith = function(e) {
                    a = e
                }
            };
            Xt.prototype = new t;
            Yt = function e(t, i) {
                this.numberOfTracks = 0;
                this.metadataStream = i;
                t = t || {};
                if (typeof t.remux !== "undefined") {
                    this.remuxTracks = !!t.remux
                } else {
                    this.remuxTracks = true
                }
                if (typeof t.keepOriginalTimestamps === "boolean") {
                    this.keepOriginalTimestamps = t.keepOriginalTimestamps
                } else {
                    this.keepOriginalTimestamps = false
                }
                this.pendingTracks = [];
                this.videoTrack = null;
                this.pendingBoxes = [];
                this.pendingCaptions = [];
                this.pendingMetadata = [];
                this.pendingBytes = 0;
                this.emittedTracks = 0;
                Yt.prototype.init.call(this);
                this.push = function(e) {
                    if (e.text) {
                        return this.pendingCaptions.push(e)
                    }
                    if (e.frames) {
                        return this.pendingMetadata.push(e)
                    }
                    this.pendingTracks.push(e.track);
                    this.pendingBytes += e.boxes.byteLength;
                    if (e.track.type === "video") {
                        this.videoTrack = e.track;
                        this.pendingBoxes.push(e.boxes)
                    }
                    if (e.track.type === "audio") {
                        this.audioTrack = e.track;
                        this.pendingBoxes.unshift(e.boxes)
                    }
                }
            };
            Yt.prototype = new t;
            Yt.prototype.flush = function(e) {
                var t = 0,
                    i = {
                        captions: [],
                        captionStreams: {},
                        metadata: [],
                        info: {}
                    },
                    r, n, a, s = 0,
                    o;
                if (this.pendingTracks.length < this.numberOfTracks) {
                    if (e !== "VideoSegmentStream" && e !== "AudioSegmentStream") {
                        return
                    } else if (this.remuxTracks) {
                        return
                    } else if (this.pendingTracks.length === 0) {
                        this.emittedTracks++;
                        if (this.emittedTracks >= this.numberOfTracks) {
                            this.trigger("done");
                            this.emittedTracks = 0
                        }
                        return
                    }
                }
                if (this.videoTrack) {
                    s = this.videoTrack.timelineStartInfo.pts;
                    qt.forEach((function(e) {
                        i.info[e] = this.videoTrack[e]
                    }), this)
                } else if (this.audioTrack) {
                    s = this.audioTrack.timelineStartInfo.pts;
                    jt.forEach((function(e) {
                        i.info[e] = this.audioTrack[e]
                    }), this)
                }
                if (this.videoTrack || this.audioTrack) {
                    if (this.pendingTracks.length === 1) {
                        i.type = this.pendingTracks[0].type
                    } else {
                        i.type = "combined"
                    }
                    this.emittedTracks += this.pendingTracks.length;
                    a = q.initSegment(this.pendingTracks);
                    i.initSegment = new Uint8Array(a.byteLength);
                    i.initSegment.set(a);
                    i.data = new Uint8Array(this.pendingBytes);
                    for (o = 0; o < this.pendingBoxes.length; o++) {
                        i.data.set(this.pendingBoxes[o], t);
                        t += this.pendingBoxes[o].byteLength
                    }
                    for (o = 0; o < this.pendingCaptions.length; o++) {
                        r = this.pendingCaptions[o];
                        r.startTime = he.metadataTsToSeconds(r.startPts, s, this.keepOriginalTimestamps);
                        r.endTime = he.metadataTsToSeconds(r.endPts, s, this.keepOriginalTimestamps);
                        i.captionStreams[r.stream] = true;
                        i.captions.push(r)
                    }
                    for (o = 0; o < this.pendingMetadata.length; o++) {
                        n = this.pendingMetadata[o];
                        n.cueTime = he.metadataTsToSeconds(n.pts, s, this.keepOriginalTimestamps);
                        i.metadata.push(n)
                    }
                    i.metadata.dispatchType = this.metadataStream.dispatchType;
                    this.pendingTracks.length = 0;
                    this.videoTrack = null;
                    this.pendingBoxes.length = 0;
                    this.pendingCaptions.length = 0;
                    this.pendingBytes = 0;
                    this.pendingMetadata.length = 0;
                    this.trigger("data", i);
                    for (o = 0; o < i.captions.length; o++) {
                        r = i.captions[o];
                        this.trigger("caption", r)
                    }
                    for (o = 0; o < i.metadata.length; o++) {
                        n = i.metadata[o];
                        this.trigger("id3Frame", n)
                    }
                }
                if (this.emittedTracks >= this.numberOfTracks) {
                    this.trigger("done");
                    this.emittedTracks = 0
                }
            };
            Yt.prototype.setRemux = function(e) {
                this.remuxTracks = e
            };
            Kt = function e(t) {
                var i = this,
                    r = true,
                    n, a;
                Kt.prototype.init.call(this);
                t = t || {};
                this.baseMediaDecodeTime = t.baseMediaDecodeTime || 0;
                this.transmuxPipeline_ = {};
                this.setupAacPipeline = function() {
                    var e = {};
                    this.transmuxPipeline_ = e;
                    e.type = "aac";
                    e.metadataStream = new pt.MetadataStream;
                    e.aacStream = new Bt;
                    e.audioTimestampRolloverStream = new pt.TimestampRolloverStream("audio");
                    e.timedMetadataTimestampRolloverStream = new pt.TimestampRolloverStream("timed-metadata");
                    e.adtsStream = new yt;
                    e.coalesceStream = new Yt(t, e.metadataStream);
                    e.headOfPipeline = e.aacStream;
                    e.aacStream.pipe(e.audioTimestampRolloverStream).pipe(e.adtsStream);
                    e.aacStream.pipe(e.timedMetadataTimestampRolloverStream).pipe(e.metadataStream).pipe(e.coalesceStream);
                    e.metadataStream.on("timestamp", (function(t) {
                        e.aacStream.setTimestamp(t.timeStamp)
                    }));
                    e.aacStream.on("data", (function(r) {
                        if (r.type !== "timed-metadata" && r.type !== "audio" || e.audioSegmentStream) {
                            return
                        }
                        a = a || {
                            timelineStartInfo: {
                                baseMediaDecodeTime: i.baseMediaDecodeTime
                            },
                            codec: "adts",
                            type: "audio"
                        };
                        e.coalesceStream.numberOfTracks++;
                        e.audioSegmentStream = new zt(a, t);
                        e.audioSegmentStream.on("log", i.getLogTrigger_("audioSegmentStream"));
                        e.audioSegmentStream.on("timingInfo", i.trigger.bind(i, "audioTimingInfo"));
                        e.adtsStream.pipe(e.audioSegmentStream).pipe(e.coalesceStream);
                        i.trigger("trackinfo", {
                            hasAudio: !!a,
                            hasVideo: !!n
                        })
                    }));
                    e.coalesceStream.on("data", this.trigger.bind(this, "data"));
                    e.coalesceStream.on("done", this.trigger.bind(this, "done"));
                    Qt(this, e)
                };
                this.setupTsPipeline = function() {
                    var e = {};
                    this.transmuxPipeline_ = e;
                    e.type = "ts";
                    e.metadataStream = new pt.MetadataStream;
                    e.packetStream = new pt.TransportPacketStream;
                    e.parseStream = new pt.TransportParseStream;
                    e.elementaryStream = new pt.ElementaryStream;
                    e.timestampRolloverStream = new pt.TimestampRolloverStream;
                    e.adtsStream = new yt;
                    e.h264Stream = new Vt;
                    e.captionStream = new pt.CaptionStream(t);
                    e.coalesceStream = new Yt(t, e.metadataStream);
                    e.headOfPipeline = e.packetStream;
                    e.packetStream.pipe(e.parseStream).pipe(e.elementaryStream).pipe(e.timestampRolloverStream);
                    e.timestampRolloverStream.pipe(e.h264Stream);
                    e.timestampRolloverStream.pipe(e.adtsStream);
                    e.timestampRolloverStream.pipe(e.metadataStream).pipe(e.coalesceStream);
                    e.h264Stream.pipe(e.captionStream).pipe(e.coalesceStream);
                    e.elementaryStream.on("data", (function(r) {
                        var s;
                        if (r.type === "metadata") {
                            s = r.tracks.length;
                            while (s--) {
                                if (!n && r.tracks[s].type === "video") {
                                    n = r.tracks[s];
                                    n.timelineStartInfo.baseMediaDecodeTime = i.baseMediaDecodeTime
                                } else if (!a && r.tracks[s].type === "audio") {
                                    a = r.tracks[s];
                                    a.timelineStartInfo.baseMediaDecodeTime = i.baseMediaDecodeTime
                                }
                            }
                            if (n && !e.videoSegmentStream) {
                                e.coalesceStream.numberOfTracks++;
                                e.videoSegmentStream = new Xt(n, t);
                                e.videoSegmentStream.on("log", i.getLogTrigger_("videoSegmentStream"));
                                e.videoSegmentStream.on("timelineStartInfo", (function(r) {
                                    if (a && !t.keepOriginalTimestamps) {
                                        a.timelineStartInfo = r;
                                        e.audioSegmentStream.setEarliestDts(r.dts - i.baseMediaDecodeTime)
                                    }
                                }));
                                e.videoSegmentStream.on("processedGopsInfo", i.trigger.bind(i, "gopInfo"));
                                e.videoSegmentStream.on("segmentTimingInfo", i.trigger.bind(i, "videoSegmentTimingInfo"));
                                e.videoSegmentStream.on("baseMediaDecodeTime", (function(t) {
                                    if (a) {
                                        e.audioSegmentStream.setVideoBaseMediaDecodeTime(t)
                                    }
                                }));
                                e.videoSegmentStream.on("timingInfo", i.trigger.bind(i, "videoTimingInfo"));
                                e.h264Stream.pipe(e.videoSegmentStream).pipe(e.coalesceStream)
                            }
                            if (a && !e.audioSegmentStream) {
                                e.coalesceStream.numberOfTracks++;
                                e.audioSegmentStream = new zt(a, t);
                                e.audioSegmentStream.on("log", i.getLogTrigger_("audioSegmentStream"));
                                e.audioSegmentStream.on("timingInfo", i.trigger.bind(i, "audioTimingInfo"));
                                e.audioSegmentStream.on("segmentTimingInfo", i.trigger.bind(i, "audioSegmentTimingInfo"));
                                e.adtsStream.pipe(e.audioSegmentStream).pipe(e.coalesceStream)
                            }
                            i.trigger("trackinfo", {
                                hasAudio: !!a,
                                hasVideo: !!n
                            })
                        }
                    }));
                    e.coalesceStream.on("data", this.trigger.bind(this, "data"));
                    e.coalesceStream.on("id3Frame", (function(t) {
                        t.dispatchType = e.metadataStream.dispatchType;
                        i.trigger("id3Frame", t)
                    }));
                    e.coalesceStream.on("caption", this.trigger.bind(this, "caption"));
                    e.coalesceStream.on("done", this.trigger.bind(this, "done"));
                    Qt(this, e)
                };
                this.setBaseMediaDecodeTime = function(e) {
                    var i = this.transmuxPipeline_;
                    if (!t.keepOriginalTimestamps) {
                        this.baseMediaDecodeTime = e
                    }
                    if (a) {
                        a.timelineStartInfo.dts = undefined;
                        a.timelineStartInfo.pts = undefined;
                        we.clearDtsInfo(a);
                        if (i.audioTimestampRolloverStream) {
                            i.audioTimestampRolloverStream.discontinuity()
                        }
                    }
                    if (n) {
                        if (i.videoSegmentStream) {
                            i.videoSegmentStream.gopCache_ = []
                        }
                        n.timelineStartInfo.dts = undefined;
                        n.timelineStartInfo.pts = undefined;
                        we.clearDtsInfo(n);
                        i.captionStream.reset()
                    }
                    if (i.timestampRolloverStream) {
                        i.timestampRolloverStream.discontinuity()
                    }
                };
                this.setAudioAppendStart = function(e) {
                    if (a) {
                        this.transmuxPipeline_.audioSegmentStream.setAudioAppendStart(e)
                    }
                };
                this.setRemux = function(e) {
                    var i = this.transmuxPipeline_;
                    t.remux = e;
                    if (i && i.coalesceStream) {
                        i.coalesceStream.setRemux(e)
                    }
                };
                this.alignGopsWith = function(e) {
                    if (n && this.transmuxPipeline_.videoSegmentStream) {
                        this.transmuxPipeline_.videoSegmentStream.alignGopsWith(e)
                    }
                };
                this.getLogTrigger_ = function(e) {
                    var t = this;
                    return function(i) {
                        i.stream = e;
                        t.trigger("log", i)
                    }
                };
                this.push = function(e) {
                    if (r) {
                        var t = Wt(e);
                        if (t && this.transmuxPipeline_.type !== "aac") {
                            this.setupAacPipeline()
                        } else if (!t && this.transmuxPipeline_.type !== "ts") {
                            this.setupTsPipeline()
                        }
                        r = false
                    }
                    this.transmuxPipeline_.headOfPipeline.push(e)
                };
                this.flush = function() {
                    r = true;
                    this.transmuxPipeline_.headOfPipeline.flush()
                };
                this.endTimeline = function() {
                    this.transmuxPipeline_.headOfPipeline.endTimeline()
                };
                this.reset = function() {
                    if (this.transmuxPipeline_.headOfPipeline) {
                        this.transmuxPipeline_.headOfPipeline.reset()
                    }
                };
                this.resetCaptions = function() {
                    if (this.transmuxPipeline_.captionStream) {
                        this.transmuxPipeline_.captionStream.reset()
                    }
                }
            };
            Kt.prototype = new t;
            var ei = {
                Transmuxer: Kt,
                VideoSegmentStream: Xt,
                AudioSegmentStream: zt,
                AUDIO_PROPERTIES: jt,
                VIDEO_PROPERTIES: qt,
                generateSegmentTimingInfo: Zt
            };
            var ti = function e(t) {
                return t >>> 0
            };
            var ii = function e(t) {
                return ("00" + t.toString(16)).slice(-2)
            };
            var ri = {
                toUnsigned: ti,
                toHexString: ii
            };
            var ni = function e(t) {
                var i = "";
                i += String.fromCharCode(t[0]);
                i += String.fromCharCode(t[1]);
                i += String.fromCharCode(t[2]);
                i += String.fromCharCode(t[3]);
                return i
            };
            var ai = ni;
            var si = ri.toUnsigned;
            var oi = function e(t, i) {
                var r = [],
                    n, a, s, o, u;
                if (!i.length) {
                    return null
                }
                for (n = 0; n < t.byteLength;) {
                    a = si(t[n] << 24 | t[n + 1] << 16 | t[n + 2] << 8 | t[n + 3]);
                    s = ai(t.subarray(n + 4, n + 8));
                    o = a > 1 ? n + a : t.byteLength;
                    if (s === i[0]) {
                        if (i.length === 1) {
                            r.push(t.subarray(n + 8, o))
                        } else {
                            u = e(t.subarray(n + 8, o), i.slice(1));
                            if (u.length) {
                                r = r.concat(u)
                            }
                        }
                    }
                    n = o
                }
                return r
            };
            var ui = oi;
            var li = ri.toUnsigned;
            var ci = n.getUint64;
            var fi = function e(t) {
                var i = {
                    version: t[0],
                    flags: new Uint8Array(t.subarray(1, 4))
                };
                if (i.version === 1) {
                    i.baseMediaDecodeTime = ci(t.subarray(4))
                } else {
                    i.baseMediaDecodeTime = li(t[4] << 24 | t[5] << 16 | t[6] << 8 | t[7])
                }
                return i
            };
            var di = fi;
            var hi = function e(t) {
                return {
                    isLeading: (t[0] & 12) >>> 2,
                    dependsOn: t[0] & 3,
                    isDependedOn: (t[1] & 192) >>> 6,
                    hasRedundancy: (t[1] & 48) >>> 4,
                    paddingValue: (t[1] & 14) >>> 1,
                    isNonSyncSample: t[1] & 1,
                    degradationPriority: t[2] << 8 | t[3]
                }
            };
            var pi = hi;
            var mi = function e(t) {
                var i = {
                        version: t[0],
                        flags: new Uint8Array(t.subarray(1, 4)),
                        samples: []
                    },
                    r = new DataView(t.buffer, t.byteOffset, t.byteLength),
                    n = i.flags[2] & 1,
                    a = i.flags[2] & 4,
                    s = i.flags[1] & 1,
                    o = i.flags[1] & 2,
                    u = i.flags[1] & 4,
                    l = i.flags[1] & 8,
                    c = r.getUint32(4),
                    f = 8,
                    d;
                if (n) {
                    i.dataOffset = r.getInt32(f);
                    f += 4
                }
                if (a && c) {
                    d = {
                        flags: pi(t.subarray(f, f + 4))
                    };
                    f += 4;
                    if (s) {
                        d.duration = r.getUint32(f);
                        f += 4
                    }
                    if (o) {
                        d.size = r.getUint32(f);
                        f += 4
                    }
                    if (l) {
                        if (i.version === 1) {
                            d.compositionTimeOffset = r.getInt32(f)
                        } else {
                            d.compositionTimeOffset = r.getUint32(f)
                        }
                        f += 4
                    }
                    i.samples.push(d);
                    c--
                }
                while (c--) {
                    d = {};
                    if (s) {
                        d.duration = r.getUint32(f);
                        f += 4
                    }
                    if (o) {
                        d.size = r.getUint32(f);
                        f += 4
                    }
                    if (u) {
                        d.flags = pi(t.subarray(f, f + 4));
                        f += 4
                    }
                    if (l) {
                        if (i.version === 1) {
                            d.compositionTimeOffset = r.getInt32(f)
                        } else {
                            d.compositionTimeOffset = r.getUint32(f)
                        }
                        f += 4
                    }
                    i.samples.push(d)
                }
                return i
            };
            var vi = mi;
            var gi = function e(t) {
                var i = new DataView(t.buffer, t.byteOffset, t.byteLength),
                    r = {
                        version: t[0],
                        flags: new Uint8Array(t.subarray(1, 4)),
                        trackId: i.getUint32(4)
                    },
                    n = r.flags[2] & 1,
                    a = r.flags[2] & 2,
                    s = r.flags[2] & 8,
                    o = r.flags[2] & 16,
                    u = r.flags[2] & 32,
                    l = r.flags[0] & 65536,
                    c = r.flags[0] & 131072,
                    f;
                f = 8;
                if (n) {
                    f += 4;
                    r.baseDataOffset = i.getUint32(12);
                    f += 4
                }
                if (a) {
                    r.sampleDescriptionIndex = i.getUint32(f);
                    f += 4
                }
                if (s) {
                    r.defaultSampleDuration = i.getUint32(f);
                    f += 4
                }
                if (o) {
                    r.defaultSampleSize = i.getUint32(f);
                    f += 4
                }
                if (u) {
                    r.defaultSampleFlags = i.getUint32(f)
                }
                if (l) {
                    r.durationIsEmpty = true
                }
                if (!n && c) {
                    r.baseDataOffsetIsMoof = true
                }
                return r
            };
            var yi = gi;
            var _i = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
            var bi;
            if (typeof window !== "undefined") {
                bi = window
            } else if (typeof _i !== "undefined") {
                bi = _i
            } else if (typeof self !== "undefined") {
                bi = self
            } else {
                bi = {}
            }
            var Ti = bi;
            var Si = Oe.discardEmulationPreventionBytes;
            var Ei = Ge.CaptionStream;
            var wi = function e(t, i) {
                var r = t;
                for (var n = 0; n < i.length; n++) {
                    var a = i[n];
                    if (r < a.size) {
                        return a
                    }
                    r -= a.size
                }
                return null
            };
            var ki = function e(t, i, r) {
                var n = new DataView(t.buffer, t.byteOffset, t.byteLength),
                    a = {
                        logs: [],
                        seiNals: []
                    },
                    s, o, u, l;
                for (o = 0; o + 4 < t.length; o += u) {
                    u = n.getUint32(o);
                    o += 4;
                    if (u <= 0) {
                        continue
                    }
                    switch (t[o] & 31) {
                        case 6:
                            var c = t.subarray(o + 1, o + 1 + u);
                            var f = wi(o, i);
                            s = {
                                nalUnitType: "sei_rbsp",
                                size: u,
                                data: c,
                                escapedRBSP: Si(c),
                                trackId: r
                            };
                            if (f) {
                                s.pts = f.pts;
                                s.dts = f.dts;
                                l = f
                            } else if (l) {
                                s.pts = l.pts;
                                s.dts = l.dts
                            } else {
                                a.logs.push({
                                    level: "warn",
                                    message: "We've encountered a nal unit without data at " + o + " for trackId " + r + ". See mux.js#223."
                                });
                                break
                            }
                            a.seiNals.push(s);
                            break
                    }
                }
                return a
            };
            var Ci = function e(t, i, r) {
                var n = i;
                var a = r.defaultSampleDuration || 0;
                var s = r.defaultSampleSize || 0;
                var o = r.trackId;
                var u = [];
                t.forEach((function(e) {
                    var t = vi(e);
                    var i = t.samples;
                    i.forEach((function(e) {
                        if (e.duration === undefined) {
                            e.duration = a
                        }
                        if (e.size === undefined) {
                            e.size = s
                        }
                        e.trackId = o;
                        e.dts = n;
                        if (e.compositionTimeOffset === undefined) {
                            e.compositionTimeOffset = 0
                        }
                        if (typeof n === "bigint") {
                            e.pts = n + Ti.BigInt(e.compositionTimeOffset);
                            n += Ti.BigInt(e.duration)
                        } else {
                            e.pts = n + e.compositionTimeOffset;
                            n += e.duration
                        }
                    }));
                    u = u.concat(i)
                }));
                return u
            };
            var Ii = function e(t, i) {
                var r = ui(t, ["moof", "traf"]);
                var n = ui(t, ["mdat"]);
                var a = {};
                var s = [];
                n.forEach((function(e, t) {
                    var i = r[t];
                    s.push({
                        mdat: e,
                        traf: i
                    })
                }));
                s.forEach((function(e) {
                    var t = e.mdat;
                    var r = e.traf;
                    var n = ui(r, ["tfhd"]);
                    var s = yi(n[0]);
                    var o = s.trackId;
                    var u = ui(r, ["tfdt"]);
                    var l = u.length > 0 ? di(u[0]).baseMediaDecodeTime : 0;
                    var c = ui(r, ["trun"]);
                    var f;
                    var d;
                    if (i === o && c.length > 0) {
                        f = Ci(c, l, s);
                        d = ki(t, f, o);
                        if (!a[o]) {
                            a[o] = {
                                seiNals: [],
                                logs: []
                            }
                        }
                        a[o].seiNals = a[o].seiNals.concat(d.seiNals);
                        a[o].logs = a[o].logs.concat(d.logs)
                    }
                }));
                return a
            };
            var Ai = function e(t, i, r) {
                var n;
                if (i === null) {
                    return null
                }
                n = Ii(t, i);
                var a = n[i] || {};
                return {
                    seiNals: a.seiNals,
                    logs: a.logs,
                    timescale: r
                }
            };
            var xi = function e() {
                var t = false;
                var i;
                var r;
                var n;
                var a;
                var s;
                var o;
                this.isInitialized = function() {
                    return t
                };
                this.init = function(e) {
                    i = new Ei;
                    t = true;
                    o = e ? e.isPartial : false;
                    i.on("data", (function(e) {
                        e.startTime = e.startPts / a;
                        e.endTime = e.endPts / a;
                        s.captions.push(e);
                        s.captionStreams[e.stream] = true
                    }));
                    i.on("log", (function(e) {
                        s.logs.push(e)
                    }))
                };
                this.isNewInit = function(e, t) {
                    if (e && e.length === 0 || t && typeof t === "object" && Object.keys(t).length === 0) {
                        return false
                    }
                    return n !== e[0] || a !== t[n]
                };
                this.parse = function(e, t, i) {
                    var o;
                    if (!this.isInitialized()) {
                        return null
                    } else if (!t || !i) {
                        return null
                    } else if (this.isNewInit(t, i)) {
                        n = t[0];
                        a = i[n]
                    } else if (n === null || !a) {
                        r.push(e);
                        return null
                    }
                    while (r.length > 0) {
                        var u = r.shift();
                        this.parse(u, t, i)
                    }
                    o = Ai(e, n, a);
                    if (o && o.logs) {
                        s.logs = s.logs.concat(o.logs)
                    }
                    if (o === null || !o.seiNals) {
                        if (s.logs.length) {
                            return {
                                logs: s.logs,
                                captions: [],
                                captionStreams: []
                            }
                        }
                        return null
                    }
                    this.pushNals(o.seiNals);
                    this.flushStream();
                    return s
                };
                this.pushNals = function(e) {
                    if (!this.isInitialized() || !e || e.length === 0) {
                        return null
                    }
                    e.forEach((function(e) {
                        i.push(e)
                    }))
                };
                this.flushStream = function() {
                    if (!this.isInitialized()) {
                        return null
                    }
                    if (!o) {
                        i.flush()
                    } else {
                        i.partialFlush()
                    }
                };
                this.clearParsedCaptions = function() {
                    s.captions = [];
                    s.captionStreams = {};
                    s.logs = []
                };
                this.resetCaptionStream = function() {
                    if (!this.isInitialized()) {
                        return null
                    }
                    i.reset()
                };
                this.clearAllCaptions = function() {
                    this.clearParsedCaptions();
                    this.resetCaptionStream()
                };
                this.reset = function() {
                    r = [];
                    n = null;
                    a = null;
                    if (!s) {
                        s = {
                            captions: [],
                            captionStreams: {},
                            logs: []
                        }
                    } else {
                        this.clearParsedCaptions()
                    }
                    this.resetCaptionStream()
                };
                this.reset()
            };
            var Pi = xi;
            var Oi = ri.toUnsigned;
            var Di = ri.toHexString;
            var Li = n.getUint64;
            var Ni, Ri, Mi, Ui, Bi, Fi;
            Ni = function e(t) {
                var i = {},
                    r = ui(t, ["moov", "trak"]);
                return r.reduce((function(e, t) {
                    var i, r, n, a, s;
                    i = ui(t, ["tkhd"])[0];
                    if (!i) {
                        return null
                    }
                    r = i[0];
                    n = r === 0 ? 12 : 20;
                    a = Oi(i[n] << 24 | i[n + 1] << 16 | i[n + 2] << 8 | i[n + 3]);
                    s = ui(t, ["mdia", "mdhd"])[0];
                    if (!s) {
                        return null
                    }
                    r = s[0];
                    n = r === 0 ? 12 : 20;
                    e[a] = Oi(s[n] << 24 | s[n + 1] << 16 | s[n + 2] << 8 | s[n + 3]);
                    return e
                }), i)
            };
            Ri = function e(t, i) {
                var r;
                r = ui(i, ["moof", "traf"]);
                var n = r.reduce((function(e, i) {
                    var r = ui(i, ["tfhd"])[0];
                    var n = Oi(r[4] << 24 | r[5] << 16 | r[6] << 8 | r[7]);
                    var a = t[n] || 9e4;
                    var s = ui(i, ["tfdt"])[0];
                    var o = new DataView(s.buffer, s.byteOffset, s.byteLength);
                    var u;
                    if (s[0] === 1) {
                        u = Li(s.subarray(4, 12))
                    } else {
                        u = o.getUint32(4)
                    }
                    var l;
                    if (typeof u === "bigint") {
                        l = u / Ti.BigInt(a)
                    } else if (typeof u === "number" && !isNaN(u)) {
                        l = u / a
                    }
                    if (l < Number.MAX_SAFE_INTEGER) {
                        l = Number(l)
                    }
                    if (l < e) {
                        e = l
                    }
                    return e
                }), Infinity);
                return typeof n === "bigint" || isFinite(n) ? n : 0
            };
            Mi = function e(t, i) {
                var r = ui(i, ["moof", "traf"]);
                var n = 0;
                var a = 0;
                var s;
                if (r && r.length) {
                    var o = ui(r[0], ["tfhd"])[0];
                    var u = ui(r[0], ["trun"])[0];
                    var l = ui(r[0], ["tfdt"])[0];
                    if (o) {
                        var c = yi(o);
                        s = c.trackId
                    }
                    if (l) {
                        var f = di(l);
                        n = f.baseMediaDecodeTime
                    }
                    if (u) {
                        var d = vi(u);
                        if (d.samples && d.samples.length) {
                            a = d.samples[0].compositionTimeOffset || 0
                        }
                    }
                }
                var h = t[s] || 9e4;
                if (typeof n === "bigint") {
                    a = Ti.BigInt(a);
                    h = Ti.BigInt(h)
                }
                var p = (n + a) / h;
                if (typeof p === "bigint" && p < Number.MAX_SAFE_INTEGER) {
                    p = Number(p)
                }
                return p
            };
            Ui = function e(t) {
                var i = ui(t, ["moov", "trak"]);
                var r = [];
                i.forEach((function(e) {
                    var t = ui(e, ["mdia", "hdlr"]);
                    var i = ui(e, ["tkhd"]);
                    t.forEach((function(e, t) {
                        var n = ai(e.subarray(8, 12));
                        var a = i[t];
                        var s;
                        var o;
                        var u;
                        if (n === "vide") {
                            s = new DataView(a.buffer, a.byteOffset, a.byteLength);
                            o = s.getUint8(0);
                            u = o === 0 ? s.getUint32(12) : s.getUint32(20);
                            r.push(u)
                        }
                    }))
                }));
                return r
            };
            Fi = function e(t) {
                var i = t[0];
                var r = i === 0 ? 12 : 20;
                return Oi(t[r] << 24 | t[r + 1] << 16 | t[r + 2] << 8 | t[r + 3])
            };
            Bi = function e(t) {
                var i = ui(t, ["moov", "trak"]);
                var r = [];
                i.forEach((function(e) {
                    var t = {};
                    var i = ui(e, ["tkhd"])[0];
                    var n, a;
                    if (i) {
                        n = new DataView(i.buffer, i.byteOffset, i.byteLength);
                        a = n.getUint8(0);
                        t.id = a === 0 ? n.getUint32(12) : n.getUint32(20)
                    }
                    var s = ui(e, ["mdia", "hdlr"])[0];
                    if (s) {
                        var o = ai(s.subarray(8, 12));
                        if (o === "vide") {
                            t.type = "video"
                        } else if (o === "soun") {
                            t.type = "audio"
                        } else {
                            t.type = o
                        }
                    }
                    var u = ui(e, ["mdia", "minf", "stbl", "stsd"])[0];
                    if (u) {
                        var l = u.subarray(8);
                        t.codec = ai(l.subarray(4, 8));
                        var c = ui(l, [t.codec])[0];
                        var f, d;
                        if (c) {
                            if (/^[asm]vc[1-9]$/i.test(t.codec)) {
                                f = c.subarray(78);
                                d = ai(f.subarray(4, 8));
                                if (d === "avcC" && f.length > 11) {
                                    t.codec += ".";
                                    t.codec += Di(f[9]);
                                    t.codec += Di(f[10]);
                                    t.codec += Di(f[11])
                                } else {
                                    t.codec = "avc1.4d400d"
                                }
                            } else if (/^mp4[a,v]$/i.test(t.codec)) {
                                f = c.subarray(28);
                                d = ai(f.subarray(4, 8));
                                if (d === "esds" && f.length > 20 && f[19] !== 0) {
                                    t.codec += "." + Di(f[19]);
                                    t.codec += "." + Di(f[20] >>> 2 & 63).replace(/^0/, "")
                                } else {
                                    t.codec = "mp4a.40.2"
                                }
                            } else {
                                t.codec = t.codec.toLowerCase()
                            }
                        }
                    }
                    var h = ui(e, ["mdia", "mdhd"])[0];
                    if (h) {
                        t.timescale = Fi(h)
                    }
                    r.push(t)
                }));
                return r
            };
            var ji = {
                findBox: ui,
                parseType: ai,
                timescale: Ni,
                startTime: Ri,
                compositionStartTime: Mi,
                videoTrackIds: Ui,
                tracks: Bi,
                getTimescaleFromMediaHeader: Fi
            };
            var Hi = function e(t) {
                var i = t[1] & 31;
                i <<= 8;
                i |= t[2];
                return i
            };
            var qi = function e(t) {
                return !!(t[1] & 64)
            };
            var Vi = function e(t) {
                var i = 0;
                if ((t[3] & 48) >>> 4 > 1) {
                    i += t[4] + 1
                }
                return i
            };
            var Wi = function e(t, i) {
                var r = Hi(t);
                if (r === 0) {
                    return "pat"
                } else if (r === i) {
                    return "pmt"
                } else if (i) {
                    return "pes"
                }
                return null
            };
            var Gi = function e(t) {
                var i = qi(t);
                var r = 4 + Vi(t);
                if (i) {
                    r += t[r] + 1
                }
                return (t[r + 10] & 31) << 8 | t[r + 11]
            };
            var Xi = function e(t) {
                var i = {};
                var r = qi(t);
                var n = 4 + Vi(t);
                if (r) {
                    n += t[n] + 1
                }
                if (!(t[n + 5] & 1)) {
                    return
                }
                var a, s, o;
                a = (t[n + 1] & 15) << 8 | t[n + 2];
                s = 3 + a - 4;
                o = (t[n + 10] & 15) << 8 | t[n + 11];
                var u = 12 + o;
                while (u < s) {
                    var l = n + u;
                    i[(t[l + 1] & 31) << 8 | t[l + 2]] = t[l];
                    u += ((t[l + 3] & 15) << 8 | t[l + 4]) + 5
                }
                return i
            };
            var zi = function e(t, i) {
                var r = Hi(t);
                var n = i[r];
                switch (n) {
                    case Xe.H264_STREAM_TYPE:
                        return "video";
                    case Xe.ADTS_STREAM_TYPE:
                        return "audio";
                    case Xe.METADATA_STREAM_TYPE:
                        return "timed-metadata";
                    default:
                        return null
                }
            };
            var Ki = function e(t) {
                var i = qi(t);
                if (!i) {
                    return null
                }
                var r = 4 + Vi(t);
                if (r >= t.byteLength) {
                    return null
                }
                var n = null;
                var a;
                a = t[r + 7];
                if (a & 192) {
                    n = {};
                    n.pts = (t[r + 9] & 14) << 27 | (t[r + 10] & 255) << 20 | (t[r + 11] & 254) << 12 | (t[r + 12] & 255) << 5 | (t[r + 13] & 254) >>> 3;
                    n.pts *= 4;
                    n.pts += (t[r + 13] & 6) >>> 1;
                    n.dts = n.pts;
                    if (a & 64) {
                        n.dts = (t[r + 14] & 14) << 27 | (t[r + 15] & 255) << 20 | (t[r + 16] & 254) << 12 | (t[r + 17] & 255) << 5 | (t[r + 18] & 254) >>> 3;
                        n.dts *= 4;
                        n.dts += (t[r + 18] & 6) >>> 1
                    }
                }
                return n
            };
            var Yi = function e(t) {
                switch (t) {
                    case 5:
                        return "slice_layer_without_partitioning_rbsp_idr";
                    case 6:
                        return "sei_rbsp";
                    case 7:
                        return "seq_parameter_set_rbsp";
                    case 8:
                        return "pic_parameter_set_rbsp";
                    case 9:
                        return "access_unit_delimiter_rbsp";
                    default:
                        return null
                }
            };
            var $i = function e(t) {
                var i = 4 + Vi(t);
                var r = t.subarray(i);
                var n = 0;
                var a = 0;
                var s = false;
                var o;
                for (; a < r.byteLength - 3; a++) {
                    if (r[a + 2] === 1) {
                        n = a + 5;
                        break
                    }
                }
                while (n < r.byteLength) {
                    switch (r[n]) {
                        case 0:
                            if (r[n - 1] !== 0) {
                                n += 2;
                                break
                            } else if (r[n - 2] !== 0) {
                                n++;
                                break
                            }
                            if (a + 3 !== n - 2) {
                                o = Yi(r[a + 3] & 31);
                                if (o === "slice_layer_without_partitioning_rbsp_idr") {
                                    s = true
                                }
                            }
                            do {
                                n++
                            } while (r[n] !== 1 && n < r.length);
                            a = n - 2;
                            n += 3;
                            break;
                        case 1:
                            if (r[n - 1] !== 0 || r[n - 2] !== 0) {
                                n += 3;
                                break
                            }
                            o = Yi(r[a + 3] & 31);
                            if (o === "slice_layer_without_partitioning_rbsp_idr") {
                                s = true
                            }
                            a = n - 2;
                            n += 3;
                            break;
                        default:
                            n += 3;
                            break
                    }
                }
                r = r.subarray(a);
                n -= a;
                a = 0;
                if (r && r.byteLength > 3) {
                    o = Yi(r[a + 3] & 31);
                    if (o === "slice_layer_without_partitioning_rbsp_idr") {
                        s = true
                    }
                }
                return s
            };
            var Qi = {
                parseType: Wi,
                parsePat: Gi,
                parsePmt: Xi,
                parsePayloadUnitStartIndicator: qi,
                parsePesType: zi,
                parsePesTime: Ki,
                videoPacketContainsKeyFrame: $i
            };
            var Ji = Je.handleRollover;
            var Zi = {};
            Zi.ts = Qi;
            Zi.aac = Mt;
            var er = he.ONE_SECOND_IN_TS;
            var tr = 188,
                ir = 71;
            var rr = function e(t, i) {
                var r = 0,
                    n = tr,
                    a, s;
                while (n < t.byteLength) {
                    if (t[r] === ir && t[n] === ir) {
                        a = t.subarray(r, n);
                        s = Zi.ts.parseType(a, i.pid);
                        switch (s) {
                            case "pat":
                                i.pid = Zi.ts.parsePat(a);
                                break;
                            case "pmt":
                                var o = Zi.ts.parsePmt(a);
                                i.table = i.table || {};
                                Object.keys(o).forEach((function(e) {
                                    i.table[e] = o[e]
                                }));
                                break
                        }
                        r += tr;
                        n += tr;
                        continue
                    }
                    r++;
                    n++
                }
            };
            var nr = function e(t, i, r) {
                var n = 0,
                    a = tr,
                    s, o, u, l, c;
                var f = false;
                while (a <= t.byteLength) {
                    if (t[n] === ir && (t[a] === ir || a === t.byteLength)) {
                        s = t.subarray(n, a);
                        o = Zi.ts.parseType(s, i.pid);
                        switch (o) {
                            case "pes":
                                u = Zi.ts.parsePesType(s, i.table);
                                l = Zi.ts.parsePayloadUnitStartIndicator(s);
                                if (u === "audio" && l) {
                                    c = Zi.ts.parsePesTime(s);
                                    if (c) {
                                        c.type = "audio";
                                        r.audio.push(c);
                                        f = true
                                    }
                                }
                                break
                        }
                        if (f) {
                            break
                        }
                        n += tr;
                        a += tr;
                        continue
                    }
                    n++;
                    a++
                }
                a = t.byteLength;
                n = a - tr;
                f = false;
                while (n >= 0) {
                    if (t[n] === ir && (t[a] === ir || a === t.byteLength)) {
                        s = t.subarray(n, a);
                        o = Zi.ts.parseType(s, i.pid);
                        switch (o) {
                            case "pes":
                                u = Zi.ts.parsePesType(s, i.table);
                                l = Zi.ts.parsePayloadUnitStartIndicator(s);
                                if (u === "audio" && l) {
                                    c = Zi.ts.parsePesTime(s);
                                    if (c) {
                                        c.type = "audio";
                                        r.audio.push(c);
                                        f = true
                                    }
                                }
                                break
                        }
                        if (f) {
                            break
                        }
                        n -= tr;
                        a -= tr;
                        continue
                    }
                    n--;
                    a--
                }
            };
            var ar = function e(t, i, r) {
                var n = 0,
                    a = tr,
                    s, o, u, l, c, f, d, h;
                var p = false;
                var m = {
                    data: [],
                    size: 0
                };
                while (a < t.byteLength) {
                    if (t[n] === ir && t[a] === ir) {
                        s = t.subarray(n, a);
                        o = Zi.ts.parseType(s, i.pid);
                        switch (o) {
                            case "pes":
                                u = Zi.ts.parsePesType(s, i.table);
                                l = Zi.ts.parsePayloadUnitStartIndicator(s);
                                if (u === "video") {
                                    if (l && !p) {
                                        c = Zi.ts.parsePesTime(s);
                                        if (c) {
                                            c.type = "video";
                                            r.video.push(c);
                                            p = true
                                        }
                                    }
                                    if (!r.firstKeyFrame) {
                                        if (l) {
                                            if (m.size !== 0) {
                                                f = new Uint8Array(m.size);
                                                d = 0;
                                                while (m.data.length) {
                                                    h = m.data.shift();
                                                    f.set(h, d);
                                                    d += h.byteLength
                                                }
                                                if (Zi.ts.videoPacketContainsKeyFrame(f)) {
                                                    var v = Zi.ts.parsePesTime(f);
                                                    if (v) {
                                                        r.firstKeyFrame = v;
                                                        r.firstKeyFrame.type = "video"
                                                    } else {
                                                        console.warn("Failed to extract PTS/DTS from PES at first keyframe. " + "This could be an unusual TS segment, or else mux.js did not " + "parse your TS segment correctly. If you know your TS " + "segments do contain PTS/DTS on keyframes please file a bug " + "report! You can try ffprobe to double check for yourself.")
                                                    }
                                                }
                                                m.size = 0
                                            }
                                        }
                                        m.data.push(s);
                                        m.size += s.byteLength
                                    }
                                }
                                break
                        }
                        if (p && r.firstKeyFrame) {
                            break
                        }
                        n += tr;
                        a += tr;
                        continue
                    }
                    n++;
                    a++
                }
                a = t.byteLength;
                n = a - tr;
                p = false;
                while (n >= 0) {
                    if (t[n] === ir && t[a] === ir) {
                        s = t.subarray(n, a);
                        o = Zi.ts.parseType(s, i.pid);
                        switch (o) {
                            case "pes":
                                u = Zi.ts.parsePesType(s, i.table);
                                l = Zi.ts.parsePayloadUnitStartIndicator(s);
                                if (u === "video" && l) {
                                    c = Zi.ts.parsePesTime(s);
                                    if (c) {
                                        c.type = "video";
                                        r.video.push(c);
                                        p = true
                                    }
                                }
                                break
                        }
                        if (p) {
                            break
                        }
                        n -= tr;
                        a -= tr;
                        continue
                    }
                    n--;
                    a--
                }
            };
            var sr = function e(t, i) {
                if (t.audio && t.audio.length) {
                    var r = i;
                    if (typeof r === "undefined" || isNaN(r)) {
                        r = t.audio[0].dts
                    }
                    t.audio.forEach((function(e) {
                        e.dts = Ji(e.dts, r);
                        e.pts = Ji(e.pts, r);
                        e.dtsTime = e.dts / er;
                        e.ptsTime = e.pts / er
                    }))
                }
                if (t.video && t.video.length) {
                    var n = i;
                    if (typeof n === "undefined" || isNaN(n)) {
                        n = t.video[0].dts
                    }
                    t.video.forEach((function(e) {
                        e.dts = Ji(e.dts, n);
                        e.pts = Ji(e.pts, n);
                        e.dtsTime = e.dts / er;
                        e.ptsTime = e.pts / er
                    }));
                    if (t.firstKeyFrame) {
                        var a = t.firstKeyFrame;
                        a.dts = Ji(a.dts, n);
                        a.pts = Ji(a.pts, n);
                        a.dtsTime = a.dts / er;
                        a.ptsTime = a.pts / er
                    }
                }
            };
            var or = function e(t) {
                var i = false,
                    r = 0,
                    n = null,
                    a = null,
                    s = 0,
                    o = 0,
                    u;
                while (t.length - o >= 3) {
                    var l = Zi.aac.parseType(t, o);
                    switch (l) {
                        case "timed-metadata":
                            if (t.length - o < 10) {
                                i = true;
                                break
                            }
                            s = Zi.aac.parseId3TagSize(t, o);
                            if (s > t.length) {
                                i = true;
                                break
                            }
                            if (a === null) {
                                u = t.subarray(o, o + s);
                                a = Zi.aac.parseAacTimestamp(u)
                            }
                            o += s;
                            break;
                        case "audio":
                            if (t.length - o < 7) {
                                i = true;
                                break
                            }
                            s = Zi.aac.parseAdtsSize(t, o);
                            if (s > t.length) {
                                i = true;
                                break
                            }
                            if (n === null) {
                                u = t.subarray(o, o + s);
                                n = Zi.aac.parseSampleRate(u)
                            }
                            r++;
                            o += s;
                            break;
                        default:
                            o++;
                            break
                    }
                    if (i) {
                        return null
                    }
                }
                if (n === null || a === null) {
                    return null
                }
                var c = er / n;
                var f = {
                    audio: [{
                        type: "audio",
                        dts: a,
                        pts: a
                    }, {
                        type: "audio",
                        dts: a + r * 1024 * c,
                        pts: a + r * 1024 * c
                    }]
                };
                return f
            };
            var ur = function e(t) {
                var i = {
                    pid: null,
                    table: null
                };
                var r = {};
                rr(t, i);
                for (var n in i.table) {
                    if (i.table.hasOwnProperty(n)) {
                        var a = i.table[n];
                        switch (a) {
                            case Xe.H264_STREAM_TYPE:
                                r.video = [];
                                ar(t, i, r);
                                if (r.video.length === 0) {
                                    delete r.video
                                }
                                break;
                            case Xe.ADTS_STREAM_TYPE:
                                r.audio = [];
                                nr(t, i, r);
                                if (r.audio.length === 0) {
                                    delete r.audio
                                }
                                break
                        }
                    }
                }
                return r
            };
            var lr = function e(t, i) {
                var r = Zi.aac.isLikelyAacData(t);
                var n;
                if (r) {
                    n = or(t)
                } else {
                    n = ur(t)
                }
                if (!n || !n.audio && !n.video) {
                    return null
                }
                sr(n, i);
                return n
            };
            var cr = {
                inspect: lr,
                parseAudioPes_: nr
            };
            var fr = function e(t, i) {
                i.on("data", (function(e) {
                    var i = e.initSegment;
                    e.initSegment = {
                        data: i.buffer,
                        byteOffset: i.byteOffset,
                        byteLength: i.byteLength
                    };
                    var r = e.data;
                    e.data = r.buffer;
                    t.postMessage({
                        action: "data",
                        segment: e,
                        byteOffset: r.byteOffset,
                        byteLength: r.byteLength
                    }, [e.data])
                }));
                i.on("done", (function(e) {
                    t.postMessage({
                        action: "done"
                    })
                }));
                i.on("gopInfo", (function(e) {
                    t.postMessage({
                        action: "gopInfo",
                        gopInfo: e
                    })
                }));
                i.on("videoSegmentTimingInfo", (function(e) {
                    var i = {
                        start: {
                            decode: he.videoTsToSeconds(e.start.dts),
                            presentation: he.videoTsToSeconds(e.start.pts)
                        },
                        end: {
                            decode: he.videoTsToSeconds(e.end.dts),
                            presentation: he.videoTsToSeconds(e.end.pts)
                        },
                        baseMediaDecodeTime: he.videoTsToSeconds(e.baseMediaDecodeTime)
                    };
                    if (e.prependedContentDuration) {
                        i.prependedContentDuration = he.videoTsToSeconds(e.prependedContentDuration)
                    }
                    t.postMessage({
                        action: "videoSegmentTimingInfo",
                        videoSegmentTimingInfo: i
                    })
                }));
                i.on("audioSegmentTimingInfo", (function(e) {
                    var i = {
                        start: {
                            decode: he.videoTsToSeconds(e.start.dts),
                            presentation: he.videoTsToSeconds(e.start.pts)
                        },
                        end: {
                            decode: he.videoTsToSeconds(e.end.dts),
                            presentation: he.videoTsToSeconds(e.end.pts)
                        },
                        baseMediaDecodeTime: he.videoTsToSeconds(e.baseMediaDecodeTime)
                    };
                    if (e.prependedContentDuration) {
                        i.prependedContentDuration = he.videoTsToSeconds(e.prependedContentDuration)
                    }
                    t.postMessage({
                        action: "audioSegmentTimingInfo",
                        audioSegmentTimingInfo: i
                    })
                }));
                i.on("id3Frame", (function(e) {
                    t.postMessage({
                        action: "id3Frame",
                        id3Frame: e
                    })
                }));
                i.on("caption", (function(e) {
                    t.postMessage({
                        action: "caption",
                        caption: e
                    })
                }));
                i.on("trackinfo", (function(e) {
                    t.postMessage({
                        action: "trackinfo",
                        trackInfo: e
                    })
                }));
                i.on("audioTimingInfo", (function(e) {
                    t.postMessage({
                        action: "audioTimingInfo",
                        audioTimingInfo: {
                            start: he.videoTsToSeconds(e.start),
                            end: he.videoTsToSeconds(e.end)
                        }
                    })
                }));
                i.on("videoTimingInfo", (function(e) {
                    t.postMessage({
                        action: "videoTimingInfo",
                        videoTimingInfo: {
                            start: he.videoTsToSeconds(e.start),
                            end: he.videoTsToSeconds(e.end)
                        }
                    })
                }));
                i.on("log", (function(e) {
                    t.postMessage({
                        action: "log",
                        log: e
                    })
                }))
            };
            var dr = function() {
                function e(e, t) {
                    this.options = t || {};
                    this.self = e;
                    this.init()
                }
                var t = e.prototype;
                t.init = function e() {
                    if (this.transmuxer) {
                        this.transmuxer.dispose()
                    }
                    this.transmuxer = new ei.Transmuxer(this.options);
                    fr(this.self, this.transmuxer)
                };
                t.pushMp4Captions = function e(t) {
                    if (!this.captionParser) {
                        this.captionParser = new Pi;
                        this.captionParser.init()
                    }
                    var i = new Uint8Array(t.data, t.byteOffset, t.byteLength);
                    var r = this.captionParser.parse(i, t.trackIds, t.timescales);
                    this.self.postMessage({
                        action: "mp4Captions",
                        captions: r && r.captions || [],
                        logs: r && r.logs || [],
                        data: i.buffer
                    }, [i.buffer])
                };
                t.probeMp4StartTime = function e(t) {
                    var i = t.timescales,
                        r = t.data;
                    var n = ji.startTime(i, r);
                    this.self.postMessage({
                        action: "probeMp4StartTime",
                        startTime: n,
                        data: r
                    }, [r.buffer])
                };
                t.probeMp4Tracks = function e(t) {
                    var i = t.data;
                    var r = ji.tracks(i);
                    this.self.postMessage({
                        action: "probeMp4Tracks",
                        tracks: r,
                        data: i
                    }, [i.buffer])
                };
                t.probeTs = function e(t) {
                    var i = t.data,
                        r = t.baseStartTime;
                    var n = typeof r === "number" && !isNaN(r) ? r * he.ONE_SECOND_IN_TS : void 0;
                    var a = cr.inspect(i, n);
                    var s = null;
                    if (a) {
                        s = {
                            hasVideo: a.video && a.video.length === 2 || false,
                            hasAudio: a.audio && a.audio.length === 2 || false
                        };
                        if (s.hasVideo) {
                            s.videoStart = a.video[0].ptsTime
                        }
                        if (s.hasAudio) {
                            s.audioStart = a.audio[0].ptsTime
                        }
                    }
                    this.self.postMessage({
                        action: "probeTs",
                        result: s,
                        data: i
                    }, [i.buffer])
                };
                t.clearAllMp4Captions = function e() {
                    if (this.captionParser) {
                        this.captionParser.clearAllCaptions()
                    }
                };
                t.clearParsedMp4Captions = function e() {
                    if (this.captionParser) {
                        this.captionParser.clearParsedCaptions()
                    }
                };
                t.push = function e(t) {
                    var i = new Uint8Array(t.data, t.byteOffset, t.byteLength);
                    this.transmuxer.push(i)
                };
                t.reset = function e() {
                    this.transmuxer.reset()
                };
                t.setTimestampOffset = function e(t) {
                    var i = t.timestampOffset || 0;
                    this.transmuxer.setBaseMediaDecodeTime(Math.round(he.secondsToVideoTs(i)))
                };
                t.setAudioAppendStart = function e(t) {
                    this.transmuxer.setAudioAppendStart(Math.ceil(he.secondsToVideoTs(t.appendStart)))
                };
                t.setRemux = function e(t) {
                    this.transmuxer.setRemux(t.remux)
                };
                t.flush = function e(t) {
                    this.transmuxer.flush();
                    self.postMessage({
                        action: "done",
                        type: "transmuxed"
                    })
                };
                t.endTimeline = function e() {
                    this.transmuxer.endTimeline();
                    self.postMessage({
                        action: "endedtimeline",
                        type: "transmuxed"
                    })
                };
                t.alignGopsWith = function e(t) {
                    this.transmuxer.alignGopsWith(t.gopsToAlignWith.slice())
                };
                return e
            }();
            self.onmessage = function(e) {
                if (e.data.action === "init" && e.data.options) {
                    this.messageHandlers = new dr(self, e.data.options);
                    return
                }
                if (!this.messageHandlers) {
                    this.messageHandlers = new dr(self)
                }
                if (e.data && e.data.action && e.data.action !== "init") {
                    if (this.messageHandlers[e.data.action]) {
                        this.messageHandlers[e.data.action](e.data)
                    }
                }
            }
        })));
        var Pp = Cp(xp);
        var Op = function e(t, i, r) {
            var n = t.data.segment,
                a = n.type,
                s = n.initSegment,
                o = n.captions,
                u = n.captionStreams,
                l = n.metadata,
                c = n.videoFrameDtsTime,
                f = n.videoFramePtsTime;
            i.buffer.push({
                captions: o,
                captionStreams: u,
                metadata: l
            });
            var d = t.data.segment.boxes || {
                data: t.data.segment.data
            };
            var h = {
                type: a,
                data: new Uint8Array(d.data, d.data.byteOffset, d.data.byteLength),
                initSegment: new Uint8Array(s.data, s.byteOffset, s.byteLength)
            };
            if (typeof c !== "undefined") {
                h.videoFrameDtsTime = c
            }
            if (typeof f !== "undefined") {
                h.videoFramePtsTime = f
            }
            r(h)
        };
        var Dp = function e(t) {
            var i = t.transmuxedData,
                r = t.callback;
            i.buffer = [];
            r(i)
        };
        var Lp = function e(t, i) {
            i.gopInfo = t.data.gopInfo
        };
        var Np = function e(t) {
            var i = t.transmuxer,
                r = t.bytes,
                n = t.audioAppendStart,
                a = t.gopsToAlignWith,
                s = t.remux,
                o = t.onData,
                u = t.onTrackInfo,
                l = t.onAudioTimingInfo,
                c = t.onVideoTimingInfo,
                f = t.onVideoSegmentTimingInfo,
                d = t.onAudioSegmentTimingInfo,
                h = t.onId3,
                p = t.onCaptions,
                m = t.onDone,
                v = t.onEndedTimeline,
                g = t.onTransmuxerLog,
                y = t.isEndOfTimeline;
            var _ = {
                buffer: []
            };
            var b = y;
            var T = function e(r) {
                if (i.currentTransmux !== t) {
                    return
                }
                if (r.data.action === "data") {
                    Op(r, _, o)
                }
                if (r.data.action === "trackinfo") {
                    u(r.data.trackInfo)
                }
                if (r.data.action === "gopInfo") {
                    Lp(r, _)
                }
                if (r.data.action === "audioTimingInfo") {
                    l(r.data.audioTimingInfo)
                }
                if (r.data.action === "videoTimingInfo") {
                    c(r.data.videoTimingInfo)
                }
                if (r.data.action === "videoSegmentTimingInfo") {
                    f(r.data.videoSegmentTimingInfo)
                }
                if (r.data.action === "audioSegmentTimingInfo") {
                    d(r.data.audioSegmentTimingInfo)
                }
                if (r.data.action === "id3Frame") {
                    h([r.data.id3Frame], r.data.id3Frame.dispatchType)
                }
                if (r.data.action === "caption") {
                    p(r.data.caption)
                }
                if (r.data.action === "endedtimeline") {
                    b = false;
                    v()
                }
                if (r.data.action === "log") {
                    g(r.data.log)
                }
                if (r.data.type !== "transmuxed") {
                    return
                }
                if (b) {
                    return
                }
                i.onmessage = null;
                Dp({
                    transmuxedData: _,
                    callback: m
                });
                Rp(i)
            };
            i.onmessage = T;
            if (n) {
                i.postMessage({
                    action: "setAudioAppendStart",
                    appendStart: n
                })
            }
            if (Array.isArray(a)) {
                i.postMessage({
                    action: "alignGopsWith",
                    gopsToAlignWith: a
                })
            }
            if (typeof s !== "undefined") {
                i.postMessage({
                    action: "setRemux",
                    remux: s
                })
            }
            if (r.byteLength) {
                var S = r instanceof ArrayBuffer ? r : r.buffer;
                var E = r instanceof ArrayBuffer ? 0 : r.byteOffset;
                i.postMessage({
                    action: "push",
                    data: S,
                    byteOffset: E,
                    byteLength: r.byteLength
                }, [S])
            }
            if (y) {
                i.postMessage({
                    action: "endTimeline"
                })
            }
            i.postMessage({
                action: "flush"
            })
        };
        var Rp = function e(t) {
            t.currentTransmux = null;
            if (t.transmuxQueue.length) {
                t.currentTransmux = t.transmuxQueue.shift();
                if (typeof t.currentTransmux === "function") {
                    t.currentTransmux()
                } else {
                    Np(t.currentTransmux)
                }
            }
        };
        var Mp = function e(t, i) {
            t.postMessage({
                action: i
            });
            Rp(t)
        };
        var Up = function e(t, i) {
            if (!i.currentTransmux) {
                i.currentTransmux = t;
                Mp(i, t);
                return
            }
            i.transmuxQueue.push(Mp.bind(null, i, t))
        };
        var Bp = function e(t) {
            Up("reset", t)
        };
        var Fp = function e(t) {
            Up("endTimeline", t)
        };
        var jp = function e(t) {
            if (!t.transmuxer.currentTransmux) {
                t.transmuxer.currentTransmux = t;
                Np(t);
                return
            }
            t.transmuxer.transmuxQueue.push(t)
        };
        var Hp = function e(t) {
            var i = new Pp;
            i.currentTransmux = null;
            i.transmuxQueue = [];
            var r = i.terminate;
            i.terminate = function() {
                i.currentTransmux = null;
                i.transmuxQueue.length = 0;
                return r.call(i)
            };
            i.postMessage({
                action: "init",
                options: t
            });
            return i
        };
        var qp = {
            reset: Bp,
            endTimeline: Fp,
            transmux: jp,
            createTransmuxer: Hp
        };
        var Vp = function e(t) {
            var i = t.transmuxer;
            var r = t.endAction || t.action;
            var n = t.callback;
            var a = X({}, t, {
                endAction: null,
                transmuxer: null,
                callback: null
            });
            var s = function e(a) {
                if (a.data.action !== r) {
                    return
                }
                i.removeEventListener("message", e);
                if (a.data.data) {
                    a.data.data = new Uint8Array(a.data.data, t.byteOffset || 0, t.byteLength || a.data.data.byteLength);
                    if (t.data) {
                        t.data = a.data.data
                    }
                }
                n(a.data)
            };
            i.addEventListener("message", s);
            if (t.data) {
                var o = t.data instanceof ArrayBuffer;
                a.byteOffset = o ? 0 : t.data.byteOffset;
                a.byteLength = t.data.byteLength;
                var u = [o ? t.data : t.data.buffer];
                i.postMessage(a, u)
            } else {
                i.postMessage(a)
            }
        };
        var Wp = {
            FAILURE: 2,
            TIMEOUT: -101,
            ABORTED: -102
        };
        var Gp = function e(t) {
            t.forEach((function(e) {
                e.abort()
            }))
        };
        var Xp = function e(t) {
            return {
                bandwidth: t.bandwidth,
                bytesReceived: t.bytesReceived || 0,
                roundTripTime: t.roundTripTime || 0
            }
        };
        var zp = function e(t) {
            var i = t.target;
            var r = Date.now() - i.requestTime;
            var n = {
                bandwidth: Infinity,
                bytesReceived: 0,
                roundTripTime: r || 0
            };
            n.bytesReceived = t.loaded;
            n.bandwidth = Math.floor(n.bytesReceived / n.roundTripTime * 8 * 1e3);
            return n
        };
        var Kp = function e(t, i) {
            if (i.timedout) {
                return {
                    status: i.status,
                    message: "HLS request timed-out at URL: " + i.uri,
                    code: Wp.TIMEOUT,
                    xhr: i
                }
            }
            if (i.aborted) {
                return {
                    status: i.status,
                    message: "HLS request aborted at URL: " + i.uri,
                    code: Wp.ABORTED,
                    xhr: i
                }
            }
            if (t) {
                return {
                    status: i.status,
                    message: "HLS request errored at URL: " + i.uri,
                    code: Wp.FAILURE,
                    xhr: i
                }
            }
            if (i.responseType === "arraybuffer" && i.response.byteLength === 0) {
                return {
                    status: i.status,
                    message: "Empty HLS response at URL: " + i.uri,
                    code: Wp.FAILURE,
                    xhr: i
                }
            }
            return null
        };
        var Yp = function e(t, i, r) {
            return function(e, n) {
                var a = n.response;
                var s = Kp(e, n);
                if (s) {
                    return r(s, t)
                }
                if (a.byteLength !== 16) {
                    return r({
                        status: n.status,
                        message: "Invalid HLS key at URL: " + n.uri,
                        code: Wp.FAILURE,
                        xhr: n
                    }, t)
                }
                var o = new DataView(a);
                var u = new Uint32Array([o.getUint32(0), o.getUint32(4), o.getUint32(8), o.getUint32(12)]);
                for (var l = 0; l < i.length; l++) {
                    i[l].bytes = u
                }
                return r(null, t)
            }
        };
        var $p = function e(t, i) {
            var r = ms(t.map.bytes);
            if (r !== "mp4") {
                var n = t.map.resolvedUri || t.map.uri;
                return i({
                    internal: true,
                    message: "Found unsupported " + (r || "unknown") + " container for initialization segment at URL: " + n,
                    code: Wp.FAILURE
                })
            }
            Vp({
                action: "probeMp4Tracks",
                data: t.map.bytes,
                transmuxer: t.transmuxer,
                callback: function e(r) {
                    var n = r.tracks,
                        a = r.data;
                    t.map.bytes = a;
                    n.forEach((function(e) {
                        t.map.tracks = t.map.tracks || {};
                        if (t.map.tracks[e.type]) {
                            return
                        }
                        t.map.tracks[e.type] = e;
                        if (typeof e.id === "number" && e.timescale) {
                            t.map.timescales = t.map.timescales || {};
                            t.map.timescales[e.id] = e.timescale
                        }
                    }));
                    return i(null)
                }
            })
        };
        var Qp = function e(t) {
            var i = t.segment,
                r = t.finishProcessingFn;
            return function(e, t) {
                var n = Kp(e, t);
                if (n) {
                    return r(n, i)
                }
                var a = new Uint8Array(t.response);
                if (i.map.key) {
                    i.map.encryptedBytes = a;
                    return r(null, i)
                }
                i.map.bytes = a;
                $p(i, (function(e) {
                    if (e) {
                        e.xhr = t;
                        e.status = t.status;
                        return r(e, i)
                    }
                    r(null, i)
                }))
            }
        };
        var Jp = function e(t) {
            var i = t.segment,
                r = t.finishProcessingFn,
                n = t.responseType;
            return function(e, t) {
                var a = Kp(e, t);
                if (a) {
                    return r(a, i)
                }
                var s = n === "arraybuffer" || !t.responseText ? t.response : Ep(t.responseText.substring(i.lastReachedChar || 0));
                i.stats = Xp(t);
                if (i.key) {
                    i.encryptedBytes = new Uint8Array(s)
                } else {
                    i.bytes = new Uint8Array(s)
                }
                return r(null, i)
            }
        };
        var Zp = function e(t) {
            var i = t.segment,
                r = t.bytes,
                n = t.trackInfoFn,
                a = t.timingInfoFn,
                s = t.videoSegmentTimingInfoFn,
                o = t.audioSegmentTimingInfoFn,
                u = t.id3Fn,
                l = t.captionsFn,
                c = t.isEndOfTimeline,
                f = t.endedTimelineFn,
                d = t.dataFn,
                h = t.doneFn,
                p = t.onTransmuxerLog;
            var m = i.map && i.map.tracks || {};
            var v = Boolean(m.audio && m.video);
            var g = a.bind(null, i, "audio", "start");
            var y = a.bind(null, i, "audio", "end");
            var _ = a.bind(null, i, "video", "start");
            var b = a.bind(null, i, "video", "end");
            var T = function e() {
                return jp({
                    bytes: r,
                    transmuxer: i.transmuxer,
                    audioAppendStart: i.audioAppendStart,
                    gopsToAlignWith: i.gopsToAlignWith,
                    remux: v,
                    onData: function e(t) {
                        t.type = t.type === "combined" ? "video" : t.type;
                        d(i, t)
                    },
                    onTrackInfo: function e(t) {
                        if (n) {
                            if (v) {
                                t.isMuxed = true
                            }
                            n(i, t)
                        }
                    },
                    onAudioTimingInfo: function e(t) {
                        if (g && typeof t.start !== "undefined") {
                            g(t.start);
                            g = null
                        }
                        if (y && typeof t.end !== "undefined") {
                            y(t.end)
                        }
                    },
                    onVideoTimingInfo: function e(t) {
                        if (_ && typeof t.start !== "undefined") {
                            _(t.start);
                            _ = null
                        }
                        if (b && typeof t.end !== "undefined") {
                            b(t.end)
                        }
                    },
                    onVideoSegmentTimingInfo: function e(t) {
                        s(t)
                    },
                    onAudioSegmentTimingInfo: function e(t) {
                        o(t)
                    },
                    onId3: function e(t, r) {
                        u(i, t, r)
                    },
                    onCaptions: function e(t) {
                        l(i, [t])
                    },
                    isEndOfTimeline: c,
                    onEndedTimeline: function e() {
                        f()
                    },
                    onTransmuxerLog: p,
                    onDone: function e(t) {
                        if (!h) {
                            return
                        }
                        t.type = t.type === "combined" ? "video" : t.type;
                        h(null, i, t)
                    }
                })
            };
            Vp({
                action: "probeTs",
                transmuxer: i.transmuxer,
                data: r,
                baseStartTime: i.baseStartTime,
                callback: function e(t) {
                    i.bytes = r = t.data;
                    var a = t.result;
                    if (a) {
                        n(i, {
                            hasAudio: a.hasAudio,
                            hasVideo: a.hasVideo,
                            isMuxed: v
                        });
                        n = null;
                        if (a.hasAudio && !v) {
                            g(a.audioStart)
                        }
                        if (a.hasVideo) {
                            _(a.videoStart)
                        }
                        g = null;
                        _ = null
                    }
                    T()
                }
            })
        };
        var em = function e(t) {
            var i = t.segment,
                r = t.bytes,
                n = t.trackInfoFn,
                a = t.timingInfoFn,
                s = t.videoSegmentTimingInfoFn,
                o = t.audioSegmentTimingInfoFn,
                u = t.id3Fn,
                l = t.captionsFn,
                c = t.isEndOfTimeline,
                f = t.endedTimelineFn,
                d = t.dataFn,
                h = t.doneFn,
                p = t.onTransmuxerLog;
            var m = new Uint8Array(r);
            if (vs(m)) {
                i.isFmp4 = true;
                var v = i.map.tracks;
                var g = {
                    isFmp4: true,
                    hasVideo: !!v.video,
                    hasAudio: !!v.audio
                };
                if (v.audio && v.audio.codec && v.audio.codec !== "enca") {
                    g.audioCodec = v.audio.codec
                }
                if (v.video && v.video.codec && v.video.codec !== "encv") {
                    g.videoCodec = v.video.codec
                }
                if (v.video && v.audio) {
                    g.isMuxed = true
                }
                n(i, g);
                var y = function e(t) {
                    d(i, {
                        data: m,
                        type: g.hasAudio && !g.isMuxed ? "audio" : "video"
                    });
                    if (t && t.length) {
                        l(i, t)
                    }
                    h(null, i, {})
                };
                Vp({
                    action: "probeMp4StartTime",
                    timescales: i.map.timescales,
                    data: m,
                    transmuxer: i.transmuxer,
                    callback: function e(t) {
                        var n = t.data,
                            s = t.startTime;
                        r = n.buffer;
                        i.bytes = m = n;
                        if (g.hasAudio && !g.isMuxed) {
                            a(i, "audio", "start", s)
                        }
                        if (g.hasVideo) {
                            a(i, "video", "start", s)
                        }
                        if (!v.video || !n.byteLength || !i.transmuxer) {
                            y();
                            return
                        }
                        Vp({
                            action: "pushMp4Captions",
                            endAction: "mp4Captions",
                            transmuxer: i.transmuxer,
                            data: m,
                            timescales: i.map.timescales,
                            trackIds: [v.video.id],
                            callback: function e(t) {
                                r = t.data.buffer;
                                i.bytes = m = t.data;
                                t.logs.forEach((function(e) {
                                    p(xd.mergeOptions(e, {
                                        stream: "mp4CaptionParser"
                                    }))
                                }));
                                y(t.captions)
                            }
                        })
                    }
                });
                return
            }
            if (!i.transmuxer) {
                h(null, i, {});
                return
            }
            if (typeof i.container === "undefined") {
                i.container = ms(m)
            }
            if (i.container !== "ts" && i.container !== "aac") {
                n(i, {
                    hasAudio: false,
                    hasVideo: false
                });
                h(null, i, {});
                return
            }
            Zp({
                segment: i,
                bytes: r,
                trackInfoFn: n,
                timingInfoFn: a,
                videoSegmentTimingInfoFn: s,
                audioSegmentTimingInfoFn: o,
                id3Fn: u,
                captionsFn: l,
                isEndOfTimeline: c,
                endedTimelineFn: f,
                dataFn: d,
                doneFn: h,
                onTransmuxerLog: p
            })
        };
        var tm = function e(t, i) {
            var r = t.id,
                n = t.key,
                a = t.encryptedBytes,
                s = t.decryptionWorker;
            var o = function e(t) {
                if (t.data.source === r) {
                    s.removeEventListener("message", e);
                    var n = t.data.decrypted;
                    i(new Uint8Array(n.bytes, n.byteOffset, n.byteLength))
                }
            };
            s.addEventListener("message", o);
            var u;
            if (n.bytes.slice) {
                u = n.bytes.slice()
            } else {
                u = new Uint32Array(Array.prototype.slice.call(n.bytes))
            }
            s.postMessage(Yh({
                source: r,
                encrypted: a,
                key: u,
                iv: n.iv
            }), [a.buffer, u.buffer])
        };
        var im = function e(t) {
            var i = t.decryptionWorker,
                r = t.segment,
                n = t.trackInfoFn,
                a = t.timingInfoFn,
                s = t.videoSegmentTimingInfoFn,
                o = t.audioSegmentTimingInfoFn,
                u = t.id3Fn,
                l = t.captionsFn,
                c = t.isEndOfTimeline,
                f = t.endedTimelineFn,
                d = t.dataFn,
                h = t.doneFn,
                p = t.onTransmuxerLog;
            tm({
                id: r.requestId,
                key: r.key,
                encryptedBytes: r.encryptedBytes,
                decryptionWorker: i
            }, (function(e) {
                r.bytes = e;
                em({
                    segment: r,
                    bytes: r.bytes,
                    trackInfoFn: n,
                    timingInfoFn: a,
                    videoSegmentTimingInfoFn: s,
                    audioSegmentTimingInfoFn: o,
                    id3Fn: u,
                    captionsFn: l,
                    isEndOfTimeline: c,
                    endedTimelineFn: f,
                    dataFn: d,
                    doneFn: h,
                    onTransmuxerLog: p
                })
            }))
        };
        var rm = function e(t) {
            var i = t.activeXhrs,
                r = t.decryptionWorker,
                n = t.trackInfoFn,
                a = t.timingInfoFn,
                s = t.videoSegmentTimingInfoFn,
                o = t.audioSegmentTimingInfoFn,
                u = t.id3Fn,
                l = t.captionsFn,
                c = t.isEndOfTimeline,
                f = t.endedTimelineFn,
                d = t.dataFn,
                h = t.doneFn,
                p = t.onTransmuxerLog;
            var m = 0;
            var v = false;
            return function(e, t) {
                if (v) {
                    return
                }
                if (e) {
                    v = true;
                    Gp(i);
                    return h(e, t)
                }
                m += 1;
                if (m === i.length) {
                    var g = function e() {
                        if (t.encryptedBytes) {
                            return im({
                                decryptionWorker: r,
                                segment: t,
                                trackInfoFn: n,
                                timingInfoFn: a,
                                videoSegmentTimingInfoFn: s,
                                audioSegmentTimingInfoFn: o,
                                id3Fn: u,
                                captionsFn: l,
                                isEndOfTimeline: c,
                                endedTimelineFn: f,
                                dataFn: d,
                                doneFn: h,
                                onTransmuxerLog: p
                            })
                        }
                        em({
                            segment: t,
                            bytes: t.bytes,
                            trackInfoFn: n,
                            timingInfoFn: a,
                            videoSegmentTimingInfoFn: s,
                            audioSegmentTimingInfoFn: o,
                            id3Fn: u,
                            captionsFn: l,
                            isEndOfTimeline: c,
                            endedTimelineFn: f,
                            dataFn: d,
                            doneFn: h,
                            onTransmuxerLog: p
                        })
                    };
                    t.endOfAllRequests = Date.now();
                    if (t.map && t.map.encryptedBytes && !t.map.bytes) {
                        return tm({
                            decryptionWorker: r,
                            id: t.requestId + "-init",
                            encryptedBytes: t.map.encryptedBytes,
                            key: t.map.key
                        }, (function(e) {
                            t.map.bytes = e;
                            $p(t, (function(e) {
                                if (e) {
                                    Gp(i);
                                    return h(e, t)
                                }
                                g()
                            }))
                        }))
                    }
                    g()
                }
            }
        };
        var nm = function e(t) {
            var i = t.loadendState,
                r = t.abortFn;
            return function(e) {
                var t = e.target;
                if (t.aborted && r && !i.calledAbortFn) {
                    r();
                    i.calledAbortFn = true
                }
            }
        };
        var am = function e(t) {
            var i = t.segment,
                r = t.progressFn;
            t.trackInfoFn;
            t.timingInfoFn;
            t.videoSegmentTimingInfoFn;
            t.audioSegmentTimingInfoFn;
            t.id3Fn;
            t.captionsFn;
            t.isEndOfTimeline;
            t.endedTimelineFn;
            t.dataFn;
            return function(e) {
                var t = e.target;
                if (t.aborted) {
                    return
                }
                i.stats = xd.mergeOptions(i.stats, zp(e));
                if (!i.stats.firstBytesReceivedAt && i.stats.bytesReceived) {
                    i.stats.firstBytesReceivedAt = Date.now()
                }
                return r(e, i)
            }
        };
        var sm = function e(t) {
            var i = t.xhr,
                r = t.xhrOptions,
                n = t.decryptionWorker,
                a = t.segment,
                s = t.abortFn,
                o = t.progressFn,
                u = t.trackInfoFn,
                l = t.timingInfoFn,
                c = t.videoSegmentTimingInfoFn,
                f = t.audioSegmentTimingInfoFn,
                d = t.id3Fn,
                h = t.captionsFn,
                p = t.isEndOfTimeline,
                m = t.endedTimelineFn,
                v = t.dataFn,
                g = t.doneFn,
                y = t.onTransmuxerLog;
            var _ = [];
            var b = rm({
                activeXhrs: _,
                decryptionWorker: n,
                trackInfoFn: u,
                timingInfoFn: l,
                videoSegmentTimingInfoFn: c,
                audioSegmentTimingInfoFn: f,
                id3Fn: d,
                captionsFn: h,
                isEndOfTimeline: p,
                endedTimelineFn: m,
                dataFn: v,
                doneFn: g,
                onTransmuxerLog: y
            });
            if (a.key && !a.key.bytes) {
                var T = [a.key];
                if (a.map && !a.map.bytes && a.map.key && a.map.key.resolvedUri === a.key.resolvedUri) {
                    T.push(a.map.key)
                }
                var S = xd.mergeOptions(r, {
                    uri: a.key.resolvedUri,
                    responseType: "arraybuffer"
                });
                var E = Yp(a, T, b);
                var w = i(S, E);
                _.push(w)
            }
            if (a.map && !a.map.bytes) {
                var k = a.map.key && (!a.key || a.key.resolvedUri !== a.map.key.resolvedUri);
                if (k) {
                    var C = xd.mergeOptions(r, {
                        uri: a.map.key.resolvedUri,
                        responseType: "arraybuffer"
                    });
                    var I = Yp(a, [a.map.key], b);
                    var A = i(C, I);
                    _.push(A)
                }
                var x = xd.mergeOptions(r, {
                    uri: a.map.resolvedUri,
                    responseType: "arraybuffer",
                    headers: Gh(a.map)
                });
                var P = Qp({
                    segment: a,
                    finishProcessingFn: b
                });
                var O = i(x, P);
                _.push(O)
            }
            var D = xd.mergeOptions(r, {
                uri: a.part && a.part.resolvedUri || a.resolvedUri,
                responseType: "arraybuffer",
                headers: Gh(a)
            });
            var L = Jp({
                segment: a,
                finishProcessingFn: b,
                responseType: D.responseType
            });
            var N = i(D, L);
            N.addEventListener("progress", am({
                segment: a,
                progressFn: o,
                trackInfoFn: u,
                timingInfoFn: l,
                videoSegmentTimingInfoFn: c,
                audioSegmentTimingInfoFn: f,
                id3Fn: d,
                captionsFn: h,
                isEndOfTimeline: p,
                endedTimelineFn: m,
                dataFn: v
            }));
            _.push(N);
            var R = {};
            _.forEach((function(e) {
                e.addEventListener("loadend", nm({
                    loadendState: R,
                    abortFn: s
                }))
            }));
            return function() {
                return Gp(_)
            }
        };
        var om = Nd("CodecUtils");
        var um = function e(t) {
            var i = t.attributes || {};
            if (i.CODECS) {
                return Ct(i.CODECS)
            }
        };
        var lm = function e(t, i) {
            var r = i.attributes || {};
            return t && t.mediaGroups && t.mediaGroups.AUDIO && r.AUDIO && t.mediaGroups.AUDIO[r.AUDIO]
        };
        var cm = function e(t, i) {
            if (!lm(t, i)) {
                return true
            }
            var r = i.attributes || {};
            var n = t.mediaGroups.AUDIO[r.AUDIO];
            for (var a in n) {
                if (!n[a].uri && !n[a].playlists) {
                    return true
                }
            }
            return false
        };
        var fm = function e(t) {
            var i = {};
            t.forEach((function(e) {
                var t = e.mediaType,
                    r = e.type,
                    n = e.details;
                i[t] = i[t] || [];
                i[t].push(kt("" + r + n))
            }));
            Object.keys(i).forEach((function(e) {
                if (i[e].length > 1) {
                    om("multiple " + e + " codecs found as attributes: " + i[e].join(", ") + ". Setting playlist codecs to null so that we wait for mux.js to probe segments for real codecs.");
                    i[e] = null;
                    return
                }
                i[e] = i[e][0]
            }));
            return i
        };
        var dm = function e(t) {
            var i = 0;
            if (t.audio) {
                i++
            }
            if (t.video) {
                i++
            }
            return i
        };
        var hm = function e(t, i) {
            var r = i.attributes || {};
            var n = fm(um(i) || []);
            if (lm(t, i) && !n.audio) {
                if (!cm(t, i)) {
                    var a = fm(It(t, r.AUDIO) || []);
                    if (a.audio) {
                        n.audio = a.audio
                    }
                }
            }
            return n
        };
        var pm = Nd("PlaylistSelector");
        var mm = function e(t) {
            if (!t || !t.playlist) {
                return
            }
            var i = t.playlist;
            return JSON.stringify({
                id: i.id,
                bandwidth: t.bandwidth,
                width: t.width,
                height: t.height,
                codecs: i.attributes && i.attributes.CODECS || ""
            })
        };
        var vm = function e(t, i) {
            if (!t) {
                return ""
            }
            var r = s.getComputedStyle(t);
            if (!r) {
                return ""
            }
            return r[i]
        };
        var gm = function e(t, i) {
            var r = t.slice();
            t.sort((function(e, t) {
                var n = i(e, t);
                if (n === 0) {
                    return r.indexOf(e) - r.indexOf(t)
                }
                return n
            }))
        };
        var ym = function e(t, i) {
            var r;
            var n;
            if (t.attributes.BANDWIDTH) {
                r = t.attributes.BANDWIDTH
            }
            r = r || s.Number.MAX_VALUE;
            if (i.attributes.BANDWIDTH) {
                n = i.attributes.BANDWIDTH
            }
            n = n || s.Number.MAX_VALUE;
            return r - n
        };
        var _m = function e(t, i) {
            var r;
            var n;
            if (t.attributes.RESOLUTION && t.attributes.RESOLUTION.width) {
                r = t.attributes.RESOLUTION.width
            }
            r = r || s.Number.MAX_VALUE;
            if (i.attributes.RESOLUTION && i.attributes.RESOLUTION.width) {
                n = i.attributes.RESOLUTION.width
            }
            n = n || s.Number.MAX_VALUE;
            if (r === n && t.attributes.BANDWIDTH && i.attributes.BANDWIDTH) {
                return t.attributes.BANDWIDTH - i.attributes.BANDWIDTH
            }
            return r - n
        };
        var bm = function e(t, i, r, n, a, o) {
            if (!t) {
                return
            }
            var u = {
                bandwidth: i,
                width: r,
                height: n,
                limitRenditionByPlayerDimensions: a
            };
            var l = t.playlists;
            if (_h.isAudioOnly(t)) {
                l = o.getAudioTrackPlaylists_();
                u.audioOnly = true
            }
            var c = l.map((function(e) {
                var t;
                var i = e.attributes && e.attributes.RESOLUTION && e.attributes.RESOLUTION.width;
                var r = e.attributes && e.attributes.RESOLUTION && e.attributes.RESOLUTION.height;
                t = e.attributes && e.attributes.BANDWIDTH;
                t = t || s.Number.MAX_VALUE;
                return {
                    bandwidth: t,
                    width: i,
                    height: r,
                    playlist: e
                }
            }));
            gm(c, (function(e, t) {
                return e.bandwidth - t.bandwidth
            }));
            c = c.filter((function(e) {
                return !_h.isIncompatible(e.playlist)
            }));
            var f = c.filter((function(e) {
                return _h.isEnabled(e.playlist)
            }));
            if (!f.length) {
                f = c.filter((function(e) {
                    return !_h.isDisabled(e.playlist)
                }))
            }
            var d = f.filter((function(e) {
                return e.bandwidth * Sp.BANDWIDTH_VARIANCE < i
            }));
            var h = d[d.length - 1];
            var p = d.filter((function(e) {
                return e.bandwidth === h.bandwidth
            }))[0];
            if (a === false) {
                var m = p || f[0] || c[0];
                if (m && m.playlist) {
                    var v = "sortedPlaylistReps";
                    if (p) {
                        v = "bandwidthBestRep"
                    }
                    if (f[0]) {
                        v = "enabledPlaylistReps"
                    }
                    pm("choosing " + mm(m) + " using " + v + " with options", u);
                    return m.playlist
                }
                pm("could not choose a playlist with options", u);
                return null
            }
            var g = d.filter((function(e) {
                return e.width && e.height
            }));
            gm(g, (function(e, t) {
                return e.width - t.width
            }));
            var y = g.filter((function(e) {
                return e.width === r && e.height === n
            }));
            h = y[y.length - 1];
            var _ = y.filter((function(e) {
                return e.bandwidth === h.bandwidth
            }))[0];
            var b;
            var T;
            var S;
            if (!_) {
                b = g.filter((function(e) {
                    return e.width > r || e.height > n
                }));
                T = b.filter((function(e) {
                    return e.width === b[0].width && e.height === b[0].height
                }));
                h = T[T.length - 1];
                S = T.filter((function(e) {
                    return e.bandwidth === h.bandwidth
                }))[0]
            }
            var E;
            if (o.experimentalLeastPixelDiffSelector) {
                var w = g.map((function(e) {
                    e.pixelDiff = Math.abs(e.width - r) + Math.abs(e.height - n);
                    return e
                }));
                gm(w, (function(e, t) {
                    if (e.pixelDiff === t.pixelDiff) {
                        return t.bandwidth - e.bandwidth
                    }
                    return e.pixelDiff - t.pixelDiff
                }));
                E = w[0]
            }
            var k = E || S || _ || p || f[0] || c[0];
            if (k && k.playlist) {
                var C = "sortedPlaylistReps";
                if (E) {
                    C = "leastPixelDiffRep"
                } else if (S) {
                    C = "resolutionPlusOneRep"
                } else if (_) {
                    C = "resolutionBestRep"
                } else if (p) {
                    C = "bandwidthBestRep"
                } else if (f[0]) {
                    C = "enabledPlaylistReps"
                }
                pm("choosing " + mm(k) + " using " + C + " with options", u);
                return k.playlist
            }
            pm("could not choose a playlist with options", u);
            return null
        };
        var Tm = function e() {
            var t = this.useDevicePixelRatio ? s.devicePixelRatio || 1 : 1;
            return bm(this.playlists.master, this.systemBandwidth, parseInt(vm(this.tech_.el(), "width"), 10) * t, parseInt(vm(this.tech_.el(), "height"), 10) * t, this.limitRenditionByPlayerDimensions, this.masterPlaylistController_)
        };
        var Sm = function e(t) {
            var i = -1;
            var r = -1;
            if (t < 0 || t > 1) {
                throw new Error("Moving average bandwidth decay must be between 0 and 1.")
            }
            return function() {
                var e = this.useDevicePixelRatio ? s.devicePixelRatio || 1 : 1;
                if (i < 0) {
                    i = this.systemBandwidth;
                    r = this.systemBandwidth
                }
                if (this.systemBandwidth > 0 && this.systemBandwidth !== r) {
                    i = t * this.systemBandwidth + (1 - t) * i;
                    r = this.systemBandwidth
                }
                return bm(this.playlists.master, i, parseInt(vm(this.tech_.el(), "width"), 10) * e, parseInt(vm(this.tech_.el(), "height"), 10) * e, this.limitRenditionByPlayerDimensions, this.masterPlaylistController_)
            }
        };
        var Em = function e(t) {
            var i = t.master,
                r = t.currentTime,
                n = t.bandwidth,
                a = t.duration,
                s = t.segmentDuration,
                o = t.timeUntilRebuffer,
                u = t.currentTimeline,
                l = t.syncController;
            var c = i.playlists.filter((function(e) {
                return !_h.isIncompatible(e)
            }));
            var f = c.filter(_h.isEnabled);
            if (!f.length) {
                f = c.filter((function(e) {
                    return !_h.isDisabled(e)
                }))
            }
            var d = f.filter(_h.hasAttribute.bind(null, "BANDWIDTH"));
            var h = d.map((function(e) {
                var t = l.getSyncPoint(e, a, u, r);
                var i = t ? 1 : 2;
                var c = _h.estimateSegmentRequestTime(s, n, e);
                var f = c * i - o;
                return {
                    playlist: e,
                    rebufferingImpact: f
                }
            }));
            var p = h.filter((function(e) {
                return e.rebufferingImpact <= 0
            }));
            gm(p, (function(e, t) {
                return ym(t.playlist, e.playlist)
            }));
            if (p.length) {
                return p[0]
            }
            gm(h, (function(e, t) {
                return e.rebufferingImpact - t.rebufferingImpact
            }));
            return h[0] || null
        };
        var wm = function e() {
            var t = this;
            var i = this.playlists.master.playlists.filter(_h.isEnabled);
            gm(i, (function(e, t) {
                return ym(e, t)
            }));
            var r = i.filter((function(e) {
                return !!hm(t.playlists.master, e).video
            }));
            return r[0] || null
        };
        var km = function e(t) {
            var i = 0;
            var r;
            if (t.bytes) {
                r = new Uint8Array(t.bytes);
                t.segments.forEach((function(e) {
                    r.set(e, i);
                    i += e.byteLength
                }))
            }
            return r
        };
        var Cm = function e(t, i, r) {
            if (!t[r]) {
                i.trigger({
                    type: "usage",
                    name: "vhs-608"
                });
                i.trigger({
                    type: "usage",
                    name: "hls-608"
                });
                var n = r;
                if (/^cc708_/.test(r)) {
                    n = "SERVICE" + r.split("_")[1]
                }
                var a = i.textTracks().getTrackById(n);
                if (a) {
                    t[r] = a
                } else {
                    var s = i.options_.vhs && i.options_.vhs.captionServices || {};
                    var o = r;
                    var u = r;
                    var l = false;
                    var c = s[n];
                    if (c) {
                        o = c.label;
                        u = c.language;
                        l = c["default"]
                    }
                    t[r] = i.addRemoteTextTrack({
                        kind: "captions",
                        id: n,
                        default: l,
                        label: o,
                        language: u
                    }, false).track
                }
            }
        };
        var Im = function e(t) {
            var i = t.inbandTextTracks,
                r = t.captionArray,
                n = t.timestampOffset;
            if (!r) {
                return
            }
            var a = s.WebKitDataCue || s.VTTCue;
            r.forEach((function(e) {
                var t = e.stream;
                i[t].addCue(new a(e.startTime + n, e.endTime + n, e.text))
            }))
        };
        var Am = function e(t) {
            Object.defineProperties(t.frame, {
                id: {
                    get: function e() {
                        xd.log.warn("cue.frame.id is deprecated. Use cue.value.key instead.");
                        return t.value.key
                    }
                },
                value: {
                    get: function e() {
                        xd.log.warn("cue.frame.value is deprecated. Use cue.value.data instead.");
                        return t.value.data
                    }
                },
                privateData: {
                    get: function e() {
                        xd.log.warn("cue.frame.privateData is deprecated. Use cue.value.data instead.");
                        return t.value.data
                    }
                }
            })
        };
        var xm = function e(t) {
            var i = t.inbandTextTracks,
                r = t.metadataArray,
                n = t.timestampOffset,
                a = t.videoDuration;
            if (!r) {
                return
            }
            var o = s.WebKitDataCue || s.VTTCue;
            var u = i.metadataTrack_;
            if (!u) {
                return
            }
            r.forEach((function(e) {
                var t = e.cueTime + n;
                if (typeof t !== "number" || s.isNaN(t) || t < 0 || !(t < Infinity)) {
                    return
                }
                e.frames.forEach((function(e) {
                    var i = new o(t, t, e.value || e.url || e.data || "");
                    i.frame = e;
                    i.value = e;
                    Am(i);
                    u.addCue(i)
                }))
            }));
            if (!u.cues || !u.cues.length) {
                return
            }
            var l = u.cues;
            var c = [];
            for (var f = 0; f < l.length; f++) {
                if (l[f]) {
                    c.push(l[f])
                }
            }
            var d = c.reduce((function(e, t) {
                var i = e[t.startTime] || [];
                i.push(t);
                e[t.startTime] = i;
                return e
            }), {});
            var h = Object.keys(d).sort((function(e, t) {
                return Number(e) - Number(t)
            }));
            h.forEach((function(e, t) {
                var i = d[e];
                var r = Number(h[t + 1]) || a;
                i.forEach((function(e) {
                    e.endTime = r
                }))
            }))
        };
        var Pm = function e(t, i, r) {
            if (t.metadataTrack_) {
                return
            }
            t.metadataTrack_ = r.addRemoteTextTrack({
                kind: "metadata",
                label: "Timed Metadata"
            }, false).track;
            t.metadataTrack_.inBandMetadataTrackDispatchType = i
        };
        var Om = function e(t, i, r) {
            var n;
            var a;
            if (!r) {
                return
            }
            if (!r.cues) {
                return
            }
            n = r.cues.length;
            while (n--) {
                a = r.cues[n];
                if (a.startTime >= t && a.endTime <= i) {
                    r.removeCue(a)
                }
            }
        };
        var Dm = function e(t) {
            var i = t.cues;
            if (!i) {
                return
            }
            for (var r = 0; r < i.length; r++) {
                var n = [];
                var a = 0;
                for (var s = 0; s < i.length; s++) {
                    if (i[r].startTime === i[s].startTime && i[r].endTime === i[s].endTime && i[r].text === i[s].text) {
                        a++;
                        if (a > 1) {
                            n.push(i[s])
                        }
                    }
                }
                if (n.length) {
                    n.forEach((function(e) {
                        return t.removeCue(e)
                    }))
                }
            }
        };
        var Lm = function e(t, i, r) {
            if (typeof i === "undefined" || i === null || !t.length) {
                return []
            }
            var n = Math.ceil((i - r + 3) * Cs);
            var a;
            for (a = 0; a < t.length; a++) {
                if (t[a].pts > n) {
                    break
                }
            }
            return t.slice(a)
        };
        var Nm = function e(t, i, r) {
            if (!i.length) {
                return t
            }
            if (r) {
                return i.slice()
            }
            var n = i[0].pts;
            var a = 0;
            for (a; a < t.length; a++) {
                if (t[a].pts >= n) {
                    break
                }
            }
            return t.slice(0, a).concat(i)
        };
        var Rm = function e(t, i, r, n) {
            var a = Math.ceil((i - n) * Cs);
            var s = Math.ceil((r - n) * Cs);
            var o = t.slice();
            var u = t.length;
            while (u--) {
                if (t[u].pts <= s) {
                    break
                }
            }
            if (u === -1) {
                return o
            }
            var l = u + 1;
            while (l--) {
                if (t[l].pts <= a) {
                    break
                }
            }
            l = Math.max(l, 0);
            o.splice(l, u - l + 1);
            return o
        };
        var Mm = function e(t, i) {
            if (!t && !i || !t && i || t && !i) {
                return false
            }
            if (t === i) {
                return true
            }
            var r = Object.keys(t).sort();
            var n = Object.keys(i).sort();
            if (r.length !== n.length) {
                return false
            }
            for (var a = 0; a < r.length; a++) {
                var s = r[a];
                if (s !== n[a]) {
                    return false
                }
                if (t[s] !== i[s]) {
                    return false
                }
            }
            return true
        };
        var Um = 22;
        var Bm = function e(t, i, r) {
            i = i || [];
            var n = [];
            var a = 0;
            for (var s = 0; s < i.length; s++) {
                var o = i[s];
                if (t === o.timeline) {
                    n.push(s);
                    a += o.duration;
                    if (a > r) {
                        return s
                    }
                }
            }
            if (n.length === 0) {
                return 0
            }
            return n[n.length - 1]
        };
        var Fm = 1;
        var jm = 500;
        var Hm = function e(t) {
            return typeof t === "number" && isFinite(t)
        };
        var qm = 1 / 60;
        var Vm = function e(t, i, r) {
            if (t !== "main" || !i || !r) {
                return null
            }
            if (!r.hasAudio && !r.hasVideo) {
                return "Neither audio nor video found in segment."
            }
            if (i.hasVideo && !r.hasVideo) {
                return "Only audio found in segment when we expected video." + " We can't switch to audio only from a stream that had video." + " To get rid of this message, please add codec information to the manifest."
            }
            if (!i.hasVideo && r.hasVideo) {
                return "Video found in segment when we expected only audio." + " We can't switch to a stream with video from an audio only stream." + " To get rid of this message, please add codec information to the manifest."
            }
            return null
        };
        var Wm = function e(t, i, r) {
            var n = i - Sp.BACK_BUFFER_LENGTH;
            if (t.length) {
                n = Math.max(n, t.start(0))
            }
            var a = i - r;
            return Math.min(a, n)
        };
        var Gm = function e(t) {
            var i = t.startOfSegment,
                r = t.duration,
                n = t.segment,
                a = t.part,
                s = t.playlist,
                o = s.mediaSequence,
                u = s.id,
                l = s.segments,
                c = l === void 0 ? [] : l,
                f = t.mediaIndex,
                d = t.partIndex,
                h = t.timeline;
            var p = c.length - 1;
            var m = "mediaIndex/partIndex increment";
            if (t.getMediaInfoForTime) {
                m = "getMediaInfoForTime (" + t.getMediaInfoForTime + ")"
            } else if (t.isSyncRequest) {
                m = "getSyncSegmentCandidate (isSyncRequest)"
            }
            if (t.independent) {
                m += " with independent " + t.independent
            }
            var v = typeof d === "number";
            var g = t.segment.uri ? "segment" : "pre-segment";
            var y = v ? Jd({
                preloadSegment: n
            }) - 1 : 0;
            return g + " [" + (o + f) + "/" + (o + p) + "]" + (v ? " part [" + d + "/" + y + "]" : "") + (" segment start/end [" + n.start + " => " + n.end + "]") + (v ? " part start/end [" + a.start + " => " + a.end + "]" : "") + (" startOfSegment [" + i + "]") + (" duration [" + r + "]") + (" timeline [" + h + "]") + (" selected by [" + m + "]") + (" playlist [" + u + "]")
        };
        var Xm = function e(t) {
            return t + "TimingInfo"
        };
        var zm = function e(t) {
            var i = t.segmentTimeline,
                r = t.currentTimeline,
                n = t.startOfSegment,
                a = t.buffered,
                s = t.overrideCheck;
            if (!s && i === r) {
                return null
            }
            if (i < r) {
                return n
            }
            return a.length ? a.end(a.length - 1) : n
        };
        var Km = function e(t) {
            var i = t.timelineChangeController,
                r = t.currentTimeline,
                n = t.segmentTimeline,
                a = t.loaderType,
                s = t.audioDisabled;
            if (r === n) {
                return false
            }
            if (a === "audio") {
                var o = i.lastTimelineChange({
                    type: "main"
                });
                return !o || o.to !== n
            }
            if (a === "main" && s) {
                var u = i.pendingTimelineChange({
                    type: "audio"
                });
                if (u && u.to === n) {
                    return false
                }
                return true
            }
            return false
        };
        var Ym = function e(t) {
            var i = 0;
            ["video", "audio"].forEach((function(e) {
                var r = t[e + "TimingInfo"];
                if (!r) {
                    return
                }
                var n = r.start,
                    a = r.end;
                var o;
                if (typeof n === "bigint" || typeof a === "bigint") {
                    o = s.BigInt(a) - s.BigInt(n)
                } else if (typeof n === "number" && typeof a === "number") {
                    o = a - n
                }
                if (typeof o !== "undefined" && o > i) {
                    i = o
                }
            }));
            if (typeof i === "bigint" && i < Number.MAX_SAFE_INTEGER) {
                i = Number(i)
            }
            return i
        };
        var $m = function e(t) {
            var i = t.segmentDuration,
                r = t.maxDuration;
            if (!i) {
                return false
            }
            return Math.round(i) > r + Rd
        };
        var Qm = function e(t, i) {
            if (i !== "hls") {
                return null
            }
            var r = Ym({
                audioTimingInfo: t.audioTimingInfo,
                videoTimingInfo: t.videoTimingInfo
            });
            if (!r) {
                return null
            }
            var n = t.playlist.targetDuration;
            var a = $m({
                segmentDuration: r,
                maxDuration: n * 2
            });
            var s = $m({
                segmentDuration: r,
                maxDuration: n
            });
            var o = "Segment with index " + t.mediaIndex + " " + ("from playlist " + t.playlist.id + " ") + ("has a duration of " + r + " ") + ("when the reported duration is " + t.duration + " ") + ("and the target duration is " + n + ". ") + "For HLS content, a duration in excess of the target duration may result in " + "playback issues. See the HLS specification section on EXT-X-TARGETDURATION for " + "more details: " + "https://tools.ietf.org/html/draft-pantos-http-live-streaming-23#section-4.3.3.1";
            if (a || s) {
                return {
                    severity: a ? "warn" : "info",
                    message: o
                }
            }
            return null
        };
        var Jm = function(e) {
            J(t, e);

            function t(t, i) {
                var r;
                r = e.call(this) || this;
                if (!t) {
                    throw new TypeError("Initialization settings are required")
                }
                if (typeof t.currentTime !== "function") {
                    throw new TypeError("No currentTime getter specified")
                }
                if (!t.mediaSource) {
                    throw new TypeError("No MediaSource specified")
                }
                r.bandwidth = t.bandwidth;
                r.throughput = {
                    rate: 0,
                    count: 0
                };
                r.roundTrip = NaN;
                r.resetStats_();
                r.mediaIndex = null;
                r.partIndex = null;
                r.hasPlayed_ = t.hasPlayed;
                r.currentTime_ = t.currentTime;
                r.seekable_ = t.seekable;
                r.seeking_ = t.seeking;
                r.duration_ = t.duration;
                r.mediaSource_ = t.mediaSource;
                r.vhs_ = t.vhs;
                r.loaderType_ = t.loaderType;
                r.currentMediaInfo_ = void 0;
                r.startingMediaInfo_ = void 0;
                r.segmentMetadataTrack_ = t.segmentMetadataTrack;
                r.goalBufferLength_ = t.goalBufferLength;
                r.sourceType_ = t.sourceType;
                r.sourceUpdater_ = t.sourceUpdater;
                r.inbandTextTracks_ = t.inbandTextTracks;
                r.state_ = "INIT";
                r.timelineChangeController_ = t.timelineChangeController;
                r.shouldSaveSegmentTimingInfo_ = true;
                r.parse708captions_ = t.parse708captions;
                r.useDtsForTimestampOffset_ = t.useDtsForTimestampOffset;
                r.captionServices_ = t.captionServices;
                r.experimentalExactManifestTimings = t.experimentalExactManifestTimings;
                r.checkBufferTimeout_ = null;
                r.error_ = void 0;
                r.currentTimeline_ = -1;
                r.pendingSegment_ = null;
                r.xhrOptions_ = null;
                r.pendingSegments_ = [];
                r.audioDisabled_ = false;
                r.isPendingTimestampOffset_ = false;
                r.gopBuffer_ = [];
                r.timeMapping_ = 0;
                r.safeAppend_ = xd.browser.IE_VERSION >= 11;
                r.appendInitSegment_ = {
                    audio: true,
                    video: true
                };
                r.playlistOfLastInitSegment_ = {
                    audio: null,
                    video: null
                };
                r.callQueue_ = [];
                r.loadQueue_ = [];
                r.metadataQueue_ = {
                    id3: [],
                    caption: []
                };
                r.waitingOnRemove_ = false;
                r.quotaExceededErrorRetryTimeout_ = null;
                r.activeInitSegmentId_ = null;
                r.initSegments_ = {};
                r.cacheEncryptionKeys_ = t.cacheEncryptionKeys;
                r.keyCache_ = {};
                r.decrypter_ = t.decrypter;
                r.syncController_ = t.syncController;
                r.syncPoint_ = {
                    segmentIndex: 0,
                    time: 0
                };
                r.transmuxer_ = r.createTransmuxer_();
                r.triggerSyncInfoUpdate_ = function() {
                    return r.trigger("syncinfoupdate")
                };
                r.syncController_.on("syncinfoupdate", r.triggerSyncInfoUpdate_);
                r.mediaSource_.addEventListener("sourceopen", (function() {
                    if (!r.isEndOfStream_()) {
                        r.ended_ = false
                    }
                }));
                r.fetchAtBuffer_ = false;
                r.logger_ = Nd("SegmentLoader[" + r.loaderType_ + "]");
                Object.defineProperty(Y(r), "state", {
                    get: function e() {
                        return this.state_
                    },
                    set: function e(t) {
                        if (t !== this.state_) {
                            this.logger_(this.state_ + " -> " + t);
                            this.state_ = t;
                            this.trigger("statechange")
                        }
                    }
                });
                r.sourceUpdater_.on("ready", (function() {
                    if (r.hasEnoughInfoToAppend_()) {
                        r.processCallQueue_()
                    }
                }));
                if (r.loaderType_ === "main") {
                    r.timelineChangeController_.on("pendingtimelinechange", (function() {
                        if (r.hasEnoughInfoToAppend_()) {
                            r.processCallQueue_()
                        }
                    }))
                }
                if (r.loaderType_ === "audio") {
                    r.timelineChangeController_.on("timelinechange", (function() {
                        if (r.hasEnoughInfoToLoad_()) {
                            r.processLoadQueue_()
                        }
                        if (r.hasEnoughInfoToAppend_()) {
                            r.processCallQueue_()
                        }
                    }))
                }
                return r
            }
            var i = t.prototype;
            i.createTransmuxer_ = function e() {
                return qp.createTransmuxer({
                    remux: false,
                    alignGopsAtEnd: this.safeAppend_,
                    keepOriginalTimestamps: true,
                    parse708captions: this.parse708captions_,
                    captionServices: this.captionServices_
                })
            };
            i.resetStats_ = function e() {
                this.mediaBytesTransferred = 0;
                this.mediaRequests = 0;
                this.mediaRequestsAborted = 0;
                this.mediaRequestsTimedout = 0;
                this.mediaRequestsErrored = 0;
                this.mediaTransferDuration = 0;
                this.mediaSecondsLoaded = 0;
                this.mediaAppends = 0
            };
            i.dispose = function e() {
                this.trigger("dispose");
                this.state = "DISPOSED";
                this.pause();
                this.abort_();
                if (this.transmuxer_) {
                    this.transmuxer_.terminate()
                }
                this.resetStats_();
                if (this.checkBufferTimeout_) {
                    s.clearTimeout(this.checkBufferTimeout_)
                }
                if (this.syncController_ && this.triggerSyncInfoUpdate_) {
                    this.syncController_.off("syncinfoupdate", this.triggerSyncInfoUpdate_)
                }
                this.off()
            };
            i.setAudio = function e(t) {
                this.audioDisabled_ = !t;
                if (t) {
                    this.appendInitSegment_.audio = true
                } else {
                    this.sourceUpdater_.removeAudio(0, this.duration_())
                }
            };
            i.abort = function e() {
                if (this.state !== "WAITING") {
                    if (this.pendingSegment_) {
                        this.pendingSegment_ = null
                    }
                    return
                }
                this.abort_();
                this.state = "READY";
                if (!this.paused()) {
                    this.monitorBuffer_()
                }
            };
            i.abort_ = function e() {
                if (this.pendingSegment_ && this.pendingSegment_.abortRequests) {
                    this.pendingSegment_.abortRequests()
                }
                this.pendingSegment_ = null;
                this.callQueue_ = [];
                this.loadQueue_ = [];
                this.metadataQueue_.id3 = [];
                this.metadataQueue_.caption = [];
                this.timelineChangeController_.clearPendingTimelineChange(this.loaderType_);
                this.waitingOnRemove_ = false;
                s.clearTimeout(this.quotaExceededErrorRetryTimeout_);
                this.quotaExceededErrorRetryTimeout_ = null
            };
            i.checkForAbort_ = function e(t) {
                if (this.state === "APPENDING" && !this.pendingSegment_) {
                    this.state = "READY";
                    return true
                }
                if (!this.pendingSegment_ || this.pendingSegment_.requestId !== t) {
                    return true
                }
                return false
            };
            i.error = function e(t) {
                if (typeof t !== "undefined") {
                    this.logger_("error occurred:", t);
                    this.error_ = t
                }
                this.pendingSegment_ = null;
                return this.error_
            };
            i.endOfStream = function e() {
                this.ended_ = true;
                if (this.transmuxer_) {
                    qp.reset(this.transmuxer_)
                }
                this.gopBuffer_.length = 0;
                this.pause();
                this.trigger("ended")
            };
            i.buffered_ = function e() {
                var t = this.getMediaInfo_();
                if (!this.sourceUpdater_ || !t) {
                    return xd.createTimeRanges()
                }
                if (this.loaderType_ === "main") {
                    var i = t.hasAudio,
                        r = t.hasVideo,
                        n = t.isMuxed;
                    if (r && i && !this.audioDisabled_ && !n) {
                        return this.sourceUpdater_.buffered()
                    }
                    if (r) {
                        return this.sourceUpdater_.videoBuffered()
                    }
                }
                return this.sourceUpdater_.audioBuffered()
            };
            i.initSegmentForMap = function e(t, i) {
                if (i === void 0) {
                    i = false
                }
                if (!t) {
                    return null
                }
                var r = $h(t);
                var n = this.initSegments_[r];
                if (i && !n && t.bytes) {
                    this.initSegments_[r] = n = {
                        resolvedUri: t.resolvedUri,
                        byterange: t.byterange,
                        bytes: t.bytes,
                        tracks: t.tracks,
                        timescales: t.timescales
                    }
                }
                return n || t
            };
            i.segmentKey = function e(t, i) {
                if (i === void 0) {
                    i = false
                }
                if (!t) {
                    return null
                }
                var r = Qh(t);
                var n = this.keyCache_[r];
                if (this.cacheEncryptionKeys_ && i && !n && t.bytes) {
                    this.keyCache_[r] = n = {
                        resolvedUri: t.resolvedUri,
                        bytes: t.bytes
                    }
                }
                var a = {
                    resolvedUri: (n || t).resolvedUri
                };
                if (n) {
                    a.bytes = n.bytes
                }
                return a
            };
            i.couldBeginLoading_ = function e() {
                return this.playlist_ && !this.paused()
            };
            i.load = function e() {
                this.monitorBuffer_();
                if (!this.playlist_) {
                    return
                }
                if (this.state === "INIT" && this.couldBeginLoading_()) {
                    return this.init_()
                }
                if (!this.couldBeginLoading_() || this.state !== "READY" && this.state !== "INIT") {
                    return
                }
                this.state = "READY"
            };
            i.init_ = function e() {
                this.state = "READY";
                this.resetEverything();
                return this.monitorBuffer_()
            };
            i.playlist = function e(t, i) {
                if (i === void 0) {
                    i = {}
                }
                if (!t) {
                    return
                }
                var r = this.playlist_;
                var n = this.pendingSegment_;
                this.playlist_ = t;
                this.xhrOptions_ = i;
                if (this.state === "INIT") {
                    t.syncInfo = {
                        mediaSequence: t.mediaSequence,
                        time: 0
                    };
                    if (this.loaderType_ === "main") {
                        this.syncController_.setDateTimeMappingForStart(t)
                    }
                }
                var a = null;
                if (r) {
                    if (r.id) {
                        a = r.id
                    } else if (r.uri) {
                        a = r.uri
                    }
                }
                this.logger_("playlist update [" + a + " => " + (t.id || t.uri) + "]");
                this.trigger("syncinfoupdate");
                if (this.state === "INIT" && this.couldBeginLoading_()) {
                    return this.init_()
                }
                if (!r || r.uri !== t.uri) {
                    if (this.mediaIndex !== null) {
                        if (!t.endList) {
                            this.resetLoader()
                        } else {
                            this.resyncLoader()
                        }
                    }
                    this.currentMediaInfo_ = void 0;
                    this.trigger("playlistupdate");
                    return
                }
                var s = t.mediaSequence - r.mediaSequence;
                this.logger_("live window shift [" + s + "]");
                if (this.mediaIndex !== null) {
                    this.mediaIndex -= s;
                    if (this.mediaIndex < 0) {
                        this.mediaIndex = null;
                        this.partIndex = null
                    } else {
                        var o = this.playlist_.segments[this.mediaIndex];
                        if (this.partIndex && (!o.parts || !o.parts.length || !o.parts[this.partIndex])) {
                            var u = this.mediaIndex;
                            this.logger_("currently processing part (index " + this.partIndex + ") no longer exists.");
                            this.resetLoader();
                            this.mediaIndex = u
                        }
                    }
                }
                if (n) {
                    n.mediaIndex -= s;
                    if (n.mediaIndex < 0) {
                        n.mediaIndex = null;
                        n.partIndex = null
                    } else {
                        if (n.mediaIndex >= 0) {
                            n.segment = t.segments[n.mediaIndex]
                        }
                        if (n.partIndex >= 0 && n.segment.parts) {
                            n.part = n.segment.parts[n.partIndex]
                        }
                    }
                }
                this.syncController_.saveExpiredSegmentInfo(r, t)
            };
            i.pause = function e() {
                if (this.checkBufferTimeout_) {
                    s.clearTimeout(this.checkBufferTimeout_);
                    this.checkBufferTimeout_ = null
                }
            };
            i.paused = function e() {
                return this.checkBufferTimeout_ === null
            };
            i.resetEverything = function e(t) {
                this.ended_ = false;
                this.appendInitSegment_ = {
                    audio: true,
                    video: true
                };
                this.resetLoader();
                this.remove(0, Infinity, t);
                if (this.transmuxer_) {
                    this.transmuxer_.postMessage({
                        action: "clearAllMp4Captions"
                    });
                    this.transmuxer_.postMessage({
                        action: "reset"
                    })
                }
            };
            i.resetLoader = function e() {
                this.fetchAtBuffer_ = false;
                this.resyncLoader()
            };
            i.resyncLoader = function e() {
                if (this.transmuxer_) {
                    qp.reset(this.transmuxer_)
                }
                this.mediaIndex = null;
                this.partIndex = null;
                this.syncPoint_ = null;
                this.isPendingTimestampOffset_ = false;
                this.callQueue_ = [];
                this.loadQueue_ = [];
                this.metadataQueue_.id3 = [];
                this.metadataQueue_.caption = [];
                this.abort();
                if (this.transmuxer_) {
                    this.transmuxer_.postMessage({
                        action: "clearParsedMp4Captions"
                    })
                }
            };
            i.remove = function e(t, i, r, n) {
                if (r === void 0) {
                    r = function e() {}
                }
                if (n === void 0) {
                    n = false
                }
                if (i === Infinity) {
                    i = this.duration_()
                }
                if (i <= t) {
                    this.logger_("skipping remove because end ${end} is <= start ${start}");
                    return
                }
                if (!this.sourceUpdater_ || !this.getMediaInfo_()) {
                    this.logger_("skipping remove because no source updater or starting media info");
                    return
                }
                var a = 1;
                var s = function e() {
                    a--;
                    if (a === 0) {
                        r()
                    }
                };
                if (n || !this.audioDisabled_) {
                    a++;
                    this.sourceUpdater_.removeAudio(t, i, s)
                }
                if (n || this.loaderType_ === "main") {
                    this.gopBuffer_ = Rm(this.gopBuffer_, t, i, this.timeMapping_);
                    a++;
                    this.sourceUpdater_.removeVideo(t, i, s)
                }
                for (var o in this.inbandTextTracks_) {
                    Om(t, i, this.inbandTextTracks_[o])
                }
                Om(t, i, this.segmentMetadataTrack_);
                s()
            };
            i.monitorBuffer_ = function e() {
                if (this.checkBufferTimeout_) {
                    s.clearTimeout(this.checkBufferTimeout_)
                }
                this.checkBufferTimeout_ = s.setTimeout(this.monitorBufferTick_.bind(this), 1)
            };
            i.monitorBufferTick_ = function e() {
                if (this.state === "READY") {
                    this.fillBuffer_()
                }
                if (this.checkBufferTimeout_) {
                    s.clearTimeout(this.checkBufferTimeout_)
                }
                this.checkBufferTimeout_ = s.setTimeout(this.monitorBufferTick_.bind(this), jm)
            };
            i.fillBuffer_ = function e() {
                if (this.sourceUpdater_.updating()) {
                    return
                }
                var t = this.chooseNextRequest_();
                if (!t) {
                    return
                }
                if (typeof t.timestampOffset === "number") {
                    this.isPendingTimestampOffset_ = false;
                    this.timelineChangeController_.pendingTimelineChange({
                        type: this.loaderType_,
                        from: this.currentTimeline_,
                        to: t.timeline
                    })
                }
                this.loadSegment_(t)
            };
            i.isEndOfStream_ = function e(t, i, r) {
                if (t === void 0) {
                    t = this.mediaIndex
                }
                if (i === void 0) {
                    i = this.playlist_
                }
                if (r === void 0) {
                    r = this.partIndex
                }
                if (!i || !this.mediaSource_) {
                    return false
                }
                var n = typeof t === "number" && i.segments[t];
                var a = t + 1 === i.segments.length;
                var s = !n || !n.parts || r + 1 === n.parts.length;
                return i.endList && this.mediaSource_.readyState === "open" && a && s
            };
            i.chooseNextRequest_ = function e() {
                var t = this.buffered_();
                var i = Xd(t) || 0;
                var r = zd(t, this.currentTime_());
                var n = !this.hasPlayed_() && r >= 1;
                var a = r >= this.goalBufferLength_();
                var s = this.playlist_.segments;
                if (!s.length || n || a) {
                    return null
                }
                this.syncPoint_ = this.syncPoint_ || this.syncController_.getSyncPoint(this.playlist_, this.duration_(), this.currentTimeline_, this.currentTime_());
                var o = {
                    partIndex: null,
                    mediaIndex: null,
                    startOfSegment: null,
                    playlist: this.playlist_,
                    isSyncRequest: Boolean(!this.syncPoint_)
                };
                if (o.isSyncRequest) {
                    o.mediaIndex = Bm(this.currentTimeline_, s, i)
                } else if (this.mediaIndex !== null) {
                    var u = s[this.mediaIndex];
                    var l = typeof this.partIndex === "number" ? this.partIndex : -1;
                    o.startOfSegment = u.end ? u.end : i;
                    if (u.parts && u.parts[l + 1]) {
                        o.mediaIndex = this.mediaIndex;
                        o.partIndex = l + 1
                    } else {
                        o.mediaIndex = this.mediaIndex + 1
                    }
                } else {
                    var c = _h.getMediaInfoForTime({
                            experimentalExactManifestTimings: this.experimentalExactManifestTimings,
                            playlist: this.playlist_,
                            currentTime: this.fetchAtBuffer_ ? i : this.currentTime_(),
                            startingPartIndex: this.syncPoint_.partIndex,
                            startingSegmentIndex: this.syncPoint_.segmentIndex,
                            startTime: this.syncPoint_.time
                        }),
                        f = c.segmentIndex,
                        d = c.startTime,
                        h = c.partIndex;
                    o.getMediaInfoForTime = this.fetchAtBuffer_ ? "bufferedEnd " + i : "currentTime " + this.currentTime_();
                    o.mediaIndex = f;
                    o.startOfSegment = d;
                    o.partIndex = h
                }
                var p = s[o.mediaIndex];
                var m = p && typeof o.partIndex === "number" && p.parts && p.parts[o.partIndex];
                if (!p || typeof o.partIndex === "number" && !m) {
                    return null
                }
                if (typeof o.partIndex !== "number" && p.parts) {
                    o.partIndex = 0;
                    m = p.parts[0]
                }
                if (!r && m && !m.independent) {
                    if (o.partIndex === 0) {
                        var v = s[o.mediaIndex - 1];
                        var g = v.parts && v.parts.length && v.parts[v.parts.length - 1];
                        if (g && g.independent) {
                            o.mediaIndex -= 1;
                            o.partIndex = v.parts.length - 1;
                            o.independent = "previous segment"
                        }
                    } else if (p.parts[o.partIndex - 1].independent) {
                        o.partIndex -= 1;
                        o.independent = "previous part"
                    }
                }
                var y = this.mediaSource_ && this.mediaSource_.readyState === "ended";
                if (o.mediaIndex >= s.length - 1 && y && !this.seeking_()) {
                    return null
                }
                return this.generateSegmentInfo_(o)
            };
            i.generateSegmentInfo_ = function e(t) {
                var i = t.independent,
                    r = t.playlist,
                    n = t.mediaIndex,
                    a = t.startOfSegment,
                    s = t.isSyncRequest,
                    o = t.partIndex,
                    u = t.forceTimestampOffset,
                    l = t.getMediaInfoForTime;
                var c = r.segments[n];
                var f = typeof o === "number" && c.parts[o];
                var d = {
                    requestId: "segment-loader-" + Math.random(),
                    uri: f && f.resolvedUri || c.resolvedUri,
                    mediaIndex: n,
                    partIndex: f ? o : null,
                    isSyncRequest: s,
                    startOfSegment: a,
                    playlist: r,
                    bytes: null,
                    encryptedBytes: null,
                    timestampOffset: null,
                    timeline: c.timeline,
                    duration: f && f.duration || c.duration,
                    segment: c,
                    part: f,
                    byteLength: 0,
                    transmuxer: this.transmuxer_,
                    getMediaInfoForTime: l,
                    independent: i
                };
                var h = typeof u !== "undefined" ? u : this.isPendingTimestampOffset_;
                d.timestampOffset = this.timestampOffsetForSegment_({
                    segmentTimeline: c.timeline,
                    currentTimeline: this.currentTimeline_,
                    startOfSegment: a,
                    buffered: this.buffered_(),
                    overrideCheck: h
                });
                var p = Xd(this.sourceUpdater_.audioBuffered());
                if (typeof p === "number") {
                    d.audioAppendStart = p - this.sourceUpdater_.audioTimestampOffset()
                }
                if (this.sourceUpdater_.videoBuffered().length) {
                    d.gopsToAlignWith = Lm(this.gopBuffer_, this.currentTime_() - this.sourceUpdater_.videoTimestampOffset(), this.timeMapping_)
                }
                return d
            };
            i.timestampOffsetForSegment_ = function e(t) {
                return zm(t)
            };
            i.earlyAbortWhenNeeded_ = function e(t) {
                if (this.vhs_.tech_.paused() || !this.xhrOptions_.timeout || !this.playlist_.attributes.BANDWIDTH) {
                    return
                }
                if (Date.now() - (t.firstBytesReceivedAt || Date.now()) < 1e3) {
                    return
                }
                var i = this.currentTime_();
                var r = t.bandwidth;
                var n = this.pendingSegment_.duration;
                var a = _h.estimateSegmentRequestTime(n, r, this.playlist_, t.bytesReceived);
                var s = Vd(this.buffered_(), i, this.vhs_.tech_.playbackRate()) - 1;
                if (a <= s) {
                    return
                }
                var o = Em({
                    master: this.vhs_.playlists.master,
                    currentTime: i,
                    bandwidth: r,
                    duration: this.duration_(),
                    segmentDuration: n,
                    timeUntilRebuffer: s,
                    currentTimeline: this.currentTimeline_,
                    syncController: this.syncController_
                });
                if (!o) {
                    return
                }
                var u = a - s;
                var l = u - o.rebufferingImpact;
                var c = .5;
                if (s <= Rd) {
                    c = 1
                }
                if (!o.playlist || o.playlist.uri === this.playlist_.uri || l < c) {
                    return
                }
                this.bandwidth = o.playlist.attributes.BANDWIDTH * Sp.BANDWIDTH_VARIANCE + 1;
                this.trigger("earlyabort")
            };
            i.handleAbort_ = function e(t) {
                this.logger_("Aborting " + Gm(t));
                this.mediaRequestsAborted += 1
            };
            i.handleProgress_ = function e(t, i) {
                this.earlyAbortWhenNeeded_(i.stats);
                if (this.checkForAbort_(i.requestId)) {
                    return
                }
                this.trigger("progress")
            };
            i.handleTrackInfo_ = function e(t, i) {
                this.earlyAbortWhenNeeded_(t.stats);
                if (this.checkForAbort_(t.requestId)) {
                    return
                }
                if (this.checkForIllegalMediaSwitch(i)) {
                    return
                }
                i = i || {};
                if (!Mm(this.currentMediaInfo_, i)) {
                    this.appendInitSegment_ = {
                        audio: true,
                        video: true
                    };
                    this.startingMediaInfo_ = i;
                    this.currentMediaInfo_ = i;
                    this.logger_("trackinfo update", i);
                    this.trigger("trackinfo")
                }
                if (this.checkForAbort_(t.requestId)) {
                    return
                }
                this.pendingSegment_.trackInfo = i;
                if (this.hasEnoughInfoToAppend_()) {
                    this.processCallQueue_()
                }
            };
            i.handleTimingInfo_ = function e(t, i, r, n) {
                this.earlyAbortWhenNeeded_(t.stats);
                if (this.checkForAbort_(t.requestId)) {
                    return
                }
                var a = this.pendingSegment_;
                var s = Xm(i);
                a[s] = a[s] || {};
                a[s][r] = n;
                this.logger_("timinginfo: " + i + " - " + r + " - " + n);
                if (this.hasEnoughInfoToAppend_()) {
                    this.processCallQueue_()
                }
            };
            i.handleCaptions_ = function e(t, i) {
                var r = this;
                this.earlyAbortWhenNeeded_(t.stats);
                if (this.checkForAbort_(t.requestId)) {
                    return
                }
                if (i.length === 0) {
                    this.logger_("SegmentLoader received no captions from a caption event");
                    return
                }
                var n = this.pendingSegment_;
                if (!n.hasAppendedData_) {
                    this.metadataQueue_.caption.push(this.handleCaptions_.bind(this, t, i));
                    return
                }
                var a = this.sourceUpdater_.videoTimestampOffset() === null ? this.sourceUpdater_.audioTimestampOffset() : this.sourceUpdater_.videoTimestampOffset();
                var s = {};
                i.forEach((function(e) {
                    s[e.stream] = s[e.stream] || {
                        startTime: Infinity,
                        captions: [],
                        endTime: 0
                    };
                    var t = s[e.stream];
                    t.startTime = Math.min(t.startTime, e.startTime + a);
                    t.endTime = Math.max(t.endTime, e.endTime + a);
                    t.captions.push(e)
                }));
                Object.keys(s).forEach((function(e) {
                    var t = s[e],
                        i = t.startTime,
                        n = t.endTime,
                        o = t.captions;
                    var u = r.inbandTextTracks_;
                    r.logger_("adding cues from " + i + " -> " + n + " for " + e);
                    Cm(u, r.vhs_.tech_, e);
                    Om(i, n, u[e]);
                    Im({
                        captionArray: o,
                        inbandTextTracks: u,
                        timestampOffset: a
                    })
                }));
                if (this.transmuxer_) {
                    this.transmuxer_.postMessage({
                        action: "clearParsedMp4Captions"
                    })
                }
            };
            i.handleId3_ = function e(t, i, r) {
                this.earlyAbortWhenNeeded_(t.stats);
                if (this.checkForAbort_(t.requestId)) {
                    return
                }
                var n = this.pendingSegment_;
                if (!n.hasAppendedData_) {
                    this.metadataQueue_.id3.push(this.handleId3_.bind(this, t, i, r));
                    return
                }
                var a = this.sourceUpdater_.videoTimestampOffset() === null ? this.sourceUpdater_.audioTimestampOffset() : this.sourceUpdater_.videoTimestampOffset();
                Pm(this.inbandTextTracks_, r, this.vhs_.tech_);
                xm({
                    inbandTextTracks: this.inbandTextTracks_,
                    metadataArray: i,
                    timestampOffset: a,
                    videoDuration: this.duration_()
                })
            };
            i.processMetadataQueue_ = function e() {
                this.metadataQueue_.id3.forEach((function(e) {
                    return e()
                }));
                this.metadataQueue_.caption.forEach((function(e) {
                    return e()
                }));
                this.metadataQueue_.id3 = [];
                this.metadataQueue_.caption = []
            };
            i.processCallQueue_ = function e() {
                var t = this.callQueue_;
                this.callQueue_ = [];
                t.forEach((function(e) {
                    return e()
                }))
            };
            i.processLoadQueue_ = function e() {
                var t = this.loadQueue_;
                this.loadQueue_ = [];
                t.forEach((function(e) {
                    return e()
                }))
            };
            i.hasEnoughInfoToLoad_ = function e() {
                if (this.loaderType_ !== "audio") {
                    return true
                }
                var t = this.pendingSegment_;
                if (!t) {
                    return false
                }
                if (!this.getCurrentMediaInfo_()) {
                    return true
                }
                if (Km({
                        timelineChangeController: this.timelineChangeController_,
                        currentTimeline: this.currentTimeline_,
                        segmentTimeline: t.timeline,
                        loaderType: this.loaderType_,
                        audioDisabled: this.audioDisabled_
                    })) {
                    return false
                }
                return true
            };
            i.getCurrentMediaInfo_ = function e(t) {
                if (t === void 0) {
                    t = this.pendingSegment_
                }
                return t && t.trackInfo || this.currentMediaInfo_
            };
            i.getMediaInfo_ = function e(t) {
                if (t === void 0) {
                    t = this.pendingSegment_
                }
                return this.getCurrentMediaInfo_(t) || this.startingMediaInfo_
            };
            i.hasEnoughInfoToAppend_ = function e() {
                if (!this.sourceUpdater_.ready()) {
                    return false
                }
                if (this.waitingOnRemove_ || this.quotaExceededErrorRetryTimeout_) {
                    return false
                }
                var t = this.pendingSegment_;
                var i = this.getCurrentMediaInfo_();
                if (!t || !i) {
                    return false
                }
                var r = i.hasAudio,
                    n = i.hasVideo,
                    a = i.isMuxed;
                if (n && !t.videoTimingInfo) {
                    return false
                }
                if (r && !this.audioDisabled_ && !a && !t.audioTimingInfo) {
                    return false
                }
                if (Km({
                        timelineChangeController: this.timelineChangeController_,
                        currentTimeline: this.currentTimeline_,
                        segmentTimeline: t.timeline,
                        loaderType: this.loaderType_,
                        audioDisabled: this.audioDisabled_
                    })) {
                    return false
                }
                return true
            };
            i.handleData_ = function e(t, i) {
                this.earlyAbortWhenNeeded_(t.stats);
                if (this.checkForAbort_(t.requestId)) {
                    return
                }
                if (this.callQueue_.length || !this.hasEnoughInfoToAppend_()) {
                    this.callQueue_.push(this.handleData_.bind(this, t, i));
                    return
                }
                var r = this.pendingSegment_;
                this.setTimeMapping_(r.timeline);
                this.updateMediaSecondsLoaded_(r.part || r.segment);
                if (this.mediaSource_.readyState === "closed") {
                    return
                }
                if (t.map) {
                    t.map = this.initSegmentForMap(t.map, true);
                    r.segment.map = t.map
                }
                if (t.key) {
                    this.segmentKey(t.key, true)
                }
                r.isFmp4 = t.isFmp4;
                r.timingInfo = r.timingInfo || {};
                if (r.isFmp4) {
                    this.trigger("fmp4");
                    r.timingInfo.start = r[Xm(i.type)].start
                } else {
                    var n = this.getCurrentMediaInfo_();
                    var a = this.loaderType_ === "main" && n && n.hasVideo;
                    var s;
                    if (a) {
                        s = r.videoTimingInfo.start
                    }
                    r.timingInfo.start = this.trueSegmentStart_({
                        currentStart: r.timingInfo.start,
                        playlist: r.playlist,
                        mediaIndex: r.mediaIndex,
                        currentVideoTimestampOffset: this.sourceUpdater_.videoTimestampOffset(),
                        useVideoTimingInfo: a,
                        firstVideoFrameTimeForData: s,
                        videoTimingInfo: r.videoTimingInfo,
                        audioTimingInfo: r.audioTimingInfo
                    })
                }
                this.updateAppendInitSegmentStatus(r, i.type);
                this.updateSourceBufferTimestampOffset_(r);
                if (r.isSyncRequest) {
                    this.updateTimingInfoEnd_(r);
                    this.syncController_.saveSegmentTimingInfo({
                        segmentInfo: r,
                        shouldSaveTimelineMapping: this.loaderType_ === "main"
                    });
                    var o = this.chooseNextRequest_();
                    if (o.mediaIndex !== r.mediaIndex || o.partIndex !== r.partIndex) {
                        this.logger_("sync segment was incorrect, not appending");
                        return
                    }
                    this.logger_("sync segment was correct, appending")
                }
                r.hasAppendedData_ = true;
                this.processMetadataQueue_();
                this.appendData_(r, i)
            };
            i.updateAppendInitSegmentStatus = function e(t, i) {
                if (this.loaderType_ === "main" && typeof t.timestampOffset === "number" && !t.changedTimestampOffset) {
                    this.appendInitSegment_ = {
                        audio: true,
                        video: true
                    }
                }
                if (this.playlistOfLastInitSegment_[i] !== t.playlist) {
                    this.appendInitSegment_[i] = true
                }
            };
            i.getInitSegmentAndUpdateState_ = function e(t) {
                var i = t.type,
                    r = t.initSegment,
                    n = t.map,
                    a = t.playlist;
                if (n) {
                    var s = $h(n);
                    if (this.activeInitSegmentId_ === s) {
                        return null
                    }
                    r = this.initSegmentForMap(n, true).bytes;
                    this.activeInitSegmentId_ = s
                }
                if (r && this.appendInitSegment_[i]) {
                    this.playlistOfLastInitSegment_[i] = a;
                    this.appendInitSegment_[i] = false;
                    this.activeInitSegmentId_ = null;
                    return r
                }
                return null
            };
            i.handleQuotaExceededError_ = function e(t, i) {
                var r = this;
                var n = t.segmentInfo,
                    a = t.type,
                    o = t.bytes;
                var u = this.sourceUpdater_.audioBuffered();
                var l = this.sourceUpdater_.videoBuffered();
                if (u.length > 1) {
                    this.logger_("On QUOTA_EXCEEDED_ERR, found gaps in the audio buffer: " + Wd(u).join(", "))
                }
                if (l.length > 1) {
                    this.logger_("On QUOTA_EXCEEDED_ERR, found gaps in the video buffer: " + Wd(l).join(", "))
                }
                var c = u.length ? u.start(0) : 0;
                var f = u.length ? u.end(u.length - 1) : 0;
                var d = l.length ? l.start(0) : 0;
                var h = l.length ? l.end(l.length - 1) : 0;
                if (f - c <= Fm && h - d <= Fm) {
                    this.logger_("On QUOTA_EXCEEDED_ERR, single segment too large to append to " + "buffer, triggering an error. " + ("Appended byte length: " + o.byteLength + ", ") + ("audio buffer: " + Wd(u).join(", ") + ", ") + ("video buffer: " + Wd(l).join(", ") + ", "));
                    this.error({
                        message: "Quota exceeded error with append of a single segment of content",
                        excludeUntil: Infinity
                    });
                    this.trigger("error");
                    return
                }
                this.waitingOnRemove_ = true;
                this.callQueue_.push(this.appendToSourceBuffer_.bind(this, {
                    segmentInfo: n,
                    type: a,
                    bytes: o
                }));
                var p = this.currentTime_();
                var m = p - Fm;
                this.logger_("On QUOTA_EXCEEDED_ERR, removing audio/video from 0 to " + m);
                this.remove(0, m, (function() {
                    r.logger_("On QUOTA_EXCEEDED_ERR, retrying append in " + Fm + "s");
                    r.waitingOnRemove_ = false;
                    r.quotaExceededErrorRetryTimeout_ = s.setTimeout((function() {
                        r.logger_("On QUOTA_EXCEEDED_ERR, re-processing call queue");
                        r.quotaExceededErrorRetryTimeout_ = null;
                        r.processCallQueue_()
                    }), Fm * 1e3)
                }), true)
            };
            i.handleAppendError_ = function e(t, i) {
                var r = t.segmentInfo,
                    n = t.type,
                    a = t.bytes;
                if (!i) {
                    return
                }
                if (i.code === Um) {
                    this.handleQuotaExceededError_({
                        segmentInfo: r,
                        type: n,
                        bytes: a
                    });
                    return
                }
                this.logger_("Received non QUOTA_EXCEEDED_ERR on append", i);
                this.error(n + " append of " + a.length + "b failed for segment " + ("#" + r.mediaIndex + " in playlist " + r.playlist.id));
                this.trigger("appenderror")
            };
            i.appendToSourceBuffer_ = function e(t) {
                var i = t.segmentInfo,
                    r = t.type,
                    n = t.initSegment,
                    a = t.data,
                    s = t.bytes;
                if (!s) {
                    var o = [a];
                    var u = a.byteLength;
                    if (n) {
                        o.unshift(n);
                        u += n.byteLength
                    }
                    s = km({
                        bytes: u,
                        segments: o
                    })
                }
                this.sourceUpdater_.appendBuffer({
                    segmentInfo: i,
                    type: r,
                    bytes: s
                }, this.handleAppendError_.bind(this, {
                    segmentInfo: i,
                    type: r,
                    bytes: s
                }))
            };
            i.handleSegmentTimingInfo_ = function e(t, i, r) {
                if (!this.pendingSegment_ || i !== this.pendingSegment_.requestId) {
                    return
                }
                var n = this.pendingSegment_.segment;
                var a = t + "TimingInfo";
                if (!n[a]) {
                    n[a] = {}
                }
                n[a].transmuxerPrependedSeconds = r.prependedContentDuration || 0;
                n[a].transmuxedPresentationStart = r.start.presentation;
                n[a].transmuxedDecodeStart = r.start.decode;
                n[a].transmuxedPresentationEnd = r.end.presentation;
                n[a].transmuxedDecodeEnd = r.end.decode;
                n[a].baseMediaDecodeTime = r.baseMediaDecodeTime
            };
            i.appendData_ = function e(t, i) {
                var r = i.type,
                    n = i.data;
                if (!n || !n.byteLength) {
                    return
                }
                if (r === "audio" && this.audioDisabled_) {
                    return
                }
                var a = this.getInitSegmentAndUpdateState_({
                    type: r,
                    initSegment: i.initSegment,
                    playlist: t.playlist,
                    map: t.isFmp4 ? t.segment.map : null
                });
                this.appendToSourceBuffer_({
                    segmentInfo: t,
                    type: r,
                    initSegment: a,
                    data: n
                })
            };
            i.loadSegment_ = function e(t) {
                var i = this;
                this.state = "WAITING";
                this.pendingSegment_ = t;
                this.trimBackBuffer_(t);
                if (typeof t.timestampOffset === "number") {
                    if (this.transmuxer_) {
                        this.transmuxer_.postMessage({
                            action: "clearAllMp4Captions"
                        })
                    }
                }
                if (!this.hasEnoughInfoToLoad_()) {
                    this.loadQueue_.push((function() {
                        var e = X({}, t, {
                            forceTimestampOffset: true
                        });
                        X(t, i.generateSegmentInfo_(e));
                        i.isPendingTimestampOffset_ = false;
                        i.updateTransmuxerAndRequestSegment_(t)
                    }));
                    return
                }
                this.updateTransmuxerAndRequestSegment_(t)
            };
            i.updateTransmuxerAndRequestSegment_ = function e(t) {
                var i = this;
                if (this.shouldUpdateTransmuxerTimestampOffset_(t.timestampOffset)) {
                    this.gopBuffer_.length = 0;
                    t.gopsToAlignWith = [];
                    this.timeMapping_ = 0;
                    this.transmuxer_.postMessage({
                        action: "reset"
                    });
                    this.transmuxer_.postMessage({
                        action: "setTimestampOffset",
                        timestampOffset: t.timestampOffset
                    })
                }
                var r = this.createSimplifiedSegmentObj_(t);
                var n = this.isEndOfStream_(t.mediaIndex, t.playlist, t.partIndex);
                var a = this.mediaIndex !== null;
                var s = t.timeline !== this.currentTimeline_ && t.timeline > 0;
                var o = n || a && s;
                this.logger_("Requesting " + Gm(t));
                if (r.map && !r.map.bytes) {
                    this.logger_("going to request init segment.");
                    this.appendInitSegment_ = {
                        video: true,
                        audio: true
                    }
                }
                t.abortRequests = sm({
                    xhr: this.vhs_.xhr,
                    xhrOptions: this.xhrOptions_,
                    decryptionWorker: this.decrypter_,
                    segment: r,
                    abortFn: this.handleAbort_.bind(this, t),
                    progressFn: this.handleProgress_.bind(this),
                    trackInfoFn: this.handleTrackInfo_.bind(this),
                    timingInfoFn: this.handleTimingInfo_.bind(this),
                    videoSegmentTimingInfoFn: this.handleSegmentTimingInfo_.bind(this, "video", t.requestId),
                    audioSegmentTimingInfoFn: this.handleSegmentTimingInfo_.bind(this, "audio", t.requestId),
                    captionsFn: this.handleCaptions_.bind(this),
                    isEndOfTimeline: o,
                    endedTimelineFn: function e() {
                        i.logger_("received endedtimeline callback")
                    },
                    id3Fn: this.handleId3_.bind(this),
                    dataFn: this.handleData_.bind(this),
                    doneFn: this.segmentRequestFinished_.bind(this),
                    onTransmuxerLog: function e(r) {
                        var n = r.message,
                            a = r.level,
                            s = r.stream;
                        i.logger_(Gm(t) + " logged from transmuxer stream " + s + " as a " + a + ": " + n)
                    }
                })
            };
            i.trimBackBuffer_ = function e(t) {
                var i = Wm(this.seekable_(), this.currentTime_(), this.playlist_.targetDuration || 10);
                if (i > 0) {
                    this.remove(0, i)
                }
            };
            i.createSimplifiedSegmentObj_ = function e(t) {
                var i = t.segment;
                var r = t.part;
                var n = {
                    resolvedUri: r ? r.resolvedUri : i.resolvedUri,
                    byterange: r ? r.byterange : i.byterange,
                    requestId: t.requestId,
                    transmuxer: t.transmuxer,
                    audioAppendStart: t.audioAppendStart,
                    gopsToAlignWith: t.gopsToAlignWith,
                    part: t.part
                };
                var a = t.playlist.segments[t.mediaIndex - 1];
                if (a && a.timeline === i.timeline) {
                    if (a.videoTimingInfo) {
                        n.baseStartTime = a.videoTimingInfo.transmuxedDecodeEnd
                    } else if (a.audioTimingInfo) {
                        n.baseStartTime = a.audioTimingInfo.transmuxedDecodeEnd
                    }
                }
                if (i.key) {
                    var s = i.key.iv || new Uint32Array([0, 0, 0, t.mediaIndex + t.playlist.mediaSequence]);
                    n.key = this.segmentKey(i.key);
                    n.key.iv = s
                }
                if (i.map) {
                    n.map = this.initSegmentForMap(i.map)
                }
                return n
            };
            i.saveTransferStats_ = function e(t) {
                this.mediaRequests += 1;
                if (t) {
                    this.mediaBytesTransferred += t.bytesReceived;
                    this.mediaTransferDuration += t.roundTripTime
                }
            };
            i.saveBandwidthRelatedStats_ = function e(t, i) {
                this.pendingSegment_.byteLength = i.bytesReceived;
                if (t < qm) {
                    this.logger_("Ignoring segment's bandwidth because its duration of " + t + (" is less than the min to record " + qm));
                    return
                }
                this.bandwidth = i.bandwidth;
                this.roundTrip = i.roundTripTime
            };
            i.handleTimeout_ = function e() {
                this.mediaRequestsTimedout += 1;
                this.bandwidth = 1;
                this.roundTrip = NaN;
                this.trigger("bandwidthupdate")
            };
            i.segmentRequestFinished_ = function e(t, i, r) {
                if (this.callQueue_.length) {
                    this.callQueue_.push(this.segmentRequestFinished_.bind(this, t, i, r));
                    return
                }
                this.saveTransferStats_(i.stats);
                if (!this.pendingSegment_) {
                    return
                }
                if (i.requestId !== this.pendingSegment_.requestId) {
                    return
                }
                if (t) {
                    this.pendingSegment_ = null;
                    this.state = "READY";
                    if (t.code === Wp.ABORTED) {
                        return
                    }
                    this.pause();
                    if (t.code === Wp.TIMEOUT) {
                        this.handleTimeout_();
                        return
                    }
                    this.mediaRequestsErrored += 1;
                    this.error(t);
                    this.trigger("error");
                    return
                }
                var n = this.pendingSegment_;
                this.saveBandwidthRelatedStats_(n.duration, i.stats);
                n.endOfAllRequests = i.endOfAllRequests;
                if (r.gopInfo) {
                    this.gopBuffer_ = Nm(this.gopBuffer_, r.gopInfo, this.safeAppend_)
                }
                this.state = "APPENDING";
                this.trigger("appending");
                this.waitForAppendsToComplete_(n)
            };
            i.setTimeMapping_ = function e(t) {
                var i = this.syncController_.mappingForTimeline(t);
                if (i !== null) {
                    this.timeMapping_ = i
                }
            };
            i.updateMediaSecondsLoaded_ = function e(t) {
                if (typeof t.start === "number" && typeof t.end === "number") {
                    this.mediaSecondsLoaded += t.end - t.start
                } else {
                    this.mediaSecondsLoaded += t.duration
                }
            };
            i.shouldUpdateTransmuxerTimestampOffset_ = function e(t) {
                if (t === null) {
                    return false
                }
                if (this.loaderType_ === "main" && t !== this.sourceUpdater_.videoTimestampOffset()) {
                    return true
                }
                if (!this.audioDisabled_ && t !== this.sourceUpdater_.audioTimestampOffset()) {
                    return true
                }
                return false
            };
            i.trueSegmentStart_ = function e(t) {
                var i = t.currentStart,
                    r = t.playlist,
                    n = t.mediaIndex,
                    a = t.firstVideoFrameTimeForData,
                    s = t.currentVideoTimestampOffset,
                    o = t.useVideoTimingInfo,
                    u = t.videoTimingInfo,
                    l = t.audioTimingInfo;
                if (typeof i !== "undefined") {
                    return i
                }
                if (!o) {
                    return l.start
                }
                var c = r.segments[n - 1];
                if (n === 0 || !c || typeof c.start === "undefined" || c.end !== a + s) {
                    return a
                }
                return u.start
            };
            i.waitForAppendsToComplete_ = function e(t) {
                var i = this.getCurrentMediaInfo_(t);
                if (!i) {
                    this.error({
                        message: "No starting media returned, likely due to an unsupported media format.",
                        blacklistDuration: Infinity
                    });
                    this.trigger("error");
                    return
                }
                var r = i.hasAudio,
                    n = i.hasVideo,
                    a = i.isMuxed;
                var s = this.loaderType_ === "main" && n;
                var o = !this.audioDisabled_ && r && !a;
                t.waitingOnAppends = 0;
                if (!t.hasAppendedData_) {
                    if (!t.timingInfo && typeof t.timestampOffset === "number") {
                        this.isPendingTimestampOffset_ = true
                    }
                    t.timingInfo = {
                        start: 0
                    };
                    t.waitingOnAppends++;
                    if (!this.isPendingTimestampOffset_) {
                        this.updateSourceBufferTimestampOffset_(t);
                        this.processMetadataQueue_()
                    }
                    this.checkAppendsDone_(t);
                    return
                }
                if (s) {
                    t.waitingOnAppends++
                }
                if (o) {
                    t.waitingOnAppends++
                }
                if (s) {
                    this.sourceUpdater_.videoQueueCallback(this.checkAppendsDone_.bind(this, t))
                }
                if (o) {
                    this.sourceUpdater_.audioQueueCallback(this.checkAppendsDone_.bind(this, t))
                }
            };
            i.checkAppendsDone_ = function e(t) {
                if (this.checkForAbort_(t.requestId)) {
                    return
                }
                t.waitingOnAppends--;
                if (t.waitingOnAppends === 0) {
                    this.handleAppendsDone_()
                }
            };
            i.checkForIllegalMediaSwitch = function e(t) {
                var i = Vm(this.loaderType_, this.getCurrentMediaInfo_(), t);
                if (i) {
                    this.error({
                        message: i,
                        blacklistDuration: Infinity
                    });
                    this.trigger("error");
                    return true
                }
                return false
            };
            i.updateSourceBufferTimestampOffset_ = function e(t) {
                if (t.timestampOffset === null || typeof t.timingInfo.start !== "number" || t.changedTimestampOffset || this.loaderType_ !== "main") {
                    return
                }
                var i = false;
                t.timestampOffset -= this.getSegmentStartTimeForTimestampOffsetCalculation_({
                    videoTimingInfo: t.segment.videoTimingInfo,
                    audioTimingInfo: t.segment.audioTimingInfo,
                    timingInfo: t.timingInfo
                });
                t.changedTimestampOffset = true;
                if (t.timestampOffset !== this.sourceUpdater_.videoTimestampOffset()) {
                    this.sourceUpdater_.videoTimestampOffset(t.timestampOffset);
                    i = true
                }
                if (t.timestampOffset !== this.sourceUpdater_.audioTimestampOffset()) {
                    this.sourceUpdater_.audioTimestampOffset(t.timestampOffset);
                    i = true
                }
                if (i) {
                    this.trigger("timestampoffset")
                }
            };
            i.getSegmentStartTimeForTimestampOffsetCalculation_ = function e(t) {
                var i = t.videoTimingInfo,
                    r = t.audioTimingInfo,
                    n = t.timingInfo;
                if (!this.useDtsForTimestampOffset_) {
                    return n.start
                }
                if (i && typeof i.transmuxedDecodeStart === "number") {
                    return i.transmuxedDecodeStart
                }
                if (r && typeof r.transmuxedDecodeStart === "number") {
                    return r.transmuxedDecodeStart
                }
                return n.start
            };
            i.updateTimingInfoEnd_ = function e(t) {
                t.timingInfo = t.timingInfo || {};
                var i = this.getMediaInfo_();
                var r = this.loaderType_ === "main" && i && i.hasVideo;
                var n = r && t.videoTimingInfo ? t.videoTimingInfo : t.audioTimingInfo;
                if (!n) {
                    return
                }
                t.timingInfo.end = typeof n.end === "number" ? n.end : n.start + t.duration
            };
            i.handleAppendsDone_ = function e() {
                if (this.pendingSegment_) {
                    this.trigger("appendsdone")
                }
                if (!this.pendingSegment_) {
                    this.state = "READY";
                    if (!this.paused()) {
                        this.monitorBuffer_()
                    }
                    return
                }
                var t = this.pendingSegment_;
                this.updateTimingInfoEnd_(t);
                if (this.shouldSaveSegmentTimingInfo_) {
                    this.syncController_.saveSegmentTimingInfo({
                        segmentInfo: t,
                        shouldSaveTimelineMapping: this.loaderType_ === "main"
                    })
                }
                var i = Qm(t, this.sourceType_);
                if (i) {
                    if (i.severity === "warn") {
                        xd.log.warn(i.message)
                    } else {
                        this.logger_(i.message)
                    }
                }
                this.recordThroughput_(t);
                this.pendingSegment_ = null;
                this.state = "READY";
                if (t.isSyncRequest) {
                    this.trigger("syncinfoupdate");
                    if (!t.hasAppendedData_) {
                        this.logger_("Throwing away un-appended sync request " + Gm(t));
                        return
                    }
                }
                this.logger_("Appended " + Gm(t));
                this.addSegmentMetadataCue_(t);
                this.fetchAtBuffer_ = true;
                if (this.currentTimeline_ !== t.timeline) {
                    this.timelineChangeController_.lastTimelineChange({
                        type: this.loaderType_,
                        from: this.currentTimeline_,
                        to: t.timeline
                    });
                    if (this.loaderType_ === "main" && !this.audioDisabled_) {
                        this.timelineChangeController_.lastTimelineChange({
                            type: "audio",
                            from: this.currentTimeline_,
                            to: t.timeline
                        })
                    }
                }
                this.currentTimeline_ = t.timeline;
                this.trigger("syncinfoupdate");
                var r = t.segment;
                var n = t.part;
                var a = r.end && this.currentTime_() - r.end > t.playlist.targetDuration * 3;
                var s = n && n.end && this.currentTime_() - n.end > t.playlist.partTargetDuration * 3;
                if (a || s) {
                    this.logger_("bad " + (a ? "segment" : "part") + " " + Gm(t));
                    this.resetEverything();
                    return
                }
                var o = this.mediaIndex !== null;
                if (o) {
                    this.trigger("bandwidthupdate")
                }
                this.trigger("progress");
                this.mediaIndex = t.mediaIndex;
                this.partIndex = t.partIndex;
                if (this.isEndOfStream_(t.mediaIndex, t.playlist, t.partIndex)) {
                    this.endOfStream()
                }
                this.trigger("appended");
                if (t.hasAppendedData_) {
                    this.mediaAppends++
                }
                if (!this.paused()) {
                    this.monitorBuffer_()
                }
            };
            i.recordThroughput_ = function e(t) {
                if (t.duration < qm) {
                    this.logger_("Ignoring segment's throughput because its duration of " + t.duration + (" is less than the min to record " + qm));
                    return
                }
                var i = this.throughput.rate;
                var r = Date.now() - t.endOfAllRequests + 1;
                var n = Math.floor(t.byteLength / r * 8 * 1e3);
                this.throughput.rate += (n - i) / ++this.throughput.count
            };
            i.addSegmentMetadataCue_ = function e(t) {
                if (!this.segmentMetadataTrack_) {
                    return
                }
                var i = t.segment;
                var r = i.start;
                var n = i.end;
                if (!Hm(r) || !Hm(n)) {
                    return
                }
                Om(r, n, this.segmentMetadataTrack_);
                var a = s.WebKitDataCue || s.VTTCue;
                var o = {
                    custom: i.custom,
                    dateTimeObject: i.dateTimeObject,
                    dateTimeString: i.dateTimeString,
                    bandwidth: t.playlist.attributes.BANDWIDTH,
                    resolution: t.playlist.attributes.RESOLUTION,
                    codecs: t.playlist.attributes.CODECS,
                    byteLength: t.byteLength,
                    uri: t.uri,
                    timeline: t.timeline,
                    playlist: t.playlist.id,
                    start: r,
                    end: n
                };
                var u = JSON.stringify(o);
                var l = new a(r, n, u);
                l.value = o;
                this.segmentMetadataTrack_.addCue(l)
            };
            return t
        }(xd.EventTarget);

        function Zm() {}
        var ev = function e(t) {
            if (typeof t !== "string") {
                return t
            }
            return t.replace(/./, (function(e) {
                return e.toUpperCase()
            }))
        };
        var tv = ["video", "audio"];
        var iv = function e(t, i) {
            var r = i[t + "Buffer"];
            return r && r.updating || i.queuePending[t]
        };
        var rv = function e(t, i) {
            for (var r = 0; r < i.length; r++) {
                var n = i[r];
                if (n.type === "mediaSource") {
                    return null
                }
                if (n.type === t) {
                    return r
                }
            }
            return null
        };
        var nv = function e(t, i) {
            if (i.queue.length === 0) {
                return
            }
            var r = 0;
            var n = i.queue[r];
            if (n.type === "mediaSource") {
                if (!i.updating() && i.mediaSource.readyState !== "closed") {
                    i.queue.shift();
                    n.action(i);
                    if (n.doneFn) {
                        n.doneFn()
                    }
                    e("audio", i);
                    e("video", i)
                }
                return
            }
            if (t === "mediaSource") {
                return
            }
            if (!i.ready() || i.mediaSource.readyState === "closed" || iv(t, i)) {
                return
            }
            if (n.type !== t) {
                r = rv(t, i.queue);
                if (r === null) {
                    return
                }
                n = i.queue[r]
            }
            i.queue.splice(r, 1);
            i.queuePending[t] = n;
            n.action(t, i);
            if (!n.doneFn) {
                i.queuePending[t] = null;
                e(t, i);
                return
            }
        };
        var av = function e(t, i) {
            var r = i[t + "Buffer"];
            var n = ev(t);
            if (!r) {
                return
            }
            r.removeEventListener("updateend", i["on" + n + "UpdateEnd_"]);
            r.removeEventListener("error", i["on" + n + "Error_"]);
            i.codecs[t] = null;
            i[t + "Buffer"] = null
        };
        var sv = function e(t, i) {
            return t && i && Array.prototype.indexOf.call(t.sourceBuffers, i) !== -1
        };
        var ov = {
            appendBuffer: function e(t, i, r) {
                return function(e, n) {
                    var a = n[e + "Buffer"];
                    if (!sv(n.mediaSource, a)) {
                        return
                    }
                    n.logger_("Appending segment " + i.mediaIndex + "'s " + t.length + " bytes to " + e + "Buffer");
                    try {
                        a.appendBuffer(t)
                    } catch (t) {
                        n.logger_("Error with code " + t.code + " " + (t.code === Um ? "(QUOTA_EXCEEDED_ERR) " : "") + ("when appending segment " + i.mediaIndex + " to " + e + "Buffer"));
                        n.queuePending[e] = null;
                        r(t)
                    }
                }
            },
            remove: function e(t, i) {
                return function(e, r) {
                    var n = r[e + "Buffer"];
                    if (!sv(r.mediaSource, n)) {
                        return
                    }
                    r.logger_("Removing " + t + " to " + i + " from " + e + "Buffer");
                    try {
                        n.remove(t, i)
                    } catch (n) {
                        r.logger_("Remove " + t + " to " + i + " from " + e + "Buffer failed")
                    }
                }
            },
            timestampOffset: function e(t) {
                return function(e, i) {
                    var r = i[e + "Buffer"];
                    if (!sv(i.mediaSource, r)) {
                        return
                    }
                    i.logger_("Setting " + e + "timestampOffset to " + t);
                    r.timestampOffset = t
                }
            },
            callback: function e(t) {
                return function(e, i) {
                    t()
                }
            },
            endOfStream: function e(t) {
                return function(e) {
                    if (e.mediaSource.readyState !== "open") {
                        return
                    }
                    e.logger_("Calling mediaSource endOfStream(" + (t || "") + ")");
                    try {
                        e.mediaSource.endOfStream(t)
                    } catch (e) {
                        xd.log.warn("Failed to call media source endOfStream", e)
                    }
                }
            },
            duration: function e(t) {
                return function(e) {
                    e.logger_("Setting mediaSource duration to " + t);
                    try {
                        e.mediaSource.duration = t
                    } catch (e) {
                        xd.log.warn("Failed to set media source duration", e)
                    }
                }
            },
            abort: function e() {
                return function(e, t) {
                    if (t.mediaSource.readyState !== "open") {
                        return
                    }
                    var i = t[e + "Buffer"];
                    if (!sv(t.mediaSource, i)) {
                        return
                    }
                    t.logger_("calling abort on " + e + "Buffer");
                    try {
                        i.abort()
                    } catch (t) {
                        xd.log.warn("Failed to abort on " + e + "Buffer", t)
                    }
                }
            },
            addSourceBuffer: function e(t, i) {
                return function(e) {
                    var r = ev(t);
                    var n = Pt(i);
                    e.logger_("Adding " + t + "Buffer with codec " + i + " to mediaSource");
                    var a = e.mediaSource.addSourceBuffer(n);
                    a.addEventListener("updateend", e["on" + r + "UpdateEnd_"]);
                    a.addEventListener("error", e["on" + r + "Error_"]);
                    e.codecs[t] = i;
                    e[t + "Buffer"] = a
                }
            },
            removeSourceBuffer: function e(t) {
                return function(e) {
                    var i = e[t + "Buffer"];
                    av(t, e);
                    if (!sv(e.mediaSource, i)) {
                        return
                    }
                    e.logger_("Removing " + t + "Buffer with codec " + e.codecs[t] + " from mediaSource");
                    try {
                        e.mediaSource.removeSourceBuffer(i)
                    } catch (e) {
                        xd.log.warn("Failed to removeSourceBuffer " + t + "Buffer", e)
                    }
                }
            },
            changeType: function e(t) {
                return function(e, i) {
                    var r = i[e + "Buffer"];
                    var n = Pt(t);
                    if (!sv(i.mediaSource, r)) {
                        return
                    }
                    if (i.codecs[e] === t) {
                        return
                    }
                    i.logger_("changing " + e + "Buffer codec from " + i.codecs[e] + " to " + t);
                    r.changeType(n);
                    i.codecs[e] = t
                }
            }
        };
        var uv = function e(t) {
            var i = t.type,
                r = t.sourceUpdater,
                n = t.action,
                a = t.doneFn,
                s = t.name;
            r.queue.push({
                type: i,
                action: n,
                doneFn: a,
                name: s
            });
            nv(i, r)
        };
        var lv = function e(t, i) {
            return function(e) {
                if (i.queuePending[t]) {
                    var r = i.queuePending[t].doneFn;
                    i.queuePending[t] = null;
                    if (r) {
                        r(i[t + "Error_"])
                    }
                }
                nv(t, i)
            }
        };
        var cv = function(e) {
            J(t, e);

            function t(t) {
                var i;
                i = e.call(this) || this;
                i.mediaSource = t;
                i.sourceopenListener_ = function() {
                    return nv("mediaSource", Y(i))
                };
                i.mediaSource.addEventListener("sourceopen", i.sourceopenListener_);
                i.logger_ = Nd("SourceUpdater");
                i.audioTimestampOffset_ = 0;
                i.videoTimestampOffset_ = 0;
                i.queue = [];
                i.queuePending = {
                    audio: null,
                    video: null
                };
                i.delayedAudioAppendQueue_ = [];
                i.videoAppendQueued_ = false;
                i.codecs = {};
                i.onVideoUpdateEnd_ = lv("video", Y(i));
                i.onAudioUpdateEnd_ = lv("audio", Y(i));
                i.onVideoError_ = function(e) {
                    i.videoError_ = e
                };
                i.onAudioError_ = function(e) {
                    i.audioError_ = e
                };
                i.createdSourceBuffers_ = false;
                i.initializedEme_ = false;
                i.triggeredReady_ = false;
                return i
            }
            var i = t.prototype;
            i.initializedEme = function e() {
                this.initializedEme_ = true;
                this.triggerReady()
            };
            i.hasCreatedSourceBuffers = function e() {
                return this.createdSourceBuffers_
            };
            i.hasInitializedAnyEme = function e() {
                return this.initializedEme_
            };
            i.ready = function e() {
                return this.hasCreatedSourceBuffers() && this.hasInitializedAnyEme()
            };
            i.createSourceBuffers = function e(t) {
                if (this.hasCreatedSourceBuffers()) {
                    return
                }
                this.addOrChangeSourceBuffers(t);
                this.createdSourceBuffers_ = true;
                this.trigger("createdsourcebuffers");
                this.triggerReady()
            };
            i.triggerReady = function e() {
                if (this.ready() && !this.triggeredReady_) {
                    this.triggeredReady_ = true;
                    this.trigger("ready")
                }
            };
            i.addSourceBuffer = function e(t, i) {
                uv({
                    type: "mediaSource",
                    sourceUpdater: this,
                    action: ov.addSourceBuffer(t, i),
                    name: "addSourceBuffer"
                })
            };
            i.abort = function e(t) {
                uv({
                    type: t,
                    sourceUpdater: this,
                    action: ov.abort(t),
                    name: "abort"
                })
            };
            i.removeSourceBuffer = function e(t) {
                if (!this.canRemoveSourceBuffer()) {
                    xd.log.error("removeSourceBuffer is not supported!");
                    return
                }
                uv({
                    type: "mediaSource",
                    sourceUpdater: this,
                    action: ov.removeSourceBuffer(t),
                    name: "removeSourceBuffer"
                })
            };
            i.canRemoveSourceBuffer = function e() {
                return !xd.browser.IE_VERSION && !xd.browser.IS_FIREFOX && s.MediaSource && s.MediaSource.prototype && typeof s.MediaSource.prototype.removeSourceBuffer === "function"
            };
            t.canChangeType = function e() {
                return s.SourceBuffer && s.SourceBuffer.prototype && typeof s.SourceBuffer.prototype.changeType === "function"
            };
            i.canChangeType = function e() {
                return this.constructor.canChangeType()
            };
            i.changeType = function e(t, i) {
                if (!this.canChangeType()) {
                    xd.log.error("changeType is not supported!");
                    return
                }
                uv({
                    type: t,
                    sourceUpdater: this,
                    action: ov.changeType(i),
                    name: "changeType"
                })
            };
            i.addOrChangeSourceBuffers = function e(t) {
                var i = this;
                if (!t || typeof t !== "object" || Object.keys(t).length === 0) {
                    throw new Error("Cannot addOrChangeSourceBuffers to undefined codecs")
                }
                Object.keys(t).forEach((function(e) {
                    var r = t[e];
                    if (!i.hasCreatedSourceBuffers()) {
                        return i.addSourceBuffer(e, r)
                    }
                    if (i.canChangeType()) {
                        i.changeType(e, r)
                    }
                }))
            };
            i.appendBuffer = function e(t, i) {
                var r = this;
                var n = t.segmentInfo,
                    a = t.type,
                    s = t.bytes;
                this.processedAppend_ = true;
                if (a === "audio" && this.videoBuffer && !this.videoAppendQueued_) {
                    this.delayedAudioAppendQueue_.push([t, i]);
                    this.logger_("delayed audio append of " + s.length + " until video append");
                    return
                }
                var o = i;
                uv({
                    type: a,
                    sourceUpdater: this,
                    action: ov.appendBuffer(s, n || {
                        mediaIndex: -1
                    }, o),
                    doneFn: i,
                    name: "appendBuffer"
                });
                if (a === "video") {
                    this.videoAppendQueued_ = true;
                    if (!this.delayedAudioAppendQueue_.length) {
                        return
                    }
                    var u = this.delayedAudioAppendQueue_.slice();
                    this.logger_("queuing delayed audio " + u.length + " appendBuffers");
                    this.delayedAudioAppendQueue_.length = 0;
                    u.forEach((function(e) {
                        r.appendBuffer.apply(r, e)
                    }))
                }
            };
            i.audioBuffered = function e() {
                if (!sv(this.mediaSource, this.audioBuffer)) {
                    return xd.createTimeRange()
                }
                return this.audioBuffer.buffered ? this.audioBuffer.buffered : xd.createTimeRange()
            };
            i.videoBuffered = function e() {
                if (!sv(this.mediaSource, this.videoBuffer)) {
                    return xd.createTimeRange()
                }
                return this.videoBuffer.buffered ? this.videoBuffer.buffered : xd.createTimeRange()
            };
            i.buffered = function e() {
                var t = sv(this.mediaSource, this.videoBuffer) ? this.videoBuffer : null;
                var i = sv(this.mediaSource, this.audioBuffer) ? this.audioBuffer : null;
                if (i && !t) {
                    return this.audioBuffered()
                }
                if (t && !i) {
                    return this.videoBuffered()
                }
                return Hd(this.audioBuffered(), this.videoBuffered())
            };
            i.setDuration = function e(t, i) {
                if (i === void 0) {
                    i = Zm
                }
                uv({
                    type: "mediaSource",
                    sourceUpdater: this,
                    action: ov.duration(t),
                    name: "duration",
                    doneFn: i
                })
            };
            i.endOfStream = function e(t, i) {
                if (t === void 0) {
                    t = null
                }
                if (i === void 0) {
                    i = Zm
                }
                if (typeof t !== "string") {
                    t = undefined
                }
                uv({
                    type: "mediaSource",
                    sourceUpdater: this,
                    action: ov.endOfStream(t),
                    name: "endOfStream",
                    doneFn: i
                })
            };
            i.removeAudio = function e(t, i, r) {
                if (r === void 0) {
                    r = Zm
                }
                if (!this.audioBuffered().length || this.audioBuffered().end(0) === 0) {
                    r();
                    return
                }
                uv({
                    type: "audio",
                    sourceUpdater: this,
                    action: ov.remove(t, i),
                    doneFn: r,
                    name: "remove"
                })
            };
            i.removeVideo = function e(t, i, r) {
                if (r === void 0) {
                    r = Zm
                }
                if (!this.videoBuffered().length || this.videoBuffered().end(0) === 0) {
                    r();
                    return
                }
                uv({
                    type: "video",
                    sourceUpdater: this,
                    action: ov.remove(t, i),
                    doneFn: r,
                    name: "remove"
                })
            };
            i.updating = function e() {
                if (iv("audio", this) || iv("video", this)) {
                    return true
                }
                return false
            };
            i.audioTimestampOffset = function e(t) {
                if (typeof t !== "undefined" && this.audioBuffer && this.audioTimestampOffset_ !== t) {
                    uv({
                        type: "audio",
                        sourceUpdater: this,
                        action: ov.timestampOffset(t),
                        name: "timestampOffset"
                    });
                    this.audioTimestampOffset_ = t
                }
                return this.audioTimestampOffset_
            };
            i.videoTimestampOffset = function e(t) {
                if (typeof t !== "undefined" && this.videoBuffer && this.videoTimestampOffset !== t) {
                    uv({
                        type: "video",
                        sourceUpdater: this,
                        action: ov.timestampOffset(t),
                        name: "timestampOffset"
                    });
                    this.videoTimestampOffset_ = t
                }
                return this.videoTimestampOffset_
            };
            i.audioQueueCallback = function e(t) {
                if (!this.audioBuffer) {
                    return
                }
                uv({
                    type: "audio",
                    sourceUpdater: this,
                    action: ov.callback(t),
                    name: "callback"
                })
            };
            i.videoQueueCallback = function e(t) {
                if (!this.videoBuffer) {
                    return
                }
                uv({
                    type: "video",
                    sourceUpdater: this,
                    action: ov.callback(t),
                    name: "callback"
                })
            };
            i.dispose = function e() {
                var t = this;
                this.trigger("dispose");
                tv.forEach((function(e) {
                    t.abort(e);
                    if (t.canRemoveSourceBuffer()) {
                        t.removeSourceBuffer(e)
                    } else {
                        t[e + "QueueCallback"]((function() {
                            return av(e, t)
                        }))
                    }
                }));
                this.videoAppendQueued_ = false;
                this.delayedAudioAppendQueue_.length = 0;
                if (this.sourceopenListener_) {
                    this.mediaSource.removeEventListener("sourceopen", this.sourceopenListener_)
                }
                this.off()
            };
            return t
        }(xd.EventTarget);
        var fv = function e(t) {
            return decodeURIComponent(escape(String.fromCharCode.apply(null, t)))
        };
        var dv = new Uint8Array("\n\n".split("").map((function(e) {
            return e.charCodeAt(0)
        })));
        var hv = function(e) {
            J(t, e);

            function t(t, i) {
                var r;
                if (i === void 0) {
                    i = {}
                }
                r = e.call(this, t, i) || this;
                r.mediaSource_ = null;
                r.subtitlesTrack_ = null;
                r.loaderType_ = "subtitle";
                r.featuresNativeTextTracks_ = t.featuresNativeTextTracks;
                r.shouldSaveSegmentTimingInfo_ = false;
                return r
            }
            var i = t.prototype;
            i.createTransmuxer_ = function e() {
                return null
            };
            i.buffered_ = function e() {
                if (!this.subtitlesTrack_ || !this.subtitlesTrack_.cues || !this.subtitlesTrack_.cues.length) {
                    return xd.createTimeRanges()
                }
                var t = this.subtitlesTrack_.cues;
                var i = t[0].startTime;
                var r = t[t.length - 1].startTime;
                return xd.createTimeRanges([
                    [i, r]
                ])
            };
            i.initSegmentForMap = function e(t, i) {
                if (i === void 0) {
                    i = false
                }
                if (!t) {
                    return null
                }
                var r = $h(t);
                var n = this.initSegments_[r];
                if (i && !n && t.bytes) {
                    var a = dv.byteLength + t.bytes.byteLength;
                    var s = new Uint8Array(a);
                    s.set(t.bytes);
                    s.set(dv, t.bytes.byteLength);
                    this.initSegments_[r] = n = {
                        resolvedUri: t.resolvedUri,
                        byterange: t.byterange,
                        bytes: s
                    }
                }
                return n || t
            };
            i.couldBeginLoading_ = function e() {
                return this.playlist_ && this.subtitlesTrack_ && !this.paused()
            };
            i.init_ = function e() {
                this.state = "READY";
                this.resetEverything();
                return this.monitorBuffer_()
            };
            i.track = function e(t) {
                if (typeof t === "undefined") {
                    return this.subtitlesTrack_
                }
                this.subtitlesTrack_ = t;
                if (this.state === "INIT" && this.couldBeginLoading_()) {
                    this.init_()
                }
                return this.subtitlesTrack_
            };
            i.remove = function e(t, i) {
                Om(t, i, this.subtitlesTrack_)
            };
            i.fillBuffer_ = function e() {
                var t = this;
                var i = this.chooseNextRequest_();
                if (!i) {
                    return
                }
                if (this.syncController_.timestampOffsetForTimeline(i.timeline) === null) {
                    var r = function e() {
                        t.state = "READY";
                        if (!t.paused()) {
                            t.monitorBuffer_()
                        }
                    };
                    this.syncController_.one("timestampoffset", r);
                    this.state = "WAITING_ON_TIMELINE";
                    return
                }
                this.loadSegment_(i)
            };
            i.timestampOffsetForSegment_ = function e() {
                return null
            };
            i.chooseNextRequest_ = function t() {
                return this.skipEmptySegments_(e.prototype.chooseNextRequest_.call(this))
            };
            i.skipEmptySegments_ = function e(t) {
                while (t && t.segment.empty) {
                    if (t.mediaIndex + 1 >= t.playlist.segments.length) {
                        t = null;
                        break
                    }
                    t = this.generateSegmentInfo_({
                        playlist: t.playlist,
                        mediaIndex: t.mediaIndex + 1,
                        startOfSegment: t.startOfSegment + t.duration,
                        isSyncRequest: t.isSyncRequest
                    })
                }
                return t
            };
            i.stopForError = function e(t) {
                this.error(t);
                this.state = "READY";
                this.pause();
                this.trigger("error")
            };
            i.segmentRequestFinished_ = function e(t, i, r) {
                var n = this;
                if (!this.subtitlesTrack_) {
                    this.state = "READY";
                    return
                }
                this.saveTransferStats_(i.stats);
                if (!this.pendingSegment_) {
                    this.state = "READY";
                    this.mediaRequestsAborted += 1;
                    return
                }
                if (t) {
                    if (t.code === Wp.TIMEOUT) {
                        this.handleTimeout_()
                    }
                    if (t.code === Wp.ABORTED) {
                        this.mediaRequestsAborted += 1
                    } else {
                        this.mediaRequestsErrored += 1
                    }
                    this.stopForError(t);
                    return
                }
                var a = this.pendingSegment_;
                this.saveBandwidthRelatedStats_(a.duration, i.stats);
                this.state = "APPENDING";
                this.trigger("appending");
                var o = a.segment;
                if (o.map) {
                    o.map.bytes = i.map.bytes
                }
                a.bytes = i.bytes;
                if (typeof s.WebVTT !== "function" && this.subtitlesTrack_ && this.subtitlesTrack_.tech_) {
                    var u;
                    var l = function e() {
                        n.subtitlesTrack_.tech_.off("vttjsloaded", u);
                        n.stopForError({
                            message: "Error loading vtt.js"
                        });
                        return
                    };
                    u = function e() {
                        n.subtitlesTrack_.tech_.off("vttjserror", l);
                        n.segmentRequestFinished_(t, i, r)
                    };
                    this.state = "WAITING_ON_VTTJS";
                    this.subtitlesTrack_.tech_.one("vttjsloaded", u);
                    this.subtitlesTrack_.tech_.one("vttjserror", l);
                    return
                }
                o.requested = true;
                try {
                    this.parseVTTCues_(a)
                } catch (e) {
                    this.stopForError({
                        message: e.message
                    });
                    return
                }
                this.updateTimeMapping_(a, this.syncController_.timelines[a.timeline], this.playlist_);
                if (a.cues.length) {
                    a.timingInfo = {
                        start: a.cues[0].startTime,
                        end: a.cues[a.cues.length - 1].endTime
                    }
                } else {
                    a.timingInfo = {
                        start: a.startOfSegment,
                        end: a.startOfSegment + a.duration
                    }
                }
                if (a.isSyncRequest) {
                    this.trigger("syncinfoupdate");
                    this.pendingSegment_ = null;
                    this.state = "READY";
                    return
                }
                a.byteLength = a.bytes.byteLength;
                this.mediaSecondsLoaded += o.duration;
                a.cues.forEach((function(e) {
                    n.subtitlesTrack_.addCue(n.featuresNativeTextTracks_ ? new s.VTTCue(e.startTime, e.endTime, e.text) : e)
                }));
                Dm(this.subtitlesTrack_);
                this.handleAppendsDone_()
            };
            i.handleData_ = function e() {};
            i.updateTimingInfoEnd_ = function e() {};
            i.parseVTTCues_ = function e(t) {
                var i;
                var r = false;
                if (typeof s.TextDecoder === "function") {
                    i = new s.TextDecoder("utf8")
                } else {
                    i = s.WebVTT.StringDecoder();
                    r = true
                }
                var n = new s.WebVTT.Parser(s, s.vttjs, i);
                t.cues = [];
                t.timestampmap = {
                    MPEGTS: 0,
                    LOCAL: 0
                };
                n.oncue = t.cues.push.bind(t.cues);
                n.ontimestampmap = function(e) {
                    t.timestampmap = e
                };
                n.onparsingerror = function(e) {
                    xd.log.warn("Error encountered when parsing cues: " + e.message)
                };
                if (t.segment.map) {
                    var a = t.segment.map.bytes;
                    if (r) {
                        a = fv(a)
                    }
                    n.parse(a)
                }
                var o = t.bytes;
                if (r) {
                    o = fv(o)
                }
                n.parse(o);
                n.flush()
            };
            i.updateTimeMapping_ = function e(t, i, r) {
                var n = t.segment;
                if (!i) {
                    return
                }
                if (!t.cues.length) {
                    n.empty = true;
                    return
                }
                var a = t.timestampmap;
                var s = a.MPEGTS / Cs - a.LOCAL + i.mapping;
                t.cues.forEach((function(e) {
                    e.startTime += s;
                    e.endTime += s
                }));
                if (!r.syncInfo) {
                    var o = t.cues[0].startTime;
                    var u = t.cues[t.cues.length - 1].startTime;
                    r.syncInfo = {
                        mediaSequence: r.mediaSequence + t.mediaIndex,
                        time: Math.min(o, u - n.duration)
                    }
                }
            };
            return t
        }(Jm);
        var pv = function e(t, i) {
            var r = t.cues;
            for (var n = 0; n < r.length; n++) {
                var a = r[n];
                if (i >= a.adStartTime && i <= a.adEndTime) {
                    return a
                }
            }
            return null
        };
        var mv = function e(t, i, r) {
            if (r === void 0) {
                r = 0
            }
            if (!t.segments) {
                return
            }
            var n = r;
            var a;
            for (var o = 0; o < t.segments.length; o++) {
                var u = t.segments[o];
                if (!a) {
                    a = pv(i, n + u.duration / 2)
                }
                if (a) {
                    if ("cueIn" in u) {
                        a.endTime = n;
                        a.adEndTime = n;
                        n += u.duration;
                        a = null;
                        continue
                    }
                    if (n < a.endTime) {
                        n += u.duration;
                        continue
                    }
                    a.endTime += u.duration
                } else {
                    if ("cueOut" in u) {
                        a = new s.VTTCue(n, n + u.duration, u.cueOut);
                        a.adStartTime = n;
                        a.adEndTime = n + parseFloat(u.cueOut);
                        i.addCue(a)
                    }
                    if ("cueOutCont" in u) {
                        var l = u.cueOutCont.split("/").map(parseFloat),
                            c = l[0],
                            f = l[1];
                        a = new s.VTTCue(n, n + u.duration, "");
                        a.adStartTime = n - c;
                        a.adEndTime = a.adStartTime + f;
                        i.addCue(a)
                    }
                }
                n += u.duration
            }
        };
        var vv = 86400;
        var gv = [{
            name: "VOD",
            run: function e(t, i, r, n, a) {
                if (r !== Infinity) {
                    var s = {
                        time: 0,
                        segmentIndex: 0,
                        partIndex: null
                    };
                    return s
                }
                return null
            }
        }, {
            name: "ProgramDateTime",
            run: function e(t, i, r, n, a) {
                if (!Object.keys(t.timelineToDatetimeMappings).length) {
                    return null
                }
                var s = null;
                var o = null;
                var u = $d(i);
                a = a || 0;
                for (var l = 0; l < u.length; l++) {
                    var c = i.endList || a === 0 ? l : u.length - (l + 1);
                    var f = u[c];
                    var d = f.segment;
                    var h = t.timelineToDatetimeMappings[d.timeline];
                    if (!h || !d.dateTimeObject) {
                        continue
                    }
                    var p = d.dateTimeObject.getTime() / 1e3;
                    var m = p + h;
                    if (d.parts && typeof f.partIndex === "number") {
                        for (var v = 0; v < f.partIndex; v++) {
                            m += d.parts[v].duration
                        }
                    }
                    var g = Math.abs(a - m);
                    if (o !== null && (g === 0 || o < g)) {
                        break
                    }
                    o = g;
                    s = {
                        time: m,
                        segmentIndex: f.segmentIndex,
                        partIndex: f.partIndex
                    }
                }
                return s
            }
        }, {
            name: "Segment",
            run: function e(t, i, r, n, a) {
                var s = null;
                var o = null;
                a = a || 0;
                var u = $d(i);
                for (var l = 0; l < u.length; l++) {
                    var c = i.endList || a === 0 ? l : u.length - (l + 1);
                    var f = u[c];
                    var d = f.segment;
                    var h = f.part && f.part.start || d && d.start;
                    if (d.timeline === n && typeof h !== "undefined") {
                        var p = Math.abs(a - h);
                        if (o !== null && o < p) {
                            break
                        }
                        if (!s || o === null || o >= p) {
                            o = p;
                            s = {
                                time: h,
                                segmentIndex: f.segmentIndex,
                                partIndex: f.partIndex
                            }
                        }
                    }
                }
                return s
            }
        }, {
            name: "Discontinuity",
            run: function e(t, i, r, n, a) {
                var s = null;
                a = a || 0;
                if (i.discontinuityStarts && i.discontinuityStarts.length) {
                    var o = null;
                    for (var u = 0; u < i.discontinuityStarts.length; u++) {
                        var l = i.discontinuityStarts[u];
                        var c = i.discontinuitySequence + u + 1;
                        var f = t.discontinuities[c];
                        if (f) {
                            var d = Math.abs(a - f.time);
                            if (o !== null && o < d) {
                                break
                            }
                            if (!s || o === null || o >= d) {
                                o = d;
                                s = {
                                    time: f.time,
                                    segmentIndex: l,
                                    partIndex: null
                                }
                            }
                        }
                    }
                }
                return s
            }
        }, {
            name: "Playlist",
            run: function e(t, i, r, n, a) {
                if (i.syncInfo) {
                    var s = {
                        time: i.syncInfo.time,
                        segmentIndex: i.syncInfo.mediaSequence - i.mediaSequence,
                        partIndex: null
                    };
                    return s
                }
                return null
            }
        }];
        var yv = function(e) {
            J(t, e);

            function t(t) {
                var i;
                i = e.call(this) || this;
                i.timelines = [];
                i.discontinuities = [];
                i.timelineToDatetimeMappings = {};
                i.logger_ = Nd("SyncController");
                return i
            }
            var i = t.prototype;
            i.getSyncPoint = function e(t, i, r, n) {
                var a = this.runStrategies_(t, i, r, n);
                if (!a.length) {
                    return null
                }
                return this.selectSyncPoint_(a, {
                    key: "time",
                    value: n
                })
            };
            i.getExpiredTime = function e(t, i) {
                if (!t || !t.segments) {
                    return null
                }
                var r = this.runStrategies_(t, i, t.discontinuitySequence, 0);
                if (!r.length) {
                    return null
                }
                var n = this.selectSyncPoint_(r, {
                    key: "segmentIndex",
                    value: 0
                });
                if (n.segmentIndex > 0) {
                    n.time *= -1
                }
                return Math.abs(n.time + nh({
                    defaultDuration: t.targetDuration,
                    durationList: t.segments,
                    startIndex: n.segmentIndex,
                    endIndex: 0
                }))
            };
            i.runStrategies_ = function e(t, i, r, n) {
                var a = [];
                for (var s = 0; s < gv.length; s++) {
                    var o = gv[s];
                    var u = o.run(this, t, i, r, n);
                    if (u) {
                        u.strategy = o.name;
                        a.push({
                            strategy: o.name,
                            syncPoint: u
                        })
                    }
                }
                return a
            };
            i.selectSyncPoint_ = function e(t, i) {
                var r = t[0].syncPoint;
                var n = Math.abs(t[0].syncPoint[i.key] - i.value);
                var a = t[0].strategy;
                for (var s = 1; s < t.length; s++) {
                    var o = Math.abs(t[s].syncPoint[i.key] - i.value);
                    if (o < n) {
                        n = o;
                        r = t[s].syncPoint;
                        a = t[s].strategy
                    }
                }
                this.logger_("syncPoint for [" + i.key + ": " + i.value + "] chosen with strategy" + (" [" + a + "]: [time:" + r.time + ",") + (" segmentIndex:" + r.segmentIndex) + (typeof r.partIndex === "number" ? ",partIndex:" + r.partIndex : "") + "]");
                return r
            };
            i.saveExpiredSegmentInfo = function e(t, i) {
                var r = i.mediaSequence - t.mediaSequence;
                if (r > vv) {
                    xd.log.warn("Not saving expired segment info. Media sequence gap " + r + " is too large.");
                    return
                }
                for (var n = r - 1; n >= 0; n--) {
                    var a = t.segments[n];
                    if (a && typeof a.start !== "undefined") {
                        i.syncInfo = {
                            mediaSequence: t.mediaSequence + n,
                            time: a.start
                        };
                        this.logger_("playlist refresh sync: [time:" + i.syncInfo.time + "," + (" mediaSequence: " + i.syncInfo.mediaSequence + "]"));
                        this.trigger("syncinfoupdate");
                        break
                    }
                }
            };
            i.setDateTimeMappingForStart = function e(t) {
                this.timelineToDatetimeMappings = {};
                if (t.segments && t.segments.length && t.segments[0].dateTimeObject) {
                    var i = t.segments[0];
                    var r = i.dateTimeObject.getTime() / 1e3;
                    this.timelineToDatetimeMappings[i.timeline] = -r
                }
            };
            i.saveSegmentTimingInfo = function e(t) {
                var i = t.segmentInfo,
                    r = t.shouldSaveTimelineMapping;
                var n = this.calculateSegmentTimeMapping_(i, i.timingInfo, r);
                var a = i.segment;
                if (n) {
                    this.saveDiscontinuitySyncInfo_(i);
                    if (!i.playlist.syncInfo) {
                        i.playlist.syncInfo = {
                            mediaSequence: i.playlist.mediaSequence + i.mediaIndex,
                            time: a.start
                        }
                    }
                }
                var s = a.dateTimeObject;
                if (a.discontinuity && r && s) {
                    this.timelineToDatetimeMappings[a.timeline] = -(s.getTime() / 1e3)
                }
            };
            i.timestampOffsetForTimeline = function e(t) {
                if (typeof this.timelines[t] === "undefined") {
                    return null
                }
                return this.timelines[t].time
            };
            i.mappingForTimeline = function e(t) {
                if (typeof this.timelines[t] === "undefined") {
                    return null
                }
                return this.timelines[t].mapping
            };
            i.calculateSegmentTimeMapping_ = function e(t, i, r) {
                var n = t.segment;
                var a = t.part;
                var s = this.timelines[t.timeline];
                var o;
                var u;
                if (typeof t.timestampOffset === "number") {
                    s = {
                        time: t.startOfSegment,
                        mapping: t.startOfSegment - i.start
                    };
                    if (r) {
                        this.timelines[t.timeline] = s;
                        this.trigger("timestampoffset");
                        this.logger_("time mapping for timeline " + t.timeline + ": " + ("[time: " + s.time + "] [mapping: " + s.mapping + "]"))
                    }
                    o = t.startOfSegment;
                    u = i.end + s.mapping
                } else if (s) {
                    o = i.start + s.mapping;
                    u = i.end + s.mapping
                } else {
                    return false
                }
                if (a) {
                    a.start = o;
                    a.end = u
                }
                if (!n.start || o < n.start) {
                    n.start = o
                }
                n.end = u;
                return true
            };
            i.saveDiscontinuitySyncInfo_ = function e(t) {
                var i = t.playlist;
                var r = t.segment;
                if (r.discontinuity) {
                    this.discontinuities[r.timeline] = {
                        time: r.start,
                        accuracy: 0
                    }
                } else if (i.discontinuityStarts && i.discontinuityStarts.length) {
                    for (var n = 0; n < i.discontinuityStarts.length; n++) {
                        var a = i.discontinuityStarts[n];
                        var s = i.discontinuitySequence + n + 1;
                        var o = a - t.mediaIndex;
                        var u = Math.abs(o);
                        if (!this.discontinuities[s] || this.discontinuities[s].accuracy > u) {
                            var l = void 0;
                            if (o < 0) {
                                l = r.start - nh({
                                    defaultDuration: i.targetDuration,
                                    durationList: i.segments,
                                    startIndex: t.mediaIndex,
                                    endIndex: a
                                })
                            } else {
                                l = r.end + nh({
                                    defaultDuration: i.targetDuration,
                                    durationList: i.segments,
                                    startIndex: t.mediaIndex + 1,
                                    endIndex: a
                                })
                            }
                            this.discontinuities[s] = {
                                time: l,
                                accuracy: u
                            }
                        }
                    }
                }
            };
            i.dispose = function e() {
                this.trigger("dispose");
                this.off()
            };
            return t
        }(xd.EventTarget);
        var _v = function(e) {
            J(t, e);

            function t() {
                var t;
                t = e.call(this) || this;
                t.pendingTimelineChanges_ = {};
                t.lastTimelineChanges_ = {};
                return t
            }
            var i = t.prototype;
            i.clearPendingTimelineChange = function e(t) {
                this.pendingTimelineChanges_[t] = null;
                this.trigger("pendingtimelinechange")
            };
            i.pendingTimelineChange = function e(t) {
                var i = t.type,
                    r = t.from,
                    n = t.to;
                if (typeof r === "number" && typeof n === "number") {
                    this.pendingTimelineChanges_[i] = {
                        type: i,
                        from: r,
                        to: n
                    };
                    this.trigger("pendingtimelinechange")
                }
                return this.pendingTimelineChanges_[i]
            };
            i.lastTimelineChange = function e(t) {
                var i = t.type,
                    r = t.from,
                    n = t.to;
                if (typeof r === "number" && typeof n === "number") {
                    this.lastTimelineChanges_[i] = {
                        type: i,
                        from: r,
                        to: n
                    };
                    delete this.pendingTimelineChanges_[i];
                    this.trigger("timelinechange")
                }
                return this.lastTimelineChanges_[i]
            };
            i.dispose = function e() {
                this.trigger("dispose");
                this.pendingTimelineChanges_ = {};
                this.lastTimelineChanges_ = {};
                this.off()
            };
            return t
        }(xd.EventTarget);
        var bv = Ip(Ap((function() {
            var e = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};

            function t(e, t, r) {
                return r = {
                    path: t,
                    exports: {},
                    require: function e(t, n) {
                        return i(t, n === undefined || n === null ? r.path : n)
                    }
                }, e(r, r.exports), r.exports
            }

            function i() {
                throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs")
            }
            var r = t((function(e) {
                function t(e, t) {
                    for (var i = 0; i < t.length; i++) {
                        var r = t[i];
                        r.enumerable = r.enumerable || false;
                        r.configurable = true;
                        if ("value" in r) r.writable = true;
                        Object.defineProperty(e, r.key, r)
                    }
                }

                function i(e, i, r) {
                    if (i) t(e.prototype, i);
                    if (r) t(e, r);
                    return e
                }
                e.exports = i;
                e.exports["default"] = e.exports, e.exports.__esModule = true
            }));
            var n = t((function(e) {
                function t(i, r) {
                    e.exports = t = Object.setPrototypeOf || function e(t, i) {
                        t.__proto__ = i;
                        return t
                    };
                    e.exports["default"] = e.exports, e.exports.__esModule = true;
                    return t(i, r)
                }
                e.exports = t;
                e.exports["default"] = e.exports, e.exports.__esModule = true
            }));
            var a = t((function(e) {
                function t(e, t) {
                    e.prototype = Object.create(t.prototype);
                    e.prototype.constructor = e;
                    n(e, t)
                }
                e.exports = t;
                e.exports["default"] = e.exports, e.exports.__esModule = true
            }));
            var s = function() {
                function e() {
                    this.listeners = {}
                }
                var t = e.prototype;
                t.on = function e(t, i) {
                    if (!this.listeners[t]) {
                        this.listeners[t] = []
                    }
                    this.listeners[t].push(i)
                };
                t.off = function e(t, i) {
                    if (!this.listeners[t]) {
                        return false
                    }
                    var r = this.listeners[t].indexOf(i);
                    this.listeners[t] = this.listeners[t].slice(0);
                    this.listeners[t].splice(r, 1);
                    return r > -1
                };
                t.trigger = function e(t) {
                    var i = this.listeners[t];
                    if (!i) {
                        return
                    }
                    if (arguments.length === 2) {
                        var r = i.length;
                        for (var n = 0; n < r; ++n) {
                            i[n].call(this, arguments[1])
                        }
                    } else {
                        var a = Array.prototype.slice.call(arguments, 1);
                        var s = i.length;
                        for (var o = 0; o < s; ++o) {
                            i[o].apply(this, a)
                        }
                    }
                };
                t.dispose = function e() {
                    this.listeners = {}
                };
                t.pipe = function e(t) {
                    this.on("data", (function(e) {
                        t.push(e)
                    }))
                };
                return e
            }();

            function o(e) {
                return e.subarray(0, e.byteLength - e[e.byteLength - 1])
            }
            var u = function e() {
                var t = [
                    [
                        [],
                        [],
                        [],
                        [],
                        []
                    ],
                    [
                        [],
                        [],
                        [],
                        [],
                        []
                    ]
                ];
                var i = t[0];
                var r = t[1];
                var n = i[4];
                var a = r[4];
                var s;
                var o;
                var u;
                var l = [];
                var c = [];
                var f;
                var d;
                var h;
                var p;
                var m;
                var v;
                for (s = 0; s < 256; s++) {
                    c[(l[s] = s << 1 ^ (s >> 7) * 283) ^ s] = s
                }
                for (o = u = 0; !n[o]; o ^= f || 1, u = c[u] || 1) {
                    p = u ^ u << 1 ^ u << 2 ^ u << 3 ^ u << 4;
                    p = p >> 8 ^ p & 255 ^ 99;
                    n[o] = p;
                    a[p] = o;
                    h = l[d = l[f = l[o]]];
                    v = h * 16843009 ^ d * 65537 ^ f * 257 ^ o * 16843008;
                    m = l[p] * 257 ^ p * 16843008;
                    for (s = 0; s < 4; s++) {
                        i[s][o] = m = m << 24 ^ m >>> 8;
                        r[s][p] = v = v << 24 ^ v >>> 8
                    }
                }
                for (s = 0; s < 5; s++) {
                    i[s] = i[s].slice(0);
                    r[s] = r[s].slice(0)
                }
                return t
            };
            var l = null;
            var c = function() {
                function e(e) {
                    if (!l) {
                        l = u()
                    }
                    this._tables = [
                        [l[0][0].slice(), l[0][1].slice(), l[0][2].slice(), l[0][3].slice(), l[0][4].slice()],
                        [l[1][0].slice(), l[1][1].slice(), l[1][2].slice(), l[1][3].slice(), l[1][4].slice()]
                    ];
                    var t;
                    var i;
                    var r;
                    var n = this._tables[0][4];
                    var a = this._tables[1];
                    var s = e.length;
                    var o = 1;
                    if (s !== 4 && s !== 6 && s !== 8) {
                        throw new Error("Invalid aes key size")
                    }
                    var c = e.slice(0);
                    var f = [];
                    this._key = [c, f];
                    for (t = s; t < 4 * s + 28; t++) {
                        r = c[t - 1];
                        if (t % s === 0 || s === 8 && t % s === 4) {
                            r = n[r >>> 24] << 24 ^ n[r >> 16 & 255] << 16 ^ n[r >> 8 & 255] << 8 ^ n[r & 255];
                            if (t % s === 0) {
                                r = r << 8 ^ r >>> 24 ^ o << 24;
                                o = o << 1 ^ (o >> 7) * 283
                            }
                        }
                        c[t] = c[t - s] ^ r
                    }
                    for (i = 0; t; i++, t--) {
                        r = c[i & 3 ? t : t - 4];
                        if (t <= 4 || i < 4) {
                            f[i] = r
                        } else {
                            f[i] = a[0][n[r >>> 24]] ^ a[1][n[r >> 16 & 255]] ^ a[2][n[r >> 8 & 255]] ^ a[3][n[r & 255]]
                        }
                    }
                }
                var t = e.prototype;
                t.decrypt = function e(t, i, r, n, a, s) {
                    var o = this._key[1];
                    var u = t ^ o[0];
                    var l = n ^ o[1];
                    var c = r ^ o[2];
                    var f = i ^ o[3];
                    var d;
                    var h;
                    var p;
                    var m = o.length / 4 - 2;
                    var v;
                    var g = 4;
                    var y = this._tables[1];
                    var _ = y[0];
                    var b = y[1];
                    var T = y[2];
                    var S = y[3];
                    var E = y[4];
                    for (v = 0; v < m; v++) {
                        d = _[u >>> 24] ^ b[l >> 16 & 255] ^ T[c >> 8 & 255] ^ S[f & 255] ^ o[g];
                        h = _[l >>> 24] ^ b[c >> 16 & 255] ^ T[f >> 8 & 255] ^ S[u & 255] ^ o[g + 1];
                        p = _[c >>> 24] ^ b[f >> 16 & 255] ^ T[u >> 8 & 255] ^ S[l & 255] ^ o[g + 2];
                        f = _[f >>> 24] ^ b[u >> 16 & 255] ^ T[l >> 8 & 255] ^ S[c & 255] ^ o[g + 3];
                        g += 4;
                        u = d;
                        l = h;
                        c = p
                    }
                    for (v = 0; v < 4; v++) {
                        a[(3 & -v) + s] = E[u >>> 24] << 24 ^ E[l >> 16 & 255] << 16 ^ E[c >> 8 & 255] << 8 ^ E[f & 255] ^ o[g++];
                        d = u;
                        u = l;
                        l = c;
                        c = f;
                        f = d
                    }
                };
                return e
            }();
            var f = function(e) {
                a(t, e);

                function t() {
                    var t;
                    t = e.call(this, s) || this;
                    t.jobs = [];
                    t.delay = 1;
                    t.timeout_ = null;
                    return t
                }
                var i = t.prototype;
                i.processJob_ = function e() {
                    this.jobs.shift()();
                    if (this.jobs.length) {
                        this.timeout_ = setTimeout(this.processJob_.bind(this), this.delay)
                    } else {
                        this.timeout_ = null
                    }
                };
                i.push = function e(t) {
                    this.jobs.push(t);
                    if (!this.timeout_) {
                        this.timeout_ = setTimeout(this.processJob_.bind(this), this.delay)
                    }
                };
                return t
            }(s);
            var d = function e(t) {
                return t << 24 | (t & 65280) << 8 | (t & 16711680) >> 8 | t >>> 24
            };
            var h = function e(t, i, r) {
                var n = new Int32Array(t.buffer, t.byteOffset, t.byteLength >> 2);
                var a = new c(Array.prototype.slice.call(i));
                var s = new Uint8Array(t.byteLength);
                var o = new Int32Array(s.buffer);
                var u;
                var l;
                var f;
                var h;
                var p;
                var m;
                var v;
                var g;
                var y;
                u = r[0];
                l = r[1];
                f = r[2];
                h = r[3];
                for (y = 0; y < n.length; y += 4) {
                    p = d(n[y]);
                    m = d(n[y + 1]);
                    v = d(n[y + 2]);
                    g = d(n[y + 3]);
                    a.decrypt(p, m, v, g, o, y);
                    o[y] = d(o[y] ^ u);
                    o[y + 1] = d(o[y + 1] ^ l);
                    o[y + 2] = d(o[y + 2] ^ f);
                    o[y + 3] = d(o[y + 3] ^ h);
                    u = p;
                    l = m;
                    f = v;
                    h = g
                }
                return s
            };
            var p = function() {
                function e(t, i, r, n) {
                    var a = e.STEP;
                    var s = new Int32Array(t.buffer);
                    var u = new Uint8Array(t.byteLength);
                    var l = 0;
                    this.asyncStream_ = new f;
                    this.asyncStream_.push(this.decryptChunk_(s.subarray(l, l + a), i, r, u));
                    for (l = a; l < s.length; l += a) {
                        r = new Uint32Array([d(s[l - 4]), d(s[l - 3]), d(s[l - 2]), d(s[l - 1])]);
                        this.asyncStream_.push(this.decryptChunk_(s.subarray(l, l + a), i, r, u))
                    }
                    this.asyncStream_.push((function() {
                        n(null, o(u))
                    }))
                }
                var t = e.prototype;
                t.decryptChunk_ = function e(t, i, r, n) {
                    return function() {
                        var e = h(t, i, r);
                        n.set(e, t.byteOffset)
                    }
                };
                r(e, null, [{
                    key: "STEP",
                    get: function e() {
                        return 32e3
                    }
                }]);
                return e
            }();
            var m;
            if (typeof window !== "undefined") {
                m = window
            } else if (typeof e !== "undefined") {
                m = e
            } else if (typeof self !== "undefined") {
                m = self
            } else {
                m = {}
            }
            var v = m;
            var g = function e(t) {
                if (ArrayBuffer.isView === "function") {
                    return ArrayBuffer.isView(t)
                }
                return t && t.buffer instanceof ArrayBuffer
            };
            var y = v.BigInt || Number;
            [y("0x1"), y("0x100"), y("0x10000"), y("0x1000000"), y("0x100000000"), y("0x10000000000"), y("0x1000000000000"), y("0x100000000000000"), y("0x10000000000000000")];
            var _ = function e(t) {
                var i = {};
                Object.keys(t).forEach((function(e) {
                    var r = t[e];
                    if (g(r)) {
                        i[e] = {
                            bytes: r.buffer,
                            byteOffset: r.byteOffset,
                            byteLength: r.byteLength
                        }
                    } else {
                        i[e] = r
                    }
                }));
                return i
            };
            self.onmessage = function(e) {
                var t = e.data;
                var i = new Uint8Array(t.encrypted.bytes, t.encrypted.byteOffset, t.encrypted.byteLength);
                var r = new Uint32Array(t.key.bytes, t.key.byteOffset, t.key.byteLength / 4);
                var n = new Uint32Array(t.iv.bytes, t.iv.byteOffset, t.iv.byteLength / 4);
                new p(i, r, n, (function(e, i) {
                    self.postMessage(_({
                        source: t.source,
                        decrypted: i
                    }), [i.buffer])
                }))
            }
        })));
        var Tv = Cp(bv);
        var Sv = function e(t) {
            var i = t["default"] ? "main" : "alternative";
            if (t.characteristics && t.characteristics.indexOf("public.accessibility.describes-video") >= 0) {
                i = "main-desc"
            }
            return i
        };
        var Ev = function e(t, i) {
            t.abort();
            t.pause();
            if (i && i.activePlaylistLoader) {
                i.activePlaylistLoader.pause();
                i.activePlaylistLoader = null
            }
        };
        var wv = function e(t, i) {
            i.activePlaylistLoader = t;
            t.load()
        };
        var kv = function e(t, i) {
            return function() {
                var e = i.segmentLoaders,
                    r = e[t],
                    n = e.main,
                    a = i.mediaTypes[t];
                var s = a.activeTrack();
                var o = a.getActiveGroup();
                var u = a.activePlaylistLoader;
                var l = a.lastGroup_;
                if (o && l && o.id === l.id) {
                    return
                }
                a.lastGroup_ = o;
                a.lastTrack_ = s;
                Ev(r, a);
                if (!o || o.isMasterPlaylist) {
                    return
                }
                if (!o.playlistLoader) {
                    if (u) {
                        n.resetEverything()
                    }
                    return
                }
                r.resyncLoader();
                wv(o.playlistLoader, a)
            }
        };
        var Cv = function e(t, i) {
            return function() {
                var e = i.segmentLoaders[t],
                    r = i.mediaTypes[t];
                r.lastGroup_ = null;
                e.abort();
                e.pause()
            }
        };
        var Iv = function e(t, i) {
            return function() {
                var e = i.masterPlaylistLoader,
                    r = i.segmentLoaders,
                    n = r[t],
                    a = r.main,
                    s = i.mediaTypes[t];
                var o = s.activeTrack();
                var u = s.getActiveGroup();
                var l = s.activePlaylistLoader;
                var c = s.lastTrack_;
                if (c && o && c.id === o.id) {
                    return
                }
                s.lastGroup_ = u;
                s.lastTrack_ = o;
                Ev(n, s);
                if (!u) {
                    return
                }
                if (u.isMasterPlaylist) {
                    if (!o || !c || o.id === c.id) {
                        return
                    }
                    var f = i.vhs.masterPlaylistController_;
                    var d = f.selectPlaylist();
                    if (f.media() === d) {
                        return
                    }
                    s.logger_("track change. Switching master audio from " + c.id + " to " + o.id);
                    e.pause();
                    a.resetEverything();
                    f.fastQualityChange_(d);
                    return
                }
                if (t === "AUDIO") {
                    if (!u.playlistLoader) {
                        a.setAudio(true);
                        a.resetEverything();
                        return
                    }
                    n.setAudio(true);
                    a.setAudio(false)
                }
                if (l === u.playlistLoader) {
                    wv(u.playlistLoader, s);
                    return
                }
                if (n.track) {
                    n.track(o)
                }
                n.resetEverything();
                wv(u.playlistLoader, s)
            }
        };
        var Av = {
            AUDIO: function e(t, i) {
                return function() {
                    var e = i.segmentLoaders[t],
                        r = i.mediaTypes[t],
                        n = i.blacklistCurrentPlaylist;
                    Ev(e, r);
                    var a = r.activeTrack();
                    var s = r.activeGroup();
                    var o = (s.filter((function(e) {
                        return e["default"]
                    }))[0] || s[0]).id;
                    var u = r.tracks[o];
                    if (a === u) {
                        n({
                            message: "Problem encountered loading the default audio track."
                        });
                        return
                    }
                    xd.log.warn("Problem encountered loading the alternate audio track." + "Switching back to default.");
                    for (var l in r.tracks) {
                        r.tracks[l].enabled = r.tracks[l] === u
                    }
                    r.onTrackChanged()
                }
            },
            SUBTITLES: function e(t, i) {
                return function() {
                    var e = i.segmentLoaders[t],
                        r = i.mediaTypes[t];
                    xd.log.warn("Problem encountered loading the subtitle track." + "Disabling subtitle track.");
                    Ev(e, r);
                    var n = r.activeTrack();
                    if (n) {
                        n.mode = "disabled"
                    }
                    r.onTrackChanged()
                }
            }
        };
        var xv = {
            AUDIO: function e(t, i, r) {
                if (!i) {
                    return
                }
                var n = r.tech,
                    a = r.requestOptions,
                    s = r.segmentLoaders[t];
                i.on("loadedmetadata", (function() {
                    var e = i.media();
                    s.playlist(e, a);
                    if (!n.paused() || e.endList && n.preload() !== "none") {
                        s.load()
                    }
                }));
                i.on("loadedplaylist", (function() {
                    s.playlist(i.media(), a);
                    if (!n.paused()) {
                        s.load()
                    }
                }));
                i.on("error", Av[t](t, r))
            },
            SUBTITLES: function e(t, i, r) {
                var n = r.tech,
                    a = r.requestOptions,
                    s = r.segmentLoaders[t],
                    o = r.mediaTypes[t];
                i.on("loadedmetadata", (function() {
                    var e = i.media();
                    s.playlist(e, a);
                    s.track(o.activeTrack());
                    if (!n.paused() || e.endList && n.preload() !== "none") {
                        s.load()
                    }
                }));
                i.on("loadedplaylist", (function() {
                    s.playlist(i.media(), a);
                    if (!n.paused()) {
                        s.load()
                    }
                }));
                i.on("error", Av[t](t, r))
            }
        };
        var Pv = {
            AUDIO: function e(t, i) {
                var r = i.vhs,
                    n = i.sourceType,
                    a = i.segmentLoaders[t],
                    s = i.requestOptions,
                    o = i.master.mediaGroups,
                    u = i.mediaTypes[t],
                    l = u.groups,
                    c = u.tracks,
                    f = u.logger_,
                    d = i.masterPlaylistLoader;
                var h = yh(d.master);
                if (!o[t] || Object.keys(o[t]).length === 0) {
                    o[t] = {
                        main: {
                            default: {
                                default: true
                            }
                        }
                    };
                    if (h) {
                        o[t].main["default"].playlists = d.master.playlists
                    }
                }
                for (var p in o[t]) {
                    if (!l[p]) {
                        l[p] = []
                    }
                    for (var m in o[t][p]) {
                        var v = o[t][p][m];
                        var g = void 0;
                        if (h) {
                            f("AUDIO group '" + p + "' label '" + m + "' is a master playlist");
                            v.isMasterPlaylist = true;
                            g = null
                        } else if (n === "vhs-json" && v.playlists) {
                            g = new Fh(v.playlists[0], r, s)
                        } else if (v.resolvedUri) {
                            g = new Fh(v.resolvedUri, r, s)
                        } else if (v.playlists && n === "dash") {
                            g = new Tp(v.playlists[0], r, s, d)
                        } else {
                            g = null
                        }
                        v = xd.mergeOptions({
                            id: m,
                            playlistLoader: g
                        }, v);
                        xv[t](t, v.playlistLoader, i);
                        l[p].push(v);
                        if (typeof c[m] === "undefined") {
                            var y = new xd.AudioTrack({
                                id: m,
                                kind: Sv(v),
                                enabled: false,
                                language: v.language,
                                default: v["default"],
                                label: m
                            });
                            c[m] = y
                        }
                    }
                }
                a.on("error", Av[t](t, i))
            },
            SUBTITLES: function e(t, i) {
                var r = i.tech,
                    n = i.vhs,
                    a = i.sourceType,
                    s = i.segmentLoaders[t],
                    o = i.requestOptions,
                    u = i.master.mediaGroups,
                    l = i.mediaTypes[t],
                    c = l.groups,
                    f = l.tracks,
                    d = i.masterPlaylistLoader;
                for (var h in u[t]) {
                    if (!c[h]) {
                        c[h] = []
                    }
                    for (var p in u[t][h]) {
                        if (u[t][h][p].forced) {
                            continue
                        }
                        var m = u[t][h][p];
                        var v = void 0;
                        if (a === "hls") {
                            v = new Fh(m.resolvedUri, n, o)
                        } else if (a === "dash") {
                            var g = m.playlists.filter((function(e) {
                                return e.excludeUntil !== Infinity
                            }));
                            if (!g.length) {
                                return
                            }
                            v = new Tp(m.playlists[0], n, o, d)
                        } else if (a === "vhs-json") {
                            v = new Fh(m.playlists ? m.playlists[0] : m.resolvedUri, n, o)
                        }
                        m = xd.mergeOptions({
                            id: p,
                            playlistLoader: v
                        }, m);
                        xv[t](t, m.playlistLoader, i);
                        c[h].push(m);
                        if (typeof f[p] === "undefined") {
                            var y = r.addRemoteTextTrack({
                                id: p,
                                kind: "subtitles",
                                default: m["default"] && m.autoselect,
                                language: m.language,
                                label: p
                            }, false).track;
                            f[p] = y
                        }
                    }
                }
                s.on("error", Av[t](t, i))
            },
            "CLOSED-CAPTIONS": function e(t, i) {
                var r = i.tech,
                    n = i.master.mediaGroups,
                    a = i.mediaTypes[t],
                    s = a.groups,
                    o = a.tracks;
                for (var u in n[t]) {
                    if (!s[u]) {
                        s[u] = []
                    }
                    for (var l in n[t][u]) {
                        var c = n[t][u][l];
                        if (!/^(?:CC|SERVICE)/.test(c.instreamId)) {
                            continue
                        }
                        var f = r.options_.vhs && r.options_.vhs.captionServices || {};
                        var d = {
                            label: l,
                            language: c.language,
                            instreamId: c.instreamId,
                            default: c["default"] && c.autoselect
                        };
                        if (f[d.instreamId]) {
                            d = xd.mergeOptions(d, f[d.instreamId])
                        }
                        if (d["default"] === undefined) {
                            delete d["default"]
                        }
                        s[u].push(xd.mergeOptions({
                            id: l
                        }, c));
                        if (typeof o[l] === "undefined") {
                            var h = r.addRemoteTextTrack({
                                id: d.instreamId,
                                kind: "captions",
                                default: d["default"],
                                language: d.language,
                                label: d.label
                            }, false).track;
                            o[l] = h
                        }
                    }
                }
            }
        };
        var Ov = function e(t, i) {
            for (var r = 0; r < t.length; r++) {
                if (vh(i, t[r])) {
                    return true
                }
                if (t[r].playlists && e(t[r].playlists, i)) {
                    return true
                }
            }
            return false
        };
        var Dv = function e(t, i) {
            return function(e) {
                var r = i.masterPlaylistLoader,
                    n = i.mediaTypes[t].groups;
                var a = r.media();
                if (!a) {
                    return null
                }
                var s = null;
                if (a.attributes[t]) {
                    s = n[a.attributes[t]]
                }
                var o = Object.keys(n);
                if (!s) {
                    if (t === "AUDIO" && o.length > 1 && yh(i.master)) {
                        for (var u = 0; u < o.length; u++) {
                            var l = n[o[u]];
                            if (Ov(l, a)) {
                                s = l;
                                break
                            }
                        }
                    } else if (n.main) {
                        s = n.main
                    } else if (o.length === 1) {
                        s = n[o[0]]
                    }
                }
                if (typeof e === "undefined") {
                    return s
                }
                if (e === null || !s) {
                    return null
                }
                return s.filter((function(t) {
                    return t.id === e.id
                }))[0] || null
            }
        };
        var Lv = {
            AUDIO: function e(t, i) {
                return function() {
                    var e = i.mediaTypes[t].tracks;
                    for (var r in e) {
                        if (e[r].enabled) {
                            return e[r]
                        }
                    }
                    return null
                }
            },
            SUBTITLES: function e(t, i) {
                return function() {
                    var e = i.mediaTypes[t].tracks;
                    for (var r in e) {
                        if (e[r].mode === "showing" || e[r].mode === "hidden") {
                            return e[r]
                        }
                    }
                    return null
                }
            }
        };
        var Nv = function e(t, i) {
            var r = i.mediaTypes;
            return function() {
                var e = r[t].activeTrack();
                if (!e) {
                    return null
                }
                return r[t].activeGroup(e)
            }
        };
        var Rv = function e(t) {
            ["AUDIO", "SUBTITLES", "CLOSED-CAPTIONS"].forEach((function(e) {
                Pv[e](e, t)
            }));
            var i = t.mediaTypes,
                r = t.masterPlaylistLoader,
                n = t.tech,
                a = t.vhs,
                s = t.segmentLoaders,
                o = s["AUDIO"],
                u = s.main;
            ["AUDIO", "SUBTITLES"].forEach((function(e) {
                i[e].activeGroup = Dv(e, t);
                i[e].activeTrack = Lv[e](e, t);
                i[e].onGroupChanged = kv(e, t);
                i[e].onGroupChanging = Cv(e, t);
                i[e].onTrackChanged = Iv(e, t);
                i[e].getActiveGroup = Nv(e, t)
            }));
            var l = i.AUDIO.activeGroup();
            if (l) {
                var c = (l.filter((function(e) {
                    return e["default"]
                }))[0] || l[0]).id;
                i.AUDIO.tracks[c].enabled = true;
                i.AUDIO.onGroupChanged();
                i.AUDIO.onTrackChanged();
                var f = i.AUDIO.getActiveGroup();
                if (!f.playlistLoader) {
                    u.setAudio(true)
                } else {
                    u.setAudio(false);
                    o.setAudio(true)
                }
            }
            r.on("mediachange", (function() {
                ["AUDIO", "SUBTITLES"].forEach((function(e) {
                    return i[e].onGroupChanged()
                }))
            }));
            r.on("mediachanging", (function() {
                ["AUDIO", "SUBTITLES"].forEach((function(e) {
                    return i[e].onGroupChanging()
                }))
            }));
            var d = function e() {
                i.AUDIO.onTrackChanged();
                n.trigger({
                    type: "usage",
                    name: "vhs-audio-change"
                });
                n.trigger({
                    type: "usage",
                    name: "hls-audio-change"
                })
            };
            n.audioTracks().addEventListener("change", d);
            n.remoteTextTracks().addEventListener("change", i.SUBTITLES.onTrackChanged);
            a.on("dispose", (function() {
                n.audioTracks().removeEventListener("change", d);
                n.remoteTextTracks().removeEventListener("change", i.SUBTITLES.onTrackChanged)
            }));
            n.clearTracks("audio");
            for (var h in i.AUDIO.tracks) {
                n.audioTracks().addTrack(i.AUDIO.tracks[h])
            }
        };
        var Mv = function e() {
            var t = {};
            ["AUDIO", "SUBTITLES", "CLOSED-CAPTIONS"].forEach((function(e) {
                t[e] = {
                    groups: {},
                    tracks: {},
                    activePlaylistLoader: null,
                    activeGroup: Zm,
                    activeTrack: Zm,
                    getActiveGroup: Zm,
                    onGroupChanged: Zm,
                    onTrackChanged: Zm,
                    lastTrack_: null,
                    logger_: Nd("MediaGroups[" + e + "]")
                }
            }));
            return t
        };
        var Uv = 60 * 2;
        var Bv;
        var Fv = ["mediaRequests", "mediaRequestsAborted", "mediaRequestsTimedout", "mediaRequestsErrored", "mediaTransferDuration", "mediaBytesTransferred", "mediaAppends"];
        var jv = function e(t) {
            return this.audioSegmentLoader_[t] + this.mainSegmentLoader_[t]
        };
        var Hv = function e(t) {
            var i = t.currentPlaylist,
                r = t.buffered,
                n = t.currentTime,
                a = t.nextPlaylist,
                s = t.bufferLowWaterLine,
                o = t.bufferHighWaterLine,
                u = t.duration,
                l = t.experimentalBufferBasedABR,
                c = t.log;
            if (!a) {
                xd.log.warn("We received no playlist to switch to. Please check your stream.");
                return false
            }
            var f = "allowing switch " + (i && i.id || "null") + " -> " + a.id;
            if (!i) {
                c(f + " as current playlist is not set");
                return true
            }
            if (a.id === i.id) {
                return false
            }
            var d = Boolean(Bd(r, n).length);
            if (!i.endList) {
                if (!d && typeof i.partTargetDuration === "number") {
                    c("not " + f + " as current playlist is live llhls, but currentTime isn't in buffered.");
                    return false
                }
                c(f + " as current playlist is live");
                return true
            }
            var h = zd(r, n);
            var p = l ? Sp.EXPERIMENTAL_MAX_BUFFER_LOW_WATER_LINE : Sp.MAX_BUFFER_LOW_WATER_LINE;
            if (u < p) {
                c(f + " as duration < max low water line (" + u + " < " + p + ")");
                return true
            }
            var m = a.attributes.BANDWIDTH;
            var v = i.attributes.BANDWIDTH;
            if (m < v && (!l || h < o)) {
                var g = f + " as next bandwidth < current bandwidth (" + m + " < " + v + ")";
                if (l) {
                    g += " and forwardBuffer < bufferHighWaterLine (" + h + " < " + o + ")"
                }
                c(g);
                return true
            }
            if ((!l || m > v) && h >= s) {
                var y = f + " as forwardBuffer >= bufferLowWaterLine (" + h + " >= " + s + ")";
                if (l) {
                    y += " and next bandwidth > current bandwidth (" + m + " > " + v + ")"
                }
                c(y);
                return true
            }
            c("not " + f + " as no switching criteria met");
            return false
        };
        var qv = function(e) {
            J(t, e);

            function t(t) {
                var i;
                i = e.call(this) || this;
                var r = t.src,
                    n = t.handleManifestRedirects,
                    a = t.withCredentials,
                    o = t.tech,
                    u = t.bandwidth,
                    l = t.externVhs,
                    c = t.useCueTags,
                    f = t.blacklistDuration,
                    d = t.enableLowInitialPlaylist,
                    h = t.sourceType,
                    p = t.cacheEncryptionKeys,
                    m = t.experimentalBufferBasedABR,
                    v = t.experimentalLeastPixelDiffSelector,
                    g = t.captionServices;
                if (!r) {
                    throw new Error("A non-empty playlist URL or JSON manifest string is required")
                }
                var y = t.maxPlaylistRetries;
                if (y === null || typeof y === "undefined") {
                    y = Infinity
                }
                Bv = l;
                i.experimentalBufferBasedABR = Boolean(m);
                i.experimentalLeastPixelDiffSelector = Boolean(v);
                i.withCredentials = a;
                i.tech_ = o;
                i.vhs_ = o.vhs;
                i.sourceType_ = h;
                i.useCueTags_ = c;
                i.blacklistDuration = f;
                i.maxPlaylistRetries = y;
                i.enableLowInitialPlaylist = d;
                if (i.useCueTags_) {
                    i.cueTagsTrack_ = i.tech_.addTextTrack("metadata", "ad-cues");
                    i.cueTagsTrack_.inBandMetadataTrackDispatchType = ""
                }
                i.requestOptions_ = {
                    withCredentials: a,
                    handleManifestRedirects: n,
                    maxPlaylistRetries: y,
                    timeout: null
                };
                i.on("error", i.pauseLoading);
                i.mediaTypes_ = Mv();
                i.mediaSource = new s.MediaSource;
                i.handleDurationChange_ = i.handleDurationChange_.bind(Y(i));
                i.handleSourceOpen_ = i.handleSourceOpen_.bind(Y(i));
                i.handleSourceEnded_ = i.handleSourceEnded_.bind(Y(i));
                i.mediaSource.addEventListener("durationchange", i.handleDurationChange_);
                i.mediaSource.addEventListener("sourceopen", i.handleSourceOpen_);
                i.mediaSource.addEventListener("sourceended", i.handleSourceEnded_);
                i.seekable_ = xd.createTimeRanges();
                i.hasPlayed_ = false;
                i.syncController_ = new yv(t);
                i.segmentMetadataTrack_ = o.addRemoteTextTrack({
                    kind: "metadata",
                    label: "segment-metadata"
                }, false).track;
                i.decrypter_ = new Tv;
                i.sourceUpdater_ = new cv(i.mediaSource);
                i.inbandTextTracks_ = {};
                i.timelineChangeController_ = new _v;
                var _ = {
                    vhs: i.vhs_,
                    parse708captions: t.parse708captions,
                    useDtsForTimestampOffset: t.useDtsForTimestampOffset,
                    captionServices: g,
                    mediaSource: i.mediaSource,
                    currentTime: i.tech_.currentTime.bind(i.tech_),
                    seekable: function e() {
                        return i.seekable()
                    },
                    seeking: function e() {
                        return i.tech_.seeking()
                    },
                    duration: function e() {
                        return i.duration()
                    },
                    hasPlayed: function e() {
                        return i.hasPlayed_
                    },
                    goalBufferLength: function e() {
                        return i.goalBufferLength()
                    },
                    bandwidth: u,
                    syncController: i.syncController_,
                    decrypter: i.decrypter_,
                    sourceType: i.sourceType_,
                    inbandTextTracks: i.inbandTextTracks_,
                    cacheEncryptionKeys: p,
                    sourceUpdater: i.sourceUpdater_,
                    timelineChangeController: i.timelineChangeController_,
                    experimentalExactManifestTimings: t.experimentalExactManifestTimings
                };
                i.masterPlaylistLoader_ = i.sourceType_ === "dash" ? new Tp(r, i.vhs_, i.requestOptions_) : new Fh(r, i.vhs_, i.requestOptions_);
                i.setupMasterPlaylistLoaderListeners_();
                i.mainSegmentLoader_ = new Jm(xd.mergeOptions(_, {
                    segmentMetadataTrack: i.segmentMetadataTrack_,
                    loaderType: "main"
                }), t);
                i.audioSegmentLoader_ = new Jm(xd.mergeOptions(_, {
                    loaderType: "audio"
                }), t);
                i.subtitleSegmentLoader_ = new hv(xd.mergeOptions(_, {
                    loaderType: "vtt",
                    featuresNativeTextTracks: i.tech_.featuresNativeTextTracks
                }), t);
                i.setupSegmentLoaderListeners_();
                if (i.experimentalBufferBasedABR) {
                    i.masterPlaylistLoader_.one("loadedplaylist", (function() {
                        return i.startABRTimer_()
                    }));
                    i.tech_.on("pause", (function() {
                        return i.stopABRTimer_()
                    }));
                    i.tech_.on("play", (function() {
                        return i.startABRTimer_()
                    }))
                }
                Fv.forEach((function(e) {
                    i[e + "_"] = jv.bind(Y(i), e)
                }));
                i.logger_ = Nd("MPC");
                i.triggeredFmp4Usage = false;
                if (i.tech_.preload() === "none") {
                    i.loadOnPlay_ = function() {
                        i.loadOnPlay_ = null;
                        i.masterPlaylistLoader_.load()
                    };
                    i.tech_.one("play", i.loadOnPlay_)
                } else {
                    i.masterPlaylistLoader_.load()
                }
                i.timeToLoadedData__ = -1;
                i.mainAppendsToLoadedData__ = -1;
                i.audioAppendsToLoadedData__ = -1;
                var b = i.tech_.preload() === "none" ? "play" : "loadstart";
                i.tech_.one(b, (function() {
                    var e = Date.now();
                    i.tech_.one("loadeddata", (function() {
                        i.timeToLoadedData__ = Date.now() - e;
                        i.mainAppendsToLoadedData__ = i.mainSegmentLoader_.mediaAppends;
                        i.audioAppendsToLoadedData__ = i.audioSegmentLoader_.mediaAppends
                    }))
                }));
                return i
            }
            var i = t.prototype;
            i.mainAppendsToLoadedData_ = function e() {
                return this.mainAppendsToLoadedData__
            };
            i.audioAppendsToLoadedData_ = function e() {
                return this.audioAppendsToLoadedData__
            };
            i.appendsToLoadedData_ = function e() {
                var t = this.mainAppendsToLoadedData_();
                var i = this.audioAppendsToLoadedData_();
                if (t === -1 || i === -1) {
                    return -1
                }
                return t + i
            };
            i.timeToLoadedData_ = function e() {
                return this.timeToLoadedData__
            };
            i.checkABR_ = function e() {
                var t = this.selectPlaylist();
                if (t && this.shouldSwitchToMedia_(t)) {
                    this.switchMedia_(t, "abr")
                }
            };
            i.switchMedia_ = function e(t, i, r) {
                var n = this.media();
                var a = n && (n.id || n.uri);
                var s = t.id || t.uri;
                if (a && a !== s) {
                    this.logger_("switch media " + a + " -> " + s + " from " + i);
                    this.tech_.trigger({
                        type: "usage",
                        name: "vhs-rendition-change-" + i
                    })
                }
                this.masterPlaylistLoader_.media(t, r)
            };
            i.startABRTimer_ = function e() {
                var t = this;
                this.stopABRTimer_();
                this.abrTimer_ = s.setInterval((function() {
                    return t.checkABR_()
                }), 250)
            };
            i.stopABRTimer_ = function e() {
                if (this.tech_.scrubbing && this.tech_.scrubbing()) {
                    return
                }
                s.clearInterval(this.abrTimer_);
                this.abrTimer_ = null
            };
            i.getAudioTrackPlaylists_ = function e() {
                var t = this.master();
                var i = t && t.playlists || [];
                if (!t || !t.mediaGroups || !t.mediaGroups.AUDIO) {
                    return i
                }
                var r = t.mediaGroups.AUDIO;
                var n = Object.keys(r);
                var a;
                if (Object.keys(this.mediaTypes_.AUDIO.groups).length) {
                    a = this.mediaTypes_.AUDIO.activeTrack()
                } else {
                    var s = r.main || n.length && r[n[0]];
                    for (var o in s) {
                        if (s[o]["default"]) {
                            a = {
                                label: o
                            };
                            break
                        }
                    }
                }
                if (!a) {
                    return i
                }
                var u = [];
                for (var l in r) {
                    if (r[l][a.label]) {
                        var c = r[l][a.label];
                        if (c.playlists && c.playlists.length) {
                            u.push.apply(u, c.playlists)
                        } else if (c.uri) {
                            u.push(c)
                        } else if (t.playlists.length) {
                            for (var f = 0; f < t.playlists.length; f++) {
                                var d = t.playlists[f];
                                if (d.attributes && d.attributes.AUDIO && d.attributes.AUDIO === l) {
                                    u.push(d)
                                }
                            }
                        }
                    }
                }
                if (!u.length) {
                    return i
                }
                return u
            };
            i.setupMasterPlaylistLoaderListeners_ = function e() {
                var t = this;
                this.masterPlaylistLoader_.on("loadedmetadata", (function() {
                    var e = t.masterPlaylistLoader_.media();
                    var i = e.targetDuration * 1.5 * 1e3;
                    if (mh(t.masterPlaylistLoader_.master, t.masterPlaylistLoader_.media())) {
                        t.requestOptions_.timeout = 0
                    } else {
                        t.requestOptions_.timeout = i
                    }
                    if (e.endList && t.tech_.preload() !== "none") {
                        t.mainSegmentLoader_.playlist(e, t.requestOptions_);
                        t.mainSegmentLoader_.load()
                    }
                    Rv({
                        sourceType: t.sourceType_,
                        segmentLoaders: {
                            AUDIO: t.audioSegmentLoader_,
                            SUBTITLES: t.subtitleSegmentLoader_,
                            main: t.mainSegmentLoader_
                        },
                        tech: t.tech_,
                        requestOptions: t.requestOptions_,
                        masterPlaylistLoader: t.masterPlaylistLoader_,
                        vhs: t.vhs_,
                        master: t.master(),
                        mediaTypes: t.mediaTypes_,
                        blacklistCurrentPlaylist: t.blacklistCurrentPlaylist.bind(t)
                    });
                    t.triggerPresenceUsage_(t.master(), e);
                    t.setupFirstPlay();
                    if (!t.mediaTypes_.AUDIO.activePlaylistLoader || t.mediaTypes_.AUDIO.activePlaylistLoader.media()) {
                        t.trigger("selectedinitialmedia")
                    } else {
                        t.mediaTypes_.AUDIO.activePlaylistLoader.one("loadedmetadata", (function() {
                            t.trigger("selectedinitialmedia")
                        }))
                    }
                }));
                this.masterPlaylistLoader_.on("loadedplaylist", (function() {
                    if (t.loadOnPlay_) {
                        t.tech_.off("play", t.loadOnPlay_)
                    }
                    var e = t.masterPlaylistLoader_.media();
                    if (!e) {
                        t.excludeUnsupportedVariants_();
                        var i;
                        if (t.enableLowInitialPlaylist) {
                            i = t.selectInitialPlaylist()
                        }
                        if (!i) {
                            i = t.selectPlaylist()
                        }
                        if (!i || !t.shouldSwitchToMedia_(i)) {
                            return
                        }
                        t.initialMedia_ = i;
                        t.switchMedia_(t.initialMedia_, "initial");
                        var r = t.sourceType_ === "vhs-json" && t.initialMedia_.segments;
                        if (!r) {
                            return
                        }
                        e = t.initialMedia_
                    }
                    t.handleUpdatedMediaPlaylist(e)
                }));
                this.masterPlaylistLoader_.on("error", (function() {
                    t.blacklistCurrentPlaylist(t.masterPlaylistLoader_.error)
                }));
                this.masterPlaylistLoader_.on("mediachanging", (function() {
                    t.mainSegmentLoader_.abort();
                    t.mainSegmentLoader_.pause()
                }));
                this.masterPlaylistLoader_.on("mediachange", (function() {
                    var e = t.masterPlaylistLoader_.media();
                    var i = e.targetDuration * 1.5 * 1e3;
                    if (mh(t.masterPlaylistLoader_.master, t.masterPlaylistLoader_.media())) {
                        t.requestOptions_.timeout = 0
                    } else {
                        t.requestOptions_.timeout = i
                    }
                    t.mainSegmentLoader_.playlist(e, t.requestOptions_);
                    t.mainSegmentLoader_.load();
                    t.tech_.trigger({
                        type: "mediachange",
                        bubbles: true
                    })
                }));
                this.masterPlaylistLoader_.on("playlistunchanged", (function() {
                    var e = t.masterPlaylistLoader_.media();
                    if (e.lastExcludeReason_ === "playlist-unchanged") {
                        return
                    }
                    var i = t.stuckAtPlaylistEnd_(e);
                    if (i) {
                        t.blacklistCurrentPlaylist({
                            message: "Playlist no longer updating.",
                            reason: "playlist-unchanged"
                        });
                        t.tech_.trigger("playliststuck")
                    }
                }));
                this.masterPlaylistLoader_.on("renditiondisabled", (function() {
                    t.tech_.trigger({
                        type: "usage",
                        name: "vhs-rendition-disabled"
                    });
                    t.tech_.trigger({
                        type: "usage",
                        name: "hls-rendition-disabled"
                    })
                }));
                this.masterPlaylistLoader_.on("renditionenabled", (function() {
                    t.tech_.trigger({
                        type: "usage",
                        name: "vhs-rendition-enabled"
                    });
                    t.tech_.trigger({
                        type: "usage",
                        name: "hls-rendition-enabled"
                    })
                }))
            };
            i.handleUpdatedMediaPlaylist = function e(t) {
                if (this.useCueTags_) {
                    this.updateAdCues_(t)
                }
                this.mainSegmentLoader_.playlist(t, this.requestOptions_);
                this.updateDuration(!t.endList);
                if (!this.tech_.paused()) {
                    this.mainSegmentLoader_.load();
                    if (this.audioSegmentLoader_) {
                        this.audioSegmentLoader_.load()
                    }
                }
            };
            i.triggerPresenceUsage_ = function e(t, i) {
                var r = t.mediaGroups || {};
                var n = true;
                var a = Object.keys(r.AUDIO);
                for (var s in r.AUDIO) {
                    for (var o in r.AUDIO[s]) {
                        var u = r.AUDIO[s][o];
                        if (!u.uri) {
                            n = false
                        }
                    }
                }
                if (n) {
                    this.tech_.trigger({
                        type: "usage",
                        name: "vhs-demuxed"
                    });
                    this.tech_.trigger({
                        type: "usage",
                        name: "hls-demuxed"
                    })
                }
                if (Object.keys(r.SUBTITLES).length) {
                    this.tech_.trigger({
                        type: "usage",
                        name: "vhs-webvtt"
                    });
                    this.tech_.trigger({
                        type: "usage",
                        name: "hls-webvtt"
                    })
                }
                if (Bv.Playlist.isAes(i)) {
                    this.tech_.trigger({
                        type: "usage",
                        name: "vhs-aes"
                    });
                    this.tech_.trigger({
                        type: "usage",
                        name: "hls-aes"
                    })
                }
                if (a.length && Object.keys(r.AUDIO[a[0]]).length > 1) {
                    this.tech_.trigger({
                        type: "usage",
                        name: "vhs-alternate-audio"
                    });
                    this.tech_.trigger({
                        type: "usage",
                        name: "hls-alternate-audio"
                    })
                }
                if (this.useCueTags_) {
                    this.tech_.trigger({
                        type: "usage",
                        name: "vhs-playlist-cue-tags"
                    });
                    this.tech_.trigger({
                        type: "usage",
                        name: "hls-playlist-cue-tags"
                    })
                }
            };
            i.shouldSwitchToMedia_ = function e(t) {
                var i = this.masterPlaylistLoader_.media() || this.masterPlaylistLoader_.pendingMedia_;
                var r = this.tech_.currentTime();
                var n = this.bufferLowWaterLine();
                var a = this.bufferHighWaterLine();
                var s = this.tech_.buffered();
                return Hv({
                    buffered: s,
                    currentTime: r,
                    currentPlaylist: i,
                    nextPlaylist: t,
                    bufferLowWaterLine: n,
                    bufferHighWaterLine: a,
                    duration: this.duration(),
                    experimentalBufferBasedABR: this.experimentalBufferBasedABR,
                    log: this.logger_
                })
            };
            i.setupSegmentLoaderListeners_ = function e() {
                var t = this;
                if (!this.experimentalBufferBasedABR) {
                    this.mainSegmentLoader_.on("bandwidthupdate", (function() {
                        var e = t.selectPlaylist();
                        if (t.shouldSwitchToMedia_(e)) {
                            t.switchMedia_(e, "bandwidthupdate")
                        }
                        t.tech_.trigger("bandwidthupdate")
                    }));
                    this.mainSegmentLoader_.on("progress", (function() {
                        t.trigger("progress")
                    }))
                }
                this.mainSegmentLoader_.on("error", (function() {
                    t.blacklistCurrentPlaylist(t.mainSegmentLoader_.error())
                }));
                this.mainSegmentLoader_.on("appenderror", (function() {
                    t.error = t.mainSegmentLoader_.error_;
                    t.trigger("error")
                }));
                this.mainSegmentLoader_.on("syncinfoupdate", (function() {
                    t.onSyncInfoUpdate_()
                }));
                this.mainSegmentLoader_.on("timestampoffset", (function() {
                    t.tech_.trigger({
                        type: "usage",
                        name: "vhs-timestamp-offset"
                    });
                    t.tech_.trigger({
                        type: "usage",
                        name: "hls-timestamp-offset"
                    })
                }));
                this.audioSegmentLoader_.on("syncinfoupdate", (function() {
                    t.onSyncInfoUpdate_()
                }));
                this.audioSegmentLoader_.on("appenderror", (function() {
                    t.error = t.audioSegmentLoader_.error_;
                    t.trigger("error")
                }));
                this.mainSegmentLoader_.on("ended", (function() {
                    t.logger_("main segment loader ended");
                    t.onEndOfStream()
                }));
                this.mainSegmentLoader_.on("earlyabort", (function(e) {
                    if (t.experimentalBufferBasedABR) {
                        return
                    }
                    t.delegateLoaders_("all", ["abort"]);
                    t.blacklistCurrentPlaylist({
                        message: "Aborted early because there isn't enough bandwidth to complete the " + "request without rebuffering."
                    }, Uv)
                }));
                var i = function e() {
                    if (!t.sourceUpdater_.hasCreatedSourceBuffers()) {
                        return t.tryToCreateSourceBuffers_()
                    }
                    var i = t.getCodecsOrExclude_();
                    if (!i) {
                        return
                    }
                    t.sourceUpdater_.addOrChangeSourceBuffers(i)
                };
                this.mainSegmentLoader_.on("trackinfo", i);
                this.audioSegmentLoader_.on("trackinfo", i);
                this.mainSegmentLoader_.on("fmp4", (function() {
                    if (!t.triggeredFmp4Usage) {
                        t.tech_.trigger({
                            type: "usage",
                            name: "vhs-fmp4"
                        });
                        t.tech_.trigger({
                            type: "usage",
                            name: "hls-fmp4"
                        });
                        t.triggeredFmp4Usage = true
                    }
                }));
                this.audioSegmentLoader_.on("fmp4", (function() {
                    if (!t.triggeredFmp4Usage) {
                        t.tech_.trigger({
                            type: "usage",
                            name: "vhs-fmp4"
                        });
                        t.tech_.trigger({
                            type: "usage",
                            name: "hls-fmp4"
                        });
                        t.triggeredFmp4Usage = true
                    }
                }));
                this.audioSegmentLoader_.on("ended", (function() {
                    t.logger_("audioSegmentLoader ended");
                    t.onEndOfStream()
                }))
            };
            i.mediaSecondsLoaded_ = function e() {
                return Math.max(this.audioSegmentLoader_.mediaSecondsLoaded + this.mainSegmentLoader_.mediaSecondsLoaded)
            };
            i.load = function e() {
                this.mainSegmentLoader_.load();
                if (this.mediaTypes_.AUDIO.activePlaylistLoader) {
                    this.audioSegmentLoader_.load()
                }
                if (this.mediaTypes_.SUBTITLES.activePlaylistLoader) {
                    this.subtitleSegmentLoader_.load()
                }
            };
            i.smoothQualityChange_ = function e(t) {
                if (t === void 0) {
                    t = this.selectPlaylist()
                }
                this.fastQualityChange_(t)
            };
            i.fastQualityChange_ = function e(t) {
                var i = this;
                if (t === void 0) {
                    t = this.selectPlaylist()
                }
                if (t === this.masterPlaylistLoader_.media()) {
                    this.logger_("skipping fastQualityChange because new media is same as old");
                    return
                }
                this.switchMedia_(t, "fast-quality");
                this.mainSegmentLoader_.resetEverything((function() {
                    if (xd.browser.IE_VERSION || xd.browser.IS_EDGE) {
                        i.tech_.setCurrentTime(i.tech_.currentTime() + .04)
                    } else {
                        i.tech_.setCurrentTime(i.tech_.currentTime())
                    }
                }))
            };
            i.play = function e() {
                if (this.setupFirstPlay()) {
                    return
                }
                if (this.tech_.ended()) {
                    this.tech_.setCurrentTime(0)
                }
                if (this.hasPlayed_) {
                    this.load()
                }
                var t = this.tech_.seekable();
                if (this.tech_.duration() === Infinity) {
                    if (this.tech_.currentTime() < t.start(0)) {
                        return this.tech_.setCurrentTime(t.end(t.length - 1))
                    }
                }
            };
            i.setupFirstPlay = function e() {
                var t = this;
                var i = this.masterPlaylistLoader_.media();
                if (!i || this.tech_.paused() || this.hasPlayed_) {
                    return false
                }
                if (!i.endList) {
                    var r = this.seekable();
                    if (!r.length) {
                        return false
                    }
                    if (xd.browser.IE_VERSION && this.tech_.readyState() === 0) {
                        this.tech_.one("loadedmetadata", (function() {
                            t.trigger("firstplay");
                            t.tech_.setCurrentTime(r.end(0));
                            t.hasPlayed_ = true
                        }));
                        return false
                    }
                    this.trigger("firstplay");
                    this.tech_.setCurrentTime(r.end(0))
                }
                this.hasPlayed_ = true;
                this.load();
                return true
            };
            i.handleSourceOpen_ = function e() {
                this.tryToCreateSourceBuffers_();
                if (this.tech_.autoplay()) {
                    var t = this.tech_.play();
                    if (typeof t !== "undefined" && typeof t.then === "function") {
                        t.then(null, (function(e) {}))
                    }
                }
                this.trigger("sourceopen")
            };
            i.handleSourceEnded_ = function e() {
                if (!this.inbandTextTracks_.metadataTrack_) {
                    return
                }
                var t = this.inbandTextTracks_.metadataTrack_.cues;
                if (!t || !t.length) {
                    return
                }
                var i = this.duration();
                t[t.length - 1].endTime = isNaN(i) || Math.abs(i) === Infinity ? Number.MAX_VALUE : i
            };
            i.handleDurationChange_ = function e() {
                this.tech_.trigger("durationchange")
            };
            i.onEndOfStream = function e() {
                var t = this.mainSegmentLoader_.ended_;
                if (this.mediaTypes_.AUDIO.activePlaylistLoader) {
                    var i = this.mainSegmentLoader_.getCurrentMediaInfo_();
                    if (!i || i.hasVideo) {
                        t = t && this.audioSegmentLoader_.ended_
                    } else {
                        t = this.audioSegmentLoader_.ended_
                    }
                }
                if (!t) {
                    return
                }
                this.stopABRTimer_();
                this.sourceUpdater_.endOfStream()
            };
            i.stuckAtPlaylistEnd_ = function e(t) {
                var i = this.seekable();
                if (!i.length) {
                    return false
                }
                var r = this.syncController_.getExpiredTime(t, this.duration());
                if (r === null) {
                    return false
                }
                var n = Bv.Playlist.playlistEnd(t, r);
                var a = this.tech_.currentTime();
                var s = this.tech_.buffered();
                if (!s.length) {
                    return n - a <= Md
                }
                var o = s.end(s.length - 1);
                return o - a <= Md && n - o <= Md
            };
            i.blacklistCurrentPlaylist = function e(t, i) {
                if (t === void 0) {
                    t = {}
                }
                var r = t.playlist || this.masterPlaylistLoader_.media();
                i = i || t.blacklistDuration || this.blacklistDuration;
                if (!r) {
                    this.error = t;
                    if (this.mediaSource.readyState !== "open") {
                        this.trigger("error")
                    } else {
                        this.sourceUpdater_.endOfStream("network")
                    }
                    return
                }
                r.playlistErrors_++;
                var n = this.masterPlaylistLoader_.master.playlists;
                var a = n.filter(ch);
                var s = a.length === 1 && a[0] === r;
                if (n.length === 1 && i !== Infinity) {
                    xd.log.warn("Problem encountered with playlist " + r.id + ". " + "Trying again since it is the only playlist.");
                    this.tech_.trigger("retryplaylist");
                    return this.masterPlaylistLoader_.load(s)
                }
                if (s) {
                    var o = false;
                    n.forEach((function(e) {
                        if (e === r) {
                            return
                        }
                        var t = e.excludeUntil;
                        if (typeof t !== "undefined" && t !== Infinity) {
                            o = true;
                            delete e.excludeUntil
                        }
                    }));
                    if (o) {
                        xd.log.warn("Removing other playlists from the exclusion list because the last " + "rendition is about to be excluded.");
                        this.tech_.trigger("retryplaylist")
                    }
                }
                var u;
                if (r.playlistErrors_ > this.maxPlaylistRetries) {
                    u = Infinity
                } else {
                    u = Date.now() + i * 1e3
                }
                r.excludeUntil = u;
                if (t.reason) {
                    r.lastExcludeReason_ = t.reason
                }
                this.tech_.trigger("blacklistplaylist");
                this.tech_.trigger({
                    type: "usage",
                    name: "vhs-rendition-blacklisted"
                });
                this.tech_.trigger({
                    type: "usage",
                    name: "hls-rendition-blacklisted"
                });
                var l = this.selectPlaylist();
                if (!l) {
                    this.error = "Playback cannot continue. No available working or supported playlists.";
                    this.trigger("error");
                    return
                }
                var c = t.internal ? this.logger_ : xd.log.warn;
                var f = t.message ? " " + t.message : "";
                c((t.internal ? "Internal problem" : "Problem") + " encountered with playlist " + r.id + "." + (f + " Switching to playlist " + l.id + "."));
                if (l.attributes.AUDIO !== r.attributes.AUDIO) {
                    this.delegateLoaders_("audio", ["abort", "pause"])
                }
                if (l.attributes.SUBTITLES !== r.attributes.SUBTITLES) {
                    this.delegateLoaders_("subtitle", ["abort", "pause"])
                }
                this.delegateLoaders_("main", ["abort", "pause"]);
                var d = l.targetDuration / 2 * 1e3 || 5 * 1e3;
                var h = typeof l.lastRequest === "number" && Date.now() - l.lastRequest <= d;
                return this.switchMedia_(l, "exclude", s || h)
            };
            i.pauseLoading = function e() {
                this.delegateLoaders_("all", ["abort", "pause"]);
                this.stopABRTimer_()
            };
            i.delegateLoaders_ = function e(t, i) {
                var r = this;
                var n = [];
                var a = t === "all";
                if (a || t === "main") {
                    n.push(this.masterPlaylistLoader_)
                }
                var s = [];
                if (a || t === "audio") {
                    s.push("AUDIO")
                }
                if (a || t === "subtitle") {
                    s.push("CLOSED-CAPTIONS");
                    s.push("SUBTITLES")
                }
                s.forEach((function(e) {
                    var t = r.mediaTypes_[e] && r.mediaTypes_[e].activePlaylistLoader;
                    if (t) {
                        n.push(t)
                    }
                }));
                ["main", "audio", "subtitle"].forEach((function(e) {
                    var i = r[e + "SegmentLoader_"];
                    if (i && (t === e || t === "all")) {
                        n.push(i)
                    }
                }));
                n.forEach((function(e) {
                    return i.forEach((function(t) {
                        if (typeof e[t] === "function") {
                            e[t]()
                        }
                    }))
                }))
            };
            i.setCurrentTime = function e(t) {
                var i = Bd(this.tech_.buffered(), t);
                if (!(this.masterPlaylistLoader_ && this.masterPlaylistLoader_.media())) {
                    return 0
                }
                if (!this.masterPlaylistLoader_.media().segments) {
                    return 0
                }
                if (i && i.length) {
                    return t
                }
                this.mainSegmentLoader_.resetEverything();
                this.mainSegmentLoader_.abort();
                if (this.mediaTypes_.AUDIO.activePlaylistLoader) {
                    this.audioSegmentLoader_.resetEverything();
                    this.audioSegmentLoader_.abort()
                }
                if (this.mediaTypes_.SUBTITLES.activePlaylistLoader) {
                    this.subtitleSegmentLoader_.resetEverything();
                    this.subtitleSegmentLoader_.abort()
                }
                this.load()
            };
            i.duration = function e() {
                if (!this.masterPlaylistLoader_) {
                    return 0
                }
                var t = this.masterPlaylistLoader_.media();
                if (!t) {
                    return 0
                }
                if (!t.endList) {
                    return Infinity
                }
                if (this.mediaSource) {
                    return this.mediaSource.duration
                }
                return Bv.Playlist.duration(t)
            };
            i.seekable = function e() {
                return this.seekable_
            };
            i.onSyncInfoUpdate_ = function e() {
                var t;
                if (!this.masterPlaylistLoader_) {
                    return
                }
                var i = this.masterPlaylistLoader_.media();
                if (!i) {
                    return
                }
                var r = this.syncController_.getExpiredTime(i, this.duration());
                if (r === null) {
                    return
                }
                var n = this.masterPlaylistLoader_.master;
                var a = Bv.Playlist.seekable(i, r, Bv.Playlist.liveEdgeDelay(n, i));
                if (a.length === 0) {
                    return
                }
                if (this.mediaTypes_.AUDIO.activePlaylistLoader) {
                    i = this.mediaTypes_.AUDIO.activePlaylistLoader.media();
                    r = this.syncController_.getExpiredTime(i, this.duration());
                    if (r === null) {
                        return
                    }
                    t = Bv.Playlist.seekable(i, r, Bv.Playlist.liveEdgeDelay(n, i));
                    if (t.length === 0) {
                        return
                    }
                }
                var s;
                var o;
                if (this.seekable_ && this.seekable_.length) {
                    s = this.seekable_.end(0);
                    o = this.seekable_.start(0)
                }
                if (!t) {
                    this.seekable_ = a
                } else if (t.start(0) > a.end(0) || a.start(0) > t.end(0)) {
                    this.seekable_ = a
                } else {
                    this.seekable_ = xd.createTimeRanges([
                        [t.start(0) > a.start(0) ? t.start(0) : a.start(0), t.end(0) < a.end(0) ? t.end(0) : a.end(0)]
                    ])
                }
                if (this.seekable_ && this.seekable_.length) {
                    if (this.seekable_.end(0) === s && this.seekable_.start(0) === o) {
                        return
                    }
                }
                this.logger_("seekable updated [" + qd(this.seekable_) + "]");
                this.tech_.trigger("seekablechanged")
            };
            i.updateDuration = function e(t) {
                if (this.updateDuration_) {
                    this.mediaSource.removeEventListener("sourceopen", this.updateDuration_);
                    this.updateDuration_ = null
                }
                if (this.mediaSource.readyState !== "open") {
                    this.updateDuration_ = this.updateDuration.bind(this, t);
                    this.mediaSource.addEventListener("sourceopen", this.updateDuration_);
                    return
                }
                if (t) {
                    var i = this.seekable();
                    if (!i.length) {
                        return
                    }
                    if (isNaN(this.mediaSource.duration) || this.mediaSource.duration < i.end(i.length - 1)) {
                        this.sourceUpdater_.setDuration(i.end(i.length - 1))
                    }
                    return
                }
                var r = this.tech_.buffered();
                var n = Bv.Playlist.duration(this.masterPlaylistLoader_.media());
                if (r.length > 0) {
                    n = Math.max(n, r.end(r.length - 1))
                }
                if (this.mediaSource.duration !== n) {
                    this.sourceUpdater_.setDuration(n)
                }
            };
            i.dispose = function e() {
                var t = this;
                this.trigger("dispose");
                this.decrypter_.terminate();
                this.masterPlaylistLoader_.dispose();
                this.mainSegmentLoader_.dispose();
                if (this.loadOnPlay_) {
                    this.tech_.off("play", this.loadOnPlay_)
                } ["AUDIO", "SUBTITLES"].forEach((function(e) {
                    var i = t.mediaTypes_[e].groups;
                    for (var r in i) {
                        i[r].forEach((function(e) {
                            if (e.playlistLoader) {
                                e.playlistLoader.dispose()
                            }
                        }))
                    }
                }));
                this.audioSegmentLoader_.dispose();
                this.subtitleSegmentLoader_.dispose();
                this.sourceUpdater_.dispose();
                this.timelineChangeController_.dispose();
                this.stopABRTimer_();
                if (this.updateDuration_) {
                    this.mediaSource.removeEventListener("sourceopen", this.updateDuration_)
                }
                this.mediaSource.removeEventListener("durationchange", this.handleDurationChange_);
                this.mediaSource.removeEventListener("sourceopen", this.handleSourceOpen_);
                this.mediaSource.removeEventListener("sourceended", this.handleSourceEnded_);
                this.off()
            };
            i.master = function e() {
                return this.masterPlaylistLoader_.master
            };
            i.media = function e() {
                return this.masterPlaylistLoader_.media() || this.initialMedia_
            };
            i.areMediaTypesKnown_ = function e() {
                var t = !!this.mediaTypes_.AUDIO.activePlaylistLoader;
                var i = !!this.mainSegmentLoader_.getCurrentMediaInfo_();
                var r = !t ? true : !!this.audioSegmentLoader_.getCurrentMediaInfo_();
                if (!i || !r) {
                    return false
                }
                return true
            };
            i.getCodecsOrExclude_ = function e() {
                var t = this;
                var i = {
                    main: this.mainSegmentLoader_.getCurrentMediaInfo_() || {},
                    audio: this.audioSegmentLoader_.getCurrentMediaInfo_() || {}
                };
                i.video = i.main;
                var r = hm(this.master(), this.media());
                var n = {};
                var a = !!this.mediaTypes_.AUDIO.activePlaylistLoader;
                if (i.main.hasVideo) {
                    n.video = r.video || i.main.videoCodec || Nt
                }
                if (i.main.isMuxed) {
                    n.video += "," + (r.audio || i.main.audioCodec || Lt)
                }
                if (i.main.hasAudio && !i.main.isMuxed || i.audio.hasAudio || a) {
                    n.audio = r.audio || i.main.audioCodec || i.audio.audioCodec || Lt;
                    i.audio.isFmp4 = i.main.hasAudio && !i.main.isMuxed ? i.main.isFmp4 : i.audio.isFmp4
                }
                if (!n.audio && !n.video) {
                    this.blacklistCurrentPlaylist({
                        playlist: this.media(),
                        message: "Could not determine codecs for playlist.",
                        blacklistDuration: Infinity
                    });
                    return
                }
                var s = function e(t, i) {
                    return t ? Ot(i) : Dt(i)
                };
                var o = {};
                var u;
                ["video", "audio"].forEach((function(e) {
                    if (n.hasOwnProperty(e) && !s(i[e].isFmp4, n[e])) {
                        var t = i[e].isFmp4 ? "browser" : "muxer";
                        o[t] = o[t] || [];
                        o[t].push(n[e]);
                        if (e === "audio") {
                            u = t
                        }
                    }
                }));
                if (a && u && this.media().attributes.AUDIO) {
                    var l = this.media().attributes.AUDIO;
                    this.master().playlists.forEach((function(e) {
                        var i = e.attributes && e.attributes.AUDIO;
                        if (i === l && e !== t.media()) {
                            e.excludeUntil = Infinity
                        }
                    }));
                    this.logger_("excluding audio group " + l + " as " + u + ' does not support codec(s): "' + n.audio + '"')
                }
                if (Object.keys(o).length) {
                    var c = Object.keys(o).reduce((function(e, t) {
                        if (e) {
                            e += ", "
                        }
                        e += t + ' does not support codec(s): "' + o[t].join(",") + '"';
                        return e
                    }), "") + ".";
                    this.blacklistCurrentPlaylist({
                        playlist: this.media(),
                        internal: true,
                        message: c,
                        blacklistDuration: Infinity
                    });
                    return
                }
                if (this.sourceUpdater_.hasCreatedSourceBuffers() && !this.sourceUpdater_.canChangeType()) {
                    var f = [];
                    ["video", "audio"].forEach((function(e) {
                        var i = (Ct(t.sourceUpdater_.codecs[e] || "")[0] || {}).type;
                        var r = (Ct(n[e] || "")[0] || {}).type;
                        if (i && r && i.toLowerCase() !== r.toLowerCase()) {
                            f.push('"' + t.sourceUpdater_.codecs[e] + '" -> "' + n[e] + '"')
                        }
                    }));
                    if (f.length) {
                        this.blacklistCurrentPlaylist({
                            playlist: this.media(),
                            message: "Codec switching not supported: " + f.join(", ") + ".",
                            blacklistDuration: Infinity,
                            internal: true
                        });
                        return
                    }
                }
                return n
            };
            i.tryToCreateSourceBuffers_ = function e() {
                if (this.mediaSource.readyState !== "open" || this.sourceUpdater_.hasCreatedSourceBuffers()) {
                    return
                }
                if (!this.areMediaTypesKnown_()) {
                    return
                }
                var t = this.getCodecsOrExclude_();
                if (!t) {
                    return
                }
                this.sourceUpdater_.createSourceBuffers(t);
                var i = [t.video, t.audio].filter(Boolean).join(",");
                this.excludeIncompatibleVariants_(i)
            };
            i.excludeUnsupportedVariants_ = function e() {
                var t = this;
                var i = this.master().playlists;
                var r = [];
                Object.keys(i).forEach((function(e) {
                    var n = i[e];
                    if (r.indexOf(n.id) !== -1) {
                        return
                    }
                    r.push(n.id);
                    var a = hm(t.master, n);
                    var s = [];
                    if (a.audio && !Dt(a.audio) && !Ot(a.audio)) {
                        s.push("audio codec " + a.audio)
                    }
                    if (a.video && !Dt(a.video) && !Ot(a.video)) {
                        s.push("video codec " + a.video)
                    }
                    if (a.text && a.text === "stpp.ttml.im1t") {
                        s.push("text codec " + a.text)
                    }
                    if (s.length) {
                        n.excludeUntil = Infinity;
                        t.logger_("excluding " + n.id + " for unsupported: " + s.join(", "))
                    }
                }))
            };
            i.excludeIncompatibleVariants_ = function e(t) {
                var i = this;
                var r = [];
                var n = this.master().playlists;
                var a = fm(Ct(t));
                var s = dm(a);
                var o = a.video && Ct(a.video)[0] || null;
                var u = a.audio && Ct(a.audio)[0] || null;
                Object.keys(n).forEach((function(e) {
                    var t = n[e];
                    if (r.indexOf(t.id) !== -1 || t.excludeUntil === Infinity) {
                        return
                    }
                    r.push(t.id);
                    var a = [];
                    var l = hm(i.masterPlaylistLoader_.master, t);
                    var c = dm(l);
                    if (!l.audio && !l.video) {
                        return
                    }
                    if (c !== s) {
                        a.push('codec count "' + c + '" !== "' + s + '"')
                    }
                    if (!i.sourceUpdater_.canChangeType()) {
                        var f = l.video && Ct(l.video)[0] || null;
                        var d = l.audio && Ct(l.audio)[0] || null;
                        if (f && o && f.type.toLowerCase() !== o.type.toLowerCase()) {
                            a.push('video codec "' + f.type + '" !== "' + o.type + '"')
                        }
                        if (d && u && d.type.toLowerCase() !== u.type.toLowerCase()) {
                            a.push('audio codec "' + d.type + '" !== "' + u.type + '"')
                        }
                    }
                    if (a.length) {
                        t.excludeUntil = Infinity;
                        i.logger_("blacklisting " + t.id + ": " + a.join(" && "))
                    }
                }))
            };
            i.updateAdCues_ = function e(t) {
                var i = 0;
                var r = this.seekable();
                if (r.length) {
                    i = r.start(0)
                }
                mv(t, this.cueTagsTrack_, i)
            };
            i.goalBufferLength = function e() {
                var t = this.tech_.currentTime();
                var i = Sp.GOAL_BUFFER_LENGTH;
                var r = Sp.GOAL_BUFFER_LENGTH_RATE;
                var n = Math.max(i, Sp.MAX_GOAL_BUFFER_LENGTH);
                return Math.min(i + t * r, n)
            };
            i.bufferLowWaterLine = function e() {
                var t = this.tech_.currentTime();
                var i = Sp.BUFFER_LOW_WATER_LINE;
                var r = Sp.BUFFER_LOW_WATER_LINE_RATE;
                var n = Math.max(i, Sp.MAX_BUFFER_LOW_WATER_LINE);
                var a = Math.max(i, Sp.EXPERIMENTAL_MAX_BUFFER_LOW_WATER_LINE);
                return Math.min(i + t * r, this.experimentalBufferBasedABR ? a : n)
            };
            i.bufferHighWaterLine = function e() {
                return Sp.BUFFER_HIGH_WATER_LINE
            };
            return t
        }(xd.EventTarget);
        var Vv = function e(t, i, r) {
            return function(e) {
                var n = t.master.playlists[i];
                var a = lh(n);
                var s = ch(n);
                if (typeof e === "undefined") {
                    return s
                }
                if (e) {
                    delete n.disabled
                } else {
                    n.disabled = true
                }
                if (e !== s && !a) {
                    r();
                    if (e) {
                        t.trigger("renditionenabled")
                    } else {
                        t.trigger("renditiondisabled")
                    }
                }
                return e
            }
        };
        var Wv = function e(t, i, r) {
            var n = t.masterPlaylistController_,
                a = t.options_.smoothQualityChange;
            var s = a ? "smooth" : "fast";
            var o = n[s + "QualityChange_"].bind(n);
            if (i.attributes) {
                var u = i.attributes.RESOLUTION;
                this.width = u && u.width;
                this.height = u && u.height;
                this.bandwidth = i.attributes.BANDWIDTH
            }
            this.codecs = hm(n.master(), i);
            this.playlist = i;
            this.id = r;
            this.enabled = Vv(t.playlists, i.id, o)
        };
        var Gv = function e(t) {
            t.representations = function() {
                var e = t.masterPlaylistController_.master();
                var i = yh(e) ? t.masterPlaylistController_.getAudioTrackPlaylists_() : e.playlists;
                if (!i) {
                    return []
                }
                return i.filter((function(e) {
                    return !lh(e)
                })).map((function(e, i) {
                    return new Wv(t, e, e.id)
                }))
            }
        };
        var Xv = ["seeking", "seeked", "pause", "playing", "error"];
        var zv = function() {
            function e(e) {
                var t = this;
                this.masterPlaylistController_ = e.masterPlaylistController;
                this.tech_ = e.tech;
                this.seekable = e.seekable;
                this.allowSeeksWithinUnsafeLiveWindow = e.allowSeeksWithinUnsafeLiveWindow;
                this.liveRangeSafeTimeDelta = e.liveRangeSafeTimeDelta;
                this.media = e.media;
                this.consecutiveUpdates = 0;
                this.lastRecordedTime = null;
                this.timer_ = null;
                this.checkCurrentTimeTimeout_ = null;
                this.logger_ = Nd("PlaybackWatcher");
                this.logger_("initialize");
                var i = function e() {
                    return t.monitorCurrentTime_()
                };
                var r = function e() {
                    return t.monitorCurrentTime_()
                };
                var n = function e() {
                    return t.techWaiting_()
                };
                var a = function e() {
                    return t.cancelTimer_()
                };
                var o = this.masterPlaylistController_;
                var u = ["main", "subtitle", "audio"];
                var l = {};
                u.forEach((function(e) {
                    l[e] = {
                        reset: function i() {
                            return t.resetSegmentDownloads_(e)
                        },
                        updateend: function i() {
                            return t.checkSegmentDownloads_(e)
                        }
                    };
                    o[e + "SegmentLoader_"].on("appendsdone", l[e].updateend);
                    o[e + "SegmentLoader_"].on("playlistupdate", l[e].reset);
                    t.tech_.on(["seeked", "seeking"], l[e].reset)
                }));
                var c = function e(i) {
                    ["main", "audio"].forEach((function(e) {
                        o[e + "SegmentLoader_"][i]("appended", t.seekingAppendCheck_)
                    }))
                };
                this.seekingAppendCheck_ = function() {
                    if (t.fixesBadSeeks_()) {
                        t.consecutiveUpdates = 0;
                        t.lastRecordedTime = t.tech_.currentTime();
                        c("off")
                    }
                };
                this.clearSeekingAppendCheck_ = function() {
                    return c("off")
                };
                this.watchForBadSeeking_ = function() {
                    t.clearSeekingAppendCheck_();
                    c("on")
                };
                this.tech_.on("seeked", this.clearSeekingAppendCheck_);
                this.tech_.on("seeking", this.watchForBadSeeking_);
                this.tech_.on("waiting", n);
                this.tech_.on(Xv, a);
                this.tech_.on("canplay", r);
                this.tech_.one("play", i);
                this.dispose = function() {
                    t.clearSeekingAppendCheck_();
                    t.logger_("dispose");
                    t.tech_.off("waiting", n);
                    t.tech_.off(Xv, a);
                    t.tech_.off("canplay", r);
                    t.tech_.off("play", i);
                    t.tech_.off("seeking", t.watchForBadSeeking_);
                    t.tech_.off("seeked", t.clearSeekingAppendCheck_);
                    u.forEach((function(e) {
                        o[e + "SegmentLoader_"].off("appendsdone", l[e].updateend);
                        o[e + "SegmentLoader_"].off("playlistupdate", l[e].reset);
                        t.tech_.off(["seeked", "seeking"], l[e].reset)
                    }));
                    if (t.checkCurrentTimeTimeout_) {
                        s.clearTimeout(t.checkCurrentTimeTimeout_)
                    }
                    t.cancelTimer_()
                }
            }
            var t = e.prototype;
            t.monitorCurrentTime_ = function e() {
                this.checkCurrentTime_();
                if (this.checkCurrentTimeTimeout_) {
                    s.clearTimeout(this.checkCurrentTimeTimeout_)
                }
                this.checkCurrentTimeTimeout_ = s.setTimeout(this.monitorCurrentTime_.bind(this), 250)
            };
            t.resetSegmentDownloads_ = function e(t) {
                var i = this.masterPlaylistController_[t + "SegmentLoader_"];
                if (this[t + "StalledDownloads_"] > 0) {
                    this.logger_("resetting possible stalled download count for " + t + " loader")
                }
                this[t + "StalledDownloads_"] = 0;
                this[t + "Buffered_"] = i.buffered_()
            };
            t.checkSegmentDownloads_ = function e(t) {
                var i = this.masterPlaylistController_;
                var r = i[t + "SegmentLoader_"];
                var n = r.buffered_();
                var a = Gd(this[t + "Buffered_"], n);
                this[t + "Buffered_"] = n;
                if (a) {
                    this.resetSegmentDownloads_(t);
                    return
                }
                this[t + "StalledDownloads_"]++;
                this.logger_("found #" + this[t + "StalledDownloads_"] + " " + t + " appends that did not increase buffer (possible stalled download)", {
                    playlistId: r.playlist_ && r.playlist_.id,
                    buffered: Wd(n)
                });
                if (this[t + "StalledDownloads_"] < 10) {
                    return
                }
                this.logger_(t + " loader stalled download exclusion");
                this.resetSegmentDownloads_(t);
                this.tech_.trigger({
                    type: "usage",
                    name: "vhs-" + t + "-download-exclusion"
                });
                if (t === "subtitle") {
                    return
                }
                i.blacklistCurrentPlaylist({
                    message: "Excessive " + t + " segment downloading detected."
                }, Infinity)
            };
            t.checkCurrentTime_ = function e() {
                if (this.tech_.paused() || this.tech_.seeking()) {
                    return
                }
                var t = this.tech_.currentTime();
                var i = this.tech_.buffered();
                if (this.lastRecordedTime === t && (!i.length || t + Md >= i.end(i.length - 1))) {
                    return this.techWaiting_()
                }
                if (this.consecutiveUpdates >= 5 && t === this.lastRecordedTime) {
                    this.consecutiveUpdates++;
                    this.waiting_()
                } else if (t === this.lastRecordedTime) {
                    this.consecutiveUpdates++
                } else {
                    this.consecutiveUpdates = 0;
                    this.lastRecordedTime = t
                }
            };
            t.cancelTimer_ = function e() {
                this.consecutiveUpdates = 0;
                if (this.timer_) {
                    this.logger_("cancelTimer_");
                    clearTimeout(this.timer_)
                }
                this.timer_ = null
            };
            t.fixesBadSeeks_ = function e() {
                var t = this.tech_.seeking();
                if (!t) {
                    return false
                }
                var i = this.seekable();
                var r = this.tech_.currentTime();
                var n = this.afterSeekableWindow_(i, r, this.media(), this.allowSeeksWithinUnsafeLiveWindow);
                var a;
                if (n) {
                    var s = i.end(i.length - 1);
                    a = s
                }
                if (this.beforeSeekableWindow_(i, r)) {
                    var o = i.start(0);
                    a = o + (o === i.end(0) ? 0 : Md)
                }
                if (typeof a !== "undefined") {
                    this.logger_("Trying to seek outside of seekable at time " + r + " with " + ("seekable range " + qd(i) + ". Seeking to ") + (a + "."));
                    this.tech_.setCurrentTime(a);
                    return true
                }
                var u = this.masterPlaylistController_.sourceUpdater_;
                var l = this.tech_.buffered();
                var c = u.audioBuffer ? u.audioBuffered() : null;
                var f = u.videoBuffer ? u.videoBuffered() : null;
                var d = this.media();
                var h = d.partTargetDuration ? d.partTargetDuration : (d.targetDuration - Rd) * 2;
                var p = [c, f];
                for (var m = 0; m < p.length; m++) {
                    if (!p[m]) {
                        continue
                    }
                    var v = zd(p[m], r);
                    if (v < h) {
                        return false
                    }
                }
                var g = Fd(l, r);
                if (g.length === 0) {
                    return false
                }
                a = g.start(0) + Md;
                this.logger_("Buffered region starts (" + g.start(0) + ") " + (" just beyond seek point (" + r + "). Seeking to " + a + "."));
                this.tech_.setCurrentTime(a);
                return true
            };
            t.waiting_ = function e() {
                if (this.techWaiting_()) {
                    return
                }
                var t = this.tech_.currentTime();
                var i = this.tech_.buffered();
                var r = Bd(i, t);
                if (r.length && t + 3 <= r.end(0)) {
                    this.cancelTimer_();
                    this.tech_.setCurrentTime(t);
                    this.logger_("Stopped at " + t + " while inside a buffered region " + ("[" + r.start(0) + " -> " + r.end(0) + "]. Attempting to resume ") + "playback by seeking to the current time.");
                    this.tech_.trigger({
                        type: "usage",
                        name: "vhs-unknown-waiting"
                    });
                    this.tech_.trigger({
                        type: "usage",
                        name: "hls-unknown-waiting"
                    });
                    return
                }
            };
            t.techWaiting_ = function e() {
                var t = this.seekable();
                var i = this.tech_.currentTime();
                if (this.tech_.seeking() || this.timer_ !== null) {
                    return true
                }
                if (this.beforeSeekableWindow_(t, i)) {
                    var r = t.end(t.length - 1);
                    this.logger_("Fell out of live window at time " + i + ". Seeking to " + ("live point (seekable end) " + r));
                    this.cancelTimer_();
                    this.tech_.setCurrentTime(r);
                    this.tech_.trigger({
                        type: "usage",
                        name: "vhs-live-resync"
                    });
                    this.tech_.trigger({
                        type: "usage",
                        name: "hls-live-resync"
                    });
                    return true
                }
                var n = this.tech_.vhs.masterPlaylistController_.sourceUpdater_;
                var a = this.tech_.buffered();
                var s = this.videoUnderflow_({
                    audioBuffered: n.audioBuffered(),
                    videoBuffered: n.videoBuffered(),
                    currentTime: i
                });
                if (s) {
                    this.cancelTimer_();
                    this.tech_.setCurrentTime(i);
                    this.tech_.trigger({
                        type: "usage",
                        name: "vhs-video-underflow"
                    });
                    this.tech_.trigger({
                        type: "usage",
                        name: "hls-video-underflow"
                    });
                    return true
                }
                var o = Fd(a, i);
                if (o.length > 0) {
                    var u = o.start(0) - i;
                    this.logger_("Stopped at " + i + ", setting timer for " + u + ", seeking " + ("to " + o.start(0)));
                    this.cancelTimer_();
                    this.timer_ = setTimeout(this.skipTheGap_.bind(this), u * 1e3, i);
                    return true
                }
                return false
            };
            t.afterSeekableWindow_ = function e(t, i, r, n) {
                if (n === void 0) {
                    n = false
                }
                if (!t.length) {
                    return false
                }
                var a = t.end(t.length - 1) + Md;
                var s = !r.endList;
                if (s && n) {
                    a = t.end(t.length - 1) + r.targetDuration * 3
                }
                if (i > a) {
                    return true
                }
                return false
            };
            t.beforeSeekableWindow_ = function e(t, i) {
                if (t.length && t.start(0) > 0 && i < t.start(0) - this.liveRangeSafeTimeDelta) {
                    return true
                }
                return false
            };
            t.videoUnderflow_ = function e(t) {
                var i = t.videoBuffered,
                    r = t.audioBuffered,
                    n = t.currentTime;
                if (!i) {
                    return
                }
                var a;
                if (i.length && r.length) {
                    var s = Bd(i, n - 3);
                    var o = Bd(i, n);
                    var u = Bd(r, n);
                    if (u.length && !o.length && s.length) {
                        a = {
                            start: s.end(0),
                            end: u.end(0)
                        }
                    }
                } else {
                    var l = Fd(i, n);
                    if (!l.length) {
                        a = this.gapFromVideoUnderflow_(i, n)
                    }
                }
                if (a) {
                    this.logger_("Encountered a gap in video from " + a.start + " to " + a.end + ". " + ("Seeking to current time " + n));
                    return true
                }
                return false
            };
            t.skipTheGap_ = function e(t) {
                var i = this.tech_.buffered();
                var r = this.tech_.currentTime();
                var n = Fd(i, r);
                this.cancelTimer_();
                if (n.length === 0 || r !== t) {
                    return
                }
                this.logger_("skipTheGap_:", "currentTime:", r, "scheduled currentTime:", t, "nextRange start:", n.start(0));
                this.tech_.setCurrentTime(n.start(0) + Rd);
                this.tech_.trigger({
                    type: "usage",
                    name: "vhs-gap-skip"
                });
                this.tech_.trigger({
                    type: "usage",
                    name: "hls-gap-skip"
                })
            };
            t.gapFromVideoUnderflow_ = function e(t, i) {
                var r = jd(t);
                for (var n = 0; n < r.length; n++) {
                    var a = r.start(n);
                    var s = r.end(n);
                    if (i - a < 4 && i - a > 2) {
                        return {
                            start: a,
                            end: s
                        }
                    }
                }
                return null
            };
            return e
        }();
        var Kv = {
            errorInterval: 30,
            getSource: function e(t) {
                var i = this.tech({
                    IWillNotUseThisInPlugins: true
                });
                var r = i.currentSource_ || this.currentSource();
                return t(r)
            }
        };
        var Yv = function e(t, i) {
            var r = 0;
            var n = 0;
            var a = xd.mergeOptions(Kv, i);
            t.ready((function() {
                t.trigger({
                    type: "usage",
                    name: "vhs-error-reload-initialized"
                });
                t.trigger({
                    type: "usage",
                    name: "hls-error-reload-initialized"
                })
            }));
            var s = function e() {
                if (n) {
                    t.currentTime(n)
                }
            };
            var o = function e(i) {
                if (i === null || i === undefined) {
                    return
                }
                n = t.duration() !== Infinity && t.currentTime() || 0;
                t.one("loadedmetadata", s);
                t.src(i);
                t.trigger({
                    type: "usage",
                    name: "vhs-error-reload"
                });
                t.trigger({
                    type: "usage",
                    name: "hls-error-reload"
                });
                t.play()
            };
            var u = function e() {
                if (Date.now() - r < a.errorInterval * 1e3) {
                    t.trigger({
                        type: "usage",
                        name: "vhs-error-reload-canceled"
                    });
                    t.trigger({
                        type: "usage",
                        name: "hls-error-reload-canceled"
                    });
                    return
                }
                if (!a.getSource || typeof a.getSource !== "function") {
                    xd.log.error("ERROR: reloadSourceOnError - The option getSource must be a function!");
                    return
                }
                r = Date.now();
                return a.getSource.call(t, o)
            };
            var l = function e() {
                t.off("loadedmetadata", s);
                t.off("error", u);
                t.off("dispose", e)
            };
            var c = function i(r) {
                l();
                e(t, r)
            };
            t.on("error", u);
            t.on("dispose", l);
            t.reloadSourceOnError = c
        };
        var $v = function e(t) {
            Yv(this, t)
        };
        var Qv = "2.14.2";
        var Jv = "6.0.1";
        var Zv = "0.21.1";
        var eg = "4.7.1";
        var tg = "3.1.3";
        var ig = {
            PlaylistLoader: Fh,
            Playlist: _h,
            utils: tp,
            STANDARD_PLAYLIST_SELECTOR: Tm,
            INITIAL_PLAYLIST_SELECTOR: wm,
            lastBandwidthSelector: Tm,
            movingAverageBandwidthSelector: Sm,
            comparePlaylistBandwidth: ym,
            comparePlaylistResolution: _m,
            xhr: Vh()
        };
        Object.keys(Sp).forEach((function(e) {
            Object.defineProperty(ig, e, {
                get: function t() {
                    xd.log.warn("using Vhs." + e + " is UNSAFE be sure you know what you are doing");
                    return Sp[e]
                },
                set: function t(i) {
                    xd.log.warn("using Vhs." + e + " is UNSAFE be sure you know what you are doing");
                    if (typeof i !== "number" || i < 0) {
                        xd.log.warn("value of Vhs." + e + " must be greater than or equal to 0");
                        return
                    }
                    Sp[e] = i
                }
            })
        }));
        var rg = "videojs-vhs";
        var ng = function e(t, i) {
            var r = i.media();
            var n = -1;
            for (var a = 0; a < t.length; a++) {
                if (t[a].id === r.id) {
                    n = a;
                    break
                }
            }
            t.selectedIndex_ = n;
            t.trigger({
                selectedIndex: n,
                type: "change"
            })
        };
        var ag = function e(t, i) {
            i.representations().forEach((function(e) {
                t.addQualityLevel(e)
            }));
            ng(t, i.playlists)
        };
        ig.canPlaySource = function() {
            return xd.log.warn("HLS is no longer a tech. Please remove it from " + "your player's techOrder.")
        };
        var sg = function e(t, i, r) {
            if (!t) {
                return t
            }
            var n = {};
            if (i && i.attributes && i.attributes.CODECS) {
                n = fm(Ct(i.attributes.CODECS))
            }
            if (r && r.attributes && r.attributes.CODECS) {
                n.audio = r.attributes.CODECS
            }
            var a = Pt(n.video);
            var s = Pt(n.audio);
            var o = {};
            for (var u in t) {
                o[u] = {};
                if (s) {
                    o[u].audioContentType = s
                }
                if (a) {
                    o[u].videoContentType = a
                }
                if (i.contentProtection && i.contentProtection[u] && i.contentProtection[u].pssh) {
                    o[u].pssh = i.contentProtection[u].pssh
                }
                if (typeof t[u] === "string") {
                    o[u].url = t[u]
                }
            }
            return xd.mergeOptions(t, o)
        };
        var og = function e(t, i) {
            return t.reduce((function(e, t) {
                if (!t.contentProtection) {
                    return e
                }
                var r = i.reduce((function(e, i) {
                    var r = t.contentProtection[i];
                    if (r && r.pssh) {
                        e[i] = {
                            pssh: r.pssh
                        }
                    }
                    return e
                }), {});
                if (Object.keys(r).length) {
                    e.push(r)
                }
                return e
            }), [])
        };
        var ug = function e(t) {
            var i = t.player,
                r = t.sourceKeySystems,
                n = t.audioMedia,
                a = t.mainPlaylists;
            if (!i.eme.initializeMediaKeys) {
                return Promise.resolve()
            }
            var s = n ? a.concat([n]) : a;
            var o = og(s, Object.keys(r));
            var u = [];
            var l = [];
            o.forEach((function(e) {
                l.push(new Promise((function(e, t) {
                    i.tech_.one("keysessioncreated", e)
                })));
                u.push(new Promise((function(t, r) {
                    i.eme.initializeMediaKeys({
                        keySystems: e
                    }, (function(e) {
                        if (e) {
                            r(e);
                            return
                        }
                        t()
                    }))
                })))
            }));
            return Promise.race([Promise.all(u), Promise.race(l)])
        };
        var lg = function e(t) {
            var i = t.player,
                r = t.sourceKeySystems,
                n = t.media,
                a = t.audioMedia;
            var s = sg(r, n, a);
            if (!s) {
                return false
            }
            i.currentSource().keySystems = s;
            if (s && !i.eme) {
                xd.log.warn("DRM encrypted source cannot be decrypted without a DRM plugin");
                return false
            }
            return true
        };
        var cg = function e() {
            if (!s.localStorage) {
                return null
            }
            var t = s.localStorage.getItem(rg);
            if (!t) {
                return null
            }
            try {
                return JSON.parse(t)
            } catch (e) {
                return null
            }
        };
        var fg = function e(t) {
            if (!s.localStorage) {
                return false
            }
            var i = cg();
            i = i ? xd.mergeOptions(i, t) : t;
            try {
                s.localStorage.setItem(rg, JSON.stringify(i))
            } catch (e) {
                return false
            }
            return i
        };
        var dg = function e(t) {
            if (t.toLowerCase().indexOf("data:application/vnd.videojs.vhs+json,") === 0) {
                return JSON.parse(t.substring(t.indexOf(",") + 1))
            }
            return t
        };
        ig.supportsNativeHls = function() {
            if (!W || !W.createElement) {
                return false
            }
            var e = W.createElement("video");
            if (!xd.getTech("Html5").isSupported()) {
                return false
            }
            var t = ["application/vnd.apple.mpegurl", "audio/mpegurl", "audio/x-mpegurl", "application/x-mpegurl", "video/x-mpegurl", "video/mpegurl", "application/mpegurl"];
            return t.some((function(t) {
                return /maybe|probably/i.test(e.canPlayType(t))
            }))
        }();
        ig.supportsNativeDash = function() {
            if (!W || !W.createElement || !xd.getTech("Html5").isSupported()) {
                return false
            }
            return /maybe|probably/i.test(W.createElement("video").canPlayType("application/dash+xml"))
        }();
        ig.supportsTypeNatively = function(e) {
            if (e === "hls") {
                return ig.supportsNativeHls
            }
            if (e === "dash") {
                return ig.supportsNativeDash
            }
            return false
        };
        ig.isSupported = function() {
            return xd.log.warn("HLS is no longer a tech. Please remove it from " + "your player's techOrder.")
        };
        var hg = xd.getComponent("Component");
        var pg = function(e) {
            J(t, e);

            function t(t, i, r) {
                var n;
                n = e.call(this, i, xd.mergeOptions(r.hls, r.vhs)) || this;
                if (r.hls && Object.keys(r.hls).length) {
                    xd.log.warn("Using hls options is deprecated. Please rename `hls` to `vhs` in your options object.")
                }
                if (typeof r.initialBandwidth === "number") {
                    n.options_.bandwidth = r.initialBandwidth
                }
                n.logger_ = Nd("VhsHandler");
                if (i.options_ && i.options_.playerId) {
                    var a = xd(i.options_.playerId);
                    if (!a.hasOwnProperty("hls")) {
                        Object.defineProperty(a, "hls", {
                            get: function e() {
                                xd.log.warn("player.hls is deprecated. Use player.tech().vhs instead.");
                                i.trigger({
                                    type: "usage",
                                    name: "hls-player-access"
                                });
                                return Y(n)
                            },
                            configurable: true
                        })
                    }
                    if (!a.hasOwnProperty("vhs")) {
                        Object.defineProperty(a, "vhs", {
                            get: function e() {
                                xd.log.warn("player.vhs is deprecated. Use player.tech().vhs instead.");
                                i.trigger({
                                    type: "usage",
                                    name: "vhs-player-access"
                                });
                                return Y(n)
                            },
                            configurable: true
                        })
                    }
                    if (!a.hasOwnProperty("dash")) {
                        Object.defineProperty(a, "dash", {
                            get: function e() {
                                xd.log.warn("player.dash is deprecated. Use player.tech().vhs instead.");
                                return Y(n)
                            },
                            configurable: true
                        })
                    }
                    n.player_ = a
                }
                n.tech_ = i;
                n.source_ = t;
                n.stats = {};
                n.ignoreNextSeekingEvent_ = false;
                n.setOptions_();
                if (n.options_.overrideNative && i.overrideNativeAudioTracks && i.overrideNativeVideoTracks) {
                    i.overrideNativeAudioTracks(true);
                    i.overrideNativeVideoTracks(true)
                } else if (n.options_.overrideNative && (i.featuresNativeVideoTracks || i.featuresNativeAudioTracks)) {
                    throw new Error("Overriding native HLS requires emulated tracks. " + "See https://git.io/vMpjB")
                }
                n.on(W, ["fullscreenchange", "webkitfullscreenchange", "mozfullscreenchange", "MSFullscreenChange"], (function(e) {
                    var t = W.fullscreenElement || W.webkitFullscreenElement || W.mozFullScreenElement || W.msFullscreenElement;
                    if (t && t.contains(n.tech_.el())) {
                        n.masterPlaylistController_.fastQualityChange_()
                    } else {
                        n.masterPlaylistController_.checkABR_()
                    }
                }));
                n.on(n.tech_, "seeking", (function() {
                    if (this.ignoreNextSeekingEvent_) {
                        this.ignoreNextSeekingEvent_ = false;
                        return
                    }
                    this.setCurrentTime(this.tech_.currentTime())
                }));
                n.on(n.tech_, "error", (function() {
                    if (this.tech_.error() && this.masterPlaylistController_) {
                        this.masterPlaylistController_.pauseLoading()
                    }
                }));
                n.on(n.tech_, "play", n.play);
                return n
            }
            var i = t.prototype;
            i.setOptions_ = function e() {
                var t = this;
                this.options_.withCredentials = this.options_.withCredentials || false;
                this.options_.handleManifestRedirects = this.options_.handleManifestRedirects === false ? false : true;
                this.options_.limitRenditionByPlayerDimensions = this.options_.limitRenditionByPlayerDimensions === false ? false : true;
                this.options_.useDevicePixelRatio = this.options_.useDevicePixelRatio || false;
                this.options_.smoothQualityChange = this.options_.smoothQualityChange || false;
                this.options_.useBandwidthFromLocalStorage = typeof this.source_.useBandwidthFromLocalStorage !== "undefined" ? this.source_.useBandwidthFromLocalStorage : this.options_.useBandwidthFromLocalStorage || false;
                this.options_.useNetworkInformationApi = this.options_.useNetworkInformationApi || false;
                this.options_.useDtsForTimestampOffset = this.options_.useDtsForTimestampOffset || false;
                this.options_.customTagParsers = this.options_.customTagParsers || [];
                this.options_.customTagMappers = this.options_.customTagMappers || [];
                this.options_.cacheEncryptionKeys = this.options_.cacheEncryptionKeys || false;
                if (typeof this.options_.blacklistDuration !== "number") {
                    this.options_.blacklistDuration = 5 * 60
                }
                if (typeof this.options_.bandwidth !== "number") {
                    if (this.options_.useBandwidthFromLocalStorage) {
                        var i = cg();
                        if (i && i.bandwidth) {
                            this.options_.bandwidth = i.bandwidth;
                            this.tech_.trigger({
                                type: "usage",
                                name: "vhs-bandwidth-from-local-storage"
                            });
                            this.tech_.trigger({
                                type: "usage",
                                name: "hls-bandwidth-from-local-storage"
                            })
                        }
                        if (i && i.throughput) {
                            this.options_.throughput = i.throughput;
                            this.tech_.trigger({
                                type: "usage",
                                name: "vhs-throughput-from-local-storage"
                            });
                            this.tech_.trigger({
                                type: "usage",
                                name: "hls-throughput-from-local-storage"
                            })
                        }
                    }
                }
                if (typeof this.options_.bandwidth !== "number") {
                    this.options_.bandwidth = Sp.INITIAL_BANDWIDTH
                }
                this.options_.enableLowInitialPlaylist = this.options_.enableLowInitialPlaylist && this.options_.bandwidth === Sp.INITIAL_BANDWIDTH;
                ["withCredentials", "useDevicePixelRatio", "limitRenditionByPlayerDimensions", "bandwidth", "smoothQualityChange", "customTagParsers", "customTagMappers", "handleManifestRedirects", "cacheEncryptionKeys", "playlistSelector", "initialPlaylistSelector", "experimentalBufferBasedABR", "liveRangeSafeTimeDelta", "experimentalLLHLS", "useNetworkInformationApi", "useDtsForTimestampOffset", "experimentalExactManifestTimings", "experimentalLeastPixelDiffSelector"].forEach((function(e) {
                    if (typeof t.source_[e] !== "undefined") {
                        t.options_[e] = t.source_[e]
                    }
                }));
                this.limitRenditionByPlayerDimensions = this.options_.limitRenditionByPlayerDimensions;
                this.useDevicePixelRatio = this.options_.useDevicePixelRatio
            };
            i.src = function e(t, i) {
                var r = this;
                if (!t) {
                    return
                }
                this.setOptions_();
                this.options_.src = dg(this.source_.src);
                this.options_.tech = this.tech_;
                this.options_.externVhs = ig;
                this.options_.sourceType = Ut(i);
                this.options_.seekTo = function(e) {
                    r.tech_.setCurrentTime(e)
                };
                if (this.options_.smoothQualityChange) {
                    xd.log.warn("smoothQualityChange is deprecated and will be removed in the next major version")
                }
                this.masterPlaylistController_ = new qv(this.options_);
                var n = xd.mergeOptions({
                    liveRangeSafeTimeDelta: Md
                }, this.options_, {
                    seekable: function e() {
                        return r.seekable()
                    },
                    media: function e() {
                        return r.masterPlaylistController_.media()
                    },
                    masterPlaylistController: this.masterPlaylistController_
                });
                this.playbackWatcher_ = new zv(n);
                this.masterPlaylistController_.on("error", (function() {
                    var e = xd.players[r.tech_.options_.playerId];
                    var t = r.masterPlaylistController_.error;
                    if (typeof t === "object" && !t.code) {
                        t.code = 3
                    } else if (typeof t === "string") {
                        t = {
                            message: t,
                            code: 3
                        }
                    }
                    e.error(t)
                }));
                var a = this.options_.experimentalBufferBasedABR ? ig.movingAverageBandwidthSelector(.55) : ig.STANDARD_PLAYLIST_SELECTOR;
                this.masterPlaylistController_.selectPlaylist = this.selectPlaylist ? this.selectPlaylist.bind(this) : a.bind(this);
                this.masterPlaylistController_.selectInitialPlaylist = ig.INITIAL_PLAYLIST_SELECTOR.bind(this);
                this.playlists = this.masterPlaylistController_.masterPlaylistLoader_;
                this.mediaSource = this.masterPlaylistController_.mediaSource;
                Object.defineProperties(this, {
                    selectPlaylist: {
                        get: function e() {
                            return this.masterPlaylistController_.selectPlaylist
                        },
                        set: function e(t) {
                            this.masterPlaylistController_.selectPlaylist = t.bind(this)
                        }
                    },
                    throughput: {
                        get: function e() {
                            return this.masterPlaylistController_.mainSegmentLoader_.throughput.rate
                        },
                        set: function e(t) {
                            this.masterPlaylistController_.mainSegmentLoader_.throughput.rate = t;
                            this.masterPlaylistController_.mainSegmentLoader_.throughput.count = 1
                        }
                    },
                    bandwidth: {
                        get: function e() {
                            var t = this.masterPlaylistController_.mainSegmentLoader_.bandwidth;
                            var i = s.navigator.connection || s.navigator.mozConnection || s.navigator.webkitConnection;
                            var r = 1e7;
                            if (this.options_.useNetworkInformationApi && i) {
                                var n = i.downlink * 1e3 * 1e3;
                                if (n >= r && t >= r) {
                                    t = Math.max(t, n)
                                } else {
                                    t = n
                                }
                            }
                            return t
                        },
                        set: function e(t) {
                            this.masterPlaylistController_.mainSegmentLoader_.bandwidth = t;
                            this.masterPlaylistController_.mainSegmentLoader_.throughput = {
                                rate: 0,
                                count: 0
                            }
                        }
                    },
                    systemBandwidth: {
                        get: function e() {
                            var t = 1 / (this.bandwidth || 1);
                            var i;
                            if (this.throughput > 0) {
                                i = 1 / this.throughput
                            } else {
                                i = 0
                            }
                            var r = Math.floor(1 / (t + i));
                            return r
                        },
                        set: function e() {
                            xd.log.error('The "systemBandwidth" property is read-only')
                        }
                    }
                });
                if (this.options_.bandwidth) {
                    this.bandwidth = this.options_.bandwidth
                }
                if (this.options_.throughput) {
                    this.throughput = this.options_.throughput
                }
                Object.defineProperties(this.stats, {
                    bandwidth: {
                        get: function e() {
                            return r.bandwidth || 0
                        },
                        enumerable: true
                    },
                    mediaRequests: {
                        get: function e() {
                            return r.masterPlaylistController_.mediaRequests_() || 0
                        },
                        enumerable: true
                    },
                    mediaRequestsAborted: {
                        get: function e() {
                            return r.masterPlaylistController_.mediaRequestsAborted_() || 0
                        },
                        enumerable: true
                    },
                    mediaRequestsTimedout: {
                        get: function e() {
                            return r.masterPlaylistController_.mediaRequestsTimedout_() || 0
                        },
                        enumerable: true
                    },
                    mediaRequestsErrored: {
                        get: function e() {
                            return r.masterPlaylistController_.mediaRequestsErrored_() || 0
                        },
                        enumerable: true
                    },
                    mediaTransferDuration: {
                        get: function e() {
                            return r.masterPlaylistController_.mediaTransferDuration_() || 0
                        },
                        enumerable: true
                    },
                    mediaBytesTransferred: {
                        get: function e() {
                            return r.masterPlaylistController_.mediaBytesTransferred_() || 0
                        },
                        enumerable: true
                    },
                    mediaSecondsLoaded: {
                        get: function e() {
                            return r.masterPlaylistController_.mediaSecondsLoaded_() || 0
                        },
                        enumerable: true
                    },
                    mediaAppends: {
                        get: function e() {
                            return r.masterPlaylistController_.mediaAppends_() || 0
                        },
                        enumerable: true
                    },
                    mainAppendsToLoadedData: {
                        get: function e() {
                            return r.masterPlaylistController_.mainAppendsToLoadedData_() || 0
                        },
                        enumerable: true
                    },
                    audioAppendsToLoadedData: {
                        get: function e() {
                            return r.masterPlaylistController_.audioAppendsToLoadedData_() || 0
                        },
                        enumerable: true
                    },
                    appendsToLoadedData: {
                        get: function e() {
                            return r.masterPlaylistController_.appendsToLoadedData_() || 0
                        },
                        enumerable: true
                    },
                    timeToLoadedData: {
                        get: function e() {
                            return r.masterPlaylistController_.timeToLoadedData_() || 0
                        },
                        enumerable: true
                    },
                    buffered: {
                        get: function e() {
                            return Wd(r.tech_.buffered())
                        },
                        enumerable: true
                    },
                    currentTime: {
                        get: function e() {
                            return r.tech_.currentTime()
                        },
                        enumerable: true
                    },
                    currentSource: {
                        get: function e() {
                            return r.tech_.currentSource_
                        },
                        enumerable: true
                    },
                    currentTech: {
                        get: function e() {
                            return r.tech_.name_
                        },
                        enumerable: true
                    },
                    duration: {
                        get: function e() {
                            return r.tech_.duration()
                        },
                        enumerable: true
                    },
                    master: {
                        get: function e() {
                            return r.playlists.master
                        },
                        enumerable: true
                    },
                    playerDimensions: {
                        get: function e() {
                            return r.tech_.currentDimensions()
                        },
                        enumerable: true
                    },
                    seekable: {
                        get: function e() {
                            return Wd(r.tech_.seekable())
                        },
                        enumerable: true
                    },
                    timestamp: {
                        get: function e() {
                            return Date.now()
                        },
                        enumerable: true
                    },
                    videoPlaybackQuality: {
                        get: function e() {
                            return r.tech_.getVideoPlaybackQuality()
                        },
                        enumerable: true
                    }
                });
                this.tech_.one("canplay", this.masterPlaylistController_.setupFirstPlay.bind(this.masterPlaylistController_));
                this.tech_.on("bandwidthupdate", (function() {
                    if (r.options_.useBandwidthFromLocalStorage) {
                        fg({
                            bandwidth: r.bandwidth,
                            throughput: Math.round(r.throughput)
                        })
                    }
                }));
                this.masterPlaylistController_.on("selectedinitialmedia", (function() {
                    Gv(r)
                }));
                this.masterPlaylistController_.sourceUpdater_.on("createdsourcebuffers", (function() {
                    r.setupEme_()
                }));
                this.on(this.masterPlaylistController_, "progress", (function() {
                    this.tech_.trigger("progress")
                }));
                this.on(this.masterPlaylistController_, "firstplay", (function() {
                    this.ignoreNextSeekingEvent_ = true
                }));
                this.setupQualityLevels_();
                if (!this.tech_.el()) {
                    return
                }
                this.mediaSourceUrl_ = s.URL.createObjectURL(this.masterPlaylistController_.mediaSource);
                this.tech_.src(this.mediaSourceUrl_)
            };
            i.createKeySessions_ = function e() {
                var t = this;
                var i = this.masterPlaylistController_.mediaTypes_.AUDIO.activePlaylistLoader;
                this.logger_("waiting for EME key session creation");
                ug({
                    player: this.player_,
                    sourceKeySystems: this.source_.keySystems,
                    audioMedia: i && i.media(),
                    mainPlaylists: this.playlists.master.playlists
                }).then((function() {
                    t.logger_("created EME key session");
                    t.masterPlaylistController_.sourceUpdater_.initializedEme()
                }))["catch"]((function(e) {
                    t.logger_("error while creating EME key session", e);
                    t.player_.error({
                        message: "Failed to initialize media keys for EME",
                        code: 3
                    })
                }))
            };
            i.handleWaitingForKey_ = function e() {
                this.logger_("waitingforkey fired, attempting to create any new key sessions");
                this.createKeySessions_()
            };
            i.setupEme_ = function e() {
                var t = this;
                var i = this.masterPlaylistController_.mediaTypes_.AUDIO.activePlaylistLoader;
                var r = lg({
                    player: this.player_,
                    sourceKeySystems: this.source_.keySystems,
                    media: this.playlists.media(),
                    audioMedia: i && i.media()
                });
                this.player_.tech_.on("keystatuschange", (function(e) {
                    if (e.status === "output-restricted") {
                        t.masterPlaylistController_.blacklistCurrentPlaylist({
                            playlist: t.masterPlaylistController_.media(),
                            message: "DRM keystatus changed to " + e.status + ". Playlist will fail to play. Check for HDCP content.",
                            blacklistDuration: Infinity
                        })
                    }
                }));
                this.handleWaitingForKey_ = this.handleWaitingForKey_.bind(this);
                this.player_.tech_.on("waitingforkey", this.handleWaitingForKey_);
                if (xd.browser.IE_VERSION === 11 || !r) {
                    this.masterPlaylistController_.sourceUpdater_.initializedEme();
                    return
                }
                this.createKeySessions_()
            };
            i.setupQualityLevels_ = function e() {
                var t = this;
                var i = xd.players[this.tech_.options_.playerId];
                if (!i || !i.qualityLevels || this.qualityLevels_) {
                    return
                }
                this.qualityLevels_ = i.qualityLevels();
                this.masterPlaylistController_.on("selectedinitialmedia", (function() {
                    ag(t.qualityLevels_, t)
                }));
                this.playlists.on("mediachange", (function() {
                    ng(t.qualityLevels_, t.playlists)
                }))
            };
            t.version = function e() {
                return {
                    "@videojs/http-streaming": Qv,
                    "mux.js": Jv,
                    "mpd-parser": Zv,
                    "m3u8-parser": eg,
                    "aes-decrypter": tg
                }
            };
            i.version = function e() {
                return this.constructor.version()
            };
            i.canChangeType = function e() {
                return cv.canChangeType()
            };
            i.play = function e() {
                this.masterPlaylistController_.play()
            };
            i.setCurrentTime = function e(t) {
                this.masterPlaylistController_.setCurrentTime(t)
            };
            i.duration = function e() {
                return this.masterPlaylistController_.duration()
            };
            i.seekable = function e() {
                return this.masterPlaylistController_.seekable()
            };
            i.dispose = function t() {
                if (this.playbackWatcher_) {
                    this.playbackWatcher_.dispose()
                }
                if (this.masterPlaylistController_) {
                    this.masterPlaylistController_.dispose()
                }
                if (this.qualityLevels_) {
                    this.qualityLevels_.dispose()
                }
                if (this.player_) {
                    delete this.player_.vhs;
                    delete this.player_.dash;
                    delete this.player_.hls
                }
                if (this.tech_ && this.tech_.vhs) {
                    delete this.tech_.vhs
                }
                if (this.tech_) {
                    delete this.tech_.hls
                }
                if (this.mediaSourceUrl_ && s.URL.revokeObjectURL) {
                    s.URL.revokeObjectURL(this.mediaSourceUrl_);
                    this.mediaSourceUrl_ = null
                }
                if (this.tech_) {
                    this.tech_.off("waitingforkey", this.handleWaitingForKey_)
                }
                e.prototype.dispose.call(this)
            };
            i.convertToProgramTime = function e(t, i) {
                return lp({
                    playlist: this.masterPlaylistController_.media(),
                    time: t,
                    callback: i
                })
            };
            i.seekToProgramTime = function e(t, i, r, n) {
                if (r === void 0) {
                    r = true
                }
                if (n === void 0) {
                    n = 2
                }
                return cp({
                    programTime: t,
                    playlist: this.masterPlaylistController_.media(),
                    retryCount: n,
                    pauseAfterSeek: r,
                    seekTo: this.options_.seekTo,
                    tech: this.options_.tech,
                    callback: i
                })
            };
            return t
        }(hg);
        var mg = {
            name: "videojs-http-streaming",
            VERSION: Qv,
            canHandleSource: function e(t, i) {
                if (i === void 0) {
                    i = {}
                }
                var r = xd.mergeOptions(xd.options, i);
                return mg.canPlayType(t.type, r)
            },
            handleSource: function e(t, i, r) {
                if (r === void 0) {
                    r = {}
                }
                var n = xd.mergeOptions(xd.options, r);
                i.vhs = new pg(t, i, n);
                if (!xd.hasOwnProperty("hls")) {
                    Object.defineProperty(i, "hls", {
                        get: function e() {
                            xd.log.warn("player.tech().hls is deprecated. Use player.tech().vhs instead.");
                            return i.vhs
                        },
                        configurable: true
                    })
                }
                i.vhs.xhr = Vh();
                i.vhs.src(t.src, t.type);
                return i.vhs
            },
            canPlayType: function e(t, i) {
                if (i === void 0) {
                    i = {}
                }
                var r = xd.mergeOptions(xd.options, i),
                    n = r.vhs;
                n = n === void 0 ? {} : n;
                var a = n.overrideNative,
                    s = a === void 0 ? !xd.browser.IS_ANY_SAFARI : a,
                    o = r.hls;
                o = o === void 0 ? {} : o;
                var u = o.overrideNative,
                    l = u === void 0 ? false : u;
                var c = Ut(t);
                var f = c && (!ig.supportsTypeNatively(c) || l || s);
                return f ? "maybe" : ""
            }
        };
        var vg = function e() {
            return Ot("avc1.4d400d,mp4a.40.2")
        };
        if (vg()) {
            xd.getTech("Html5").registerSourceHandler(mg, 0)
        }
        xd.VhsHandler = pg;
        Object.defineProperty(xd, "HlsHandler", {
            get: function e() {
                xd.log.warn("videojs.HlsHandler is deprecated. Use videojs.VhsHandler instead.");
                return pg
            },
            configurable: true
        });
        xd.VhsSourceHandler = mg;
        Object.defineProperty(xd, "HlsSourceHandler", {
            get: function e() {
                xd.log.warn("videojs.HlsSourceHandler is deprecated. " + "Use videojs.VhsSourceHandler instead.");
                return mg
            },
            configurable: true
        });
        xd.Vhs = ig;
        Object.defineProperty(xd, "Hls", {
            get: function e() {
                xd.log.warn("videojs.Hls is deprecated. Use videojs.Vhs instead.");
                return ig
            },
            configurable: true
        });
        if (!xd.use) {
            xd.registerComponent("Hls", ig);
            xd.registerComponent("Vhs", ig)
        }
        xd.options.vhs = xd.options.vhs || {};
        xd.options.hls = xd.options.hls || {};
        if (!xd.getPlugin || !xd.getPlugin("reloadSourceOnError")) {
            var gg = xd.registerPlugin || xd.plugin;
            gg("reloadSourceOnError", $v)
        }
        var yg = n((function(e, t) {
            Object.defineProperty(t, "__esModule", {
                value: true
            });
            t.default = void 0;
            var i = function() {
                function e() {
                    this.listeners = {}
                }
                var t = e.prototype;
                t.on = function e(t, i) {
                    if (!this.listeners[t]) {
                        this.listeners[t] = []
                    }
                    this.listeners[t].push(i)
                };
                t.off = function e(t, i) {
                    if (!this.listeners[t]) {
                        return false
                    }
                    var r = this.listeners[t].indexOf(i);
                    this.listeners[t] = this.listeners[t].slice(0);
                    this.listeners[t].splice(r, 1);
                    return r > -1
                };
                t.trigger = function e(t) {
                    var i = this.listeners[t];
                    if (!i) {
                        return
                    }
                    if (arguments.length === 2) {
                        var r = i.length;
                        for (var n = 0; n < r; ++n) {
                            i[n].call(this, arguments[1])
                        }
                    } else {
                        var a = Array.prototype.slice.call(arguments, 1);
                        var s = i.length;
                        for (var o = 0; o < s; ++o) {
                            i[o].apply(this, a)
                        }
                    }
                };
                t.dispose = function e() {
                    this.listeners = {}
                };
                t.pipe = function e(t) {
                    this.on("data", (function(e) {
                        t.push(e)
                    }))
                };
                return e
            }();
            t.default = i;
            e.exports = t.default
        }));
        r(yg);
        var _g = n((function(e) {
            function t(e) {
                return e && e.__esModule ? e : {
                    default: e
                }
            }
            e.exports = t, e.exports.__esModule = true, e.exports["default"] = e.exports
        }));
        r(_g);
        var bg = n((function(e, t) {
            Object.defineProperty(t, "__esModule", {
                value: true
            });
            t.default = n;
            var i = _g(s);
            var r = function e(t) {
                return i.default.atob ? i.default.atob(t) : Buffer.from(t, "base64").toString("binary")
            };

            function n(e) {
                var t = r(e);
                var i = new Uint8Array(t.length);
                for (var n = 0; n < t.length; n++) {
                    i[n] = t.charCodeAt(n)
                }
                return i
            }
            e.exports = t.default
        }));
        r(bg);
        var Tg = n((function(e, t) {
            Object.defineProperty(t, "__esModule", {
                value: true
            });

            function i(e) {
                return e && typeof e === "object" && "default" in e ? e : {
                    default: e
                }
            }
            var r = i(Q);
            var n = i(yg);
            var a = i(G);
            var s = i(K);
            var o = i(bg);
            var u = function(e) {
                r["default"](t, e);

                function t() {
                    var t;
                    t = e.call(this) || this;
                    t.buffer = "";
                    return t
                }
                var i = t.prototype;
                i.push = function e(t) {
                    var i;
                    this.buffer += t;
                    i = this.buffer.indexOf("\n");
                    for (; i > -1; i = this.buffer.indexOf("\n")) {
                        this.trigger("data", this.buffer.substring(0, i));
                        this.buffer = this.buffer.substring(i + 1)
                    }
                };
                return t
            }(n["default"]);
            var l = String.fromCharCode(9);
            var c = function e(t) {
                var i = /([0-9.]*)?@?([0-9.]*)?/.exec(t || "");
                var r = {};
                if (i[1]) {
                    r.length = parseInt(i[1], 10)
                }
                if (i[2]) {
                    r.offset = parseInt(i[2], 10)
                }
                return r
            };
            var f = function e() {
                var t = "[^=]*";
                var i = '"[^"]*"|[^,]*';
                var r = "(?:" + t + ")=(?:" + i + ")";
                return new RegExp("(?:^|,)(" + r + ")")
            };
            var d = function e(t) {
                var i = t.split(f());
                var r = {};
                var n = i.length;
                var a;
                while (n--) {
                    if (i[n] === "") {
                        continue
                    }
                    a = /([^=]*)=(.*)/.exec(i[n]).slice(1);
                    a[0] = a[0].replace(/^\s+|\s+$/g, "");
                    a[1] = a[1].replace(/^\s+|\s+$/g, "");
                    a[1] = a[1].replace(/^['"](.*)['"]$/g, "$1");
                    r[a[0]] = a[1]
                }
                return r
            };
            var h = function(e) {
                r["default"](t, e);

                function t() {
                    var t;
                    t = e.call(this) || this;
                    t.customParsers = [];
                    t.tagMappers = [];
                    return t
                }
                var i = t.prototype;
                i.push = function e(t) {
                    var i = this;
                    var r;
                    var n;
                    t = t.trim();
                    if (t.length === 0) {
                        return
                    }
                    if (t[0] !== "#") {
                        this.trigger("data", {
                            type: "uri",
                            uri: t
                        });
                        return
                    }
                    var s = this.tagMappers.reduce((function(e, i) {
                        var r = i(t);
                        if (r === t) {
                            return e
                        }
                        return e.concat([r])
                    }), [t]);
                    s.forEach((function(e) {
                        for (var t = 0; t < i.customParsers.length; t++) {
                            if (i.customParsers[t].call(i, e)) {
                                return
                            }
                        }
                        if (e.indexOf("#EXT") !== 0) {
                            i.trigger("data", {
                                type: "comment",
                                text: e.slice(1)
                            });
                            return
                        }
                        e = e.replace("\r", "");
                        r = /^#EXTM3U/.exec(e);
                        if (r) {
                            i.trigger("data", {
                                type: "tag",
                                tagType: "m3u"
                            });
                            return
                        }
                        r = /^#EXTINF:?([0-9\.]*)?,?(.*)?$/.exec(e);
                        if (r) {
                            n = {
                                type: "tag",
                                tagType: "inf"
                            };
                            if (r[1]) {
                                n.duration = parseFloat(r[1])
                            }
                            if (r[2]) {
                                n.title = r[2]
                            }
                            i.trigger("data", n);
                            return
                        }
                        r = /^#EXT-X-TARGETDURATION:?([0-9.]*)?/.exec(e);
                        if (r) {
                            n = {
                                type: "tag",
                                tagType: "targetduration"
                            };
                            if (r[1]) {
                                n.duration = parseInt(r[1], 10)
                            }
                            i.trigger("data", n);
                            return
                        }
                        r = /^#EXT-X-VERSION:?([0-9.]*)?/.exec(e);
                        if (r) {
                            n = {
                                type: "tag",
                                tagType: "version"
                            };
                            if (r[1]) {
                                n.version = parseInt(r[1], 10)
                            }
                            i.trigger("data", n);
                            return
                        }
                        r = /^#EXT-X-MEDIA-SEQUENCE:?(\-?[0-9.]*)?/.exec(e);
                        if (r) {
                            n = {
                                type: "tag",
                                tagType: "media-sequence"
                            };
                            if (r[1]) {
                                n.number = parseInt(r[1], 10)
                            }
                            i.trigger("data", n);
                            return
                        }
                        r = /^#EXT-X-DISCONTINUITY-SEQUENCE:?(\-?[0-9.]*)?/.exec(e);
                        if (r) {
                            n = {
                                type: "tag",
                                tagType: "discontinuity-sequence"
                            };
                            if (r[1]) {
                                n.number = parseInt(r[1], 10)
                            }
                            i.trigger("data", n);
                            return
                        }
                        r = /^#EXT-X-PLAYLIST-TYPE:?(.*)?$/.exec(e);
                        if (r) {
                            n = {
                                type: "tag",
                                tagType: "playlist-type"
                            };
                            if (r[1]) {
                                n.playlistType = r[1]
                            }
                            i.trigger("data", n);
                            return
                        }
                        r = /^#EXT-X-BYTERANGE:?(.*)?$/.exec(e);
                        if (r) {
                            n = a["default"](c(r[1]), {
                                type: "tag",
                                tagType: "byterange"
                            });
                            i.trigger("data", n);
                            return
                        }
                        r = /^#EXT-X-ALLOW-CACHE:?(YES|NO)?/.exec(e);
                        if (r) {
                            n = {
                                type: "tag",
                                tagType: "allow-cache"
                            };
                            if (r[1]) {
                                n.allowed = !/NO/.test(r[1])
                            }
                            i.trigger("data", n);
                            return
                        }
                        r = /^#EXT-X-MAP:?(.*)$/.exec(e);
                        if (r) {
                            n = {
                                type: "tag",
                                tagType: "map"
                            };
                            if (r[1]) {
                                var s = d(r[1]);
                                if (s.URI) {
                                    n.uri = s.URI
                                }
                                if (s.BYTERANGE) {
                                    n.byterange = c(s.BYTERANGE)
                                }
                            }
                            i.trigger("data", n);
                            return
                        }
                        r = /^#EXT-X-STREAM-INF:?(.*)$/.exec(e);
                        if (r) {
                            n = {
                                type: "tag",
                                tagType: "stream-inf"
                            };
                            if (r[1]) {
                                n.attributes = d(r[1]);
                                if (n.attributes.RESOLUTION) {
                                    var o = n.attributes.RESOLUTION.split("x");
                                    var u = {};
                                    if (o[0]) {
                                        u.width = parseInt(o[0], 10)
                                    }
                                    if (o[1]) {
                                        u.height = parseInt(o[1], 10)
                                    }
                                    n.attributes.RESOLUTION = u
                                }
                                if (n.attributes.BANDWIDTH) {
                                    n.attributes.BANDWIDTH = parseInt(n.attributes.BANDWIDTH, 10)
                                }
                                if (n.attributes["PROGRAM-ID"]) {
                                    n.attributes["PROGRAM-ID"] = parseInt(n.attributes["PROGRAM-ID"], 10)
                                }
                            }
                            i.trigger("data", n);
                            return
                        }
                        r = /^#EXT-X-MEDIA:?(.*)$/.exec(e);
                        if (r) {
                            n = {
                                type: "tag",
                                tagType: "media"
                            };
                            if (r[1]) {
                                n.attributes = d(r[1])
                            }
                            i.trigger("data", n);
                            return
                        }
                        r = /^#EXT-X-ENDLIST/.exec(e);
                        if (r) {
                            i.trigger("data", {
                                type: "tag",
                                tagType: "endlist"
                            });
                            return
                        }
                        r = /^#EXT-X-DISCONTINUITY/.exec(e);
                        if (r) {
                            i.trigger("data", {
                                type: "tag",
                                tagType: "discontinuity"
                            });
                            return
                        }
                        r = /^#EXT-X-PROGRAM-DATE-TIME:?(.*)$/.exec(e);
                        if (r) {
                            n = {
                                type: "tag",
                                tagType: "program-date-time"
                            };
                            if (r[1]) {
                                n.dateTimeString = r[1];
                                n.dateTimeObject = new Date(r[1])
                            }
                            i.trigger("data", n);
                            return
                        }
                        r = /^#EXT-X-KEY:?(.*)$/.exec(e);
                        if (r) {
                            n = {
                                type: "tag",
                                tagType: "key"
                            };
                            if (r[1]) {
                                n.attributes = d(r[1]);
                                if (n.attributes.IV) {
                                    if (n.attributes.IV.substring(0, 2).toLowerCase() === "0x") {
                                        n.attributes.IV = n.attributes.IV.substring(2)
                                    }
                                    n.attributes.IV = n.attributes.IV.match(/.{8}/g);
                                    n.attributes.IV[0] = parseInt(n.attributes.IV[0], 16);
                                    n.attributes.IV[1] = parseInt(n.attributes.IV[1], 16);
                                    n.attributes.IV[2] = parseInt(n.attributes.IV[2], 16);
                                    n.attributes.IV[3] = parseInt(n.attributes.IV[3], 16);
                                    n.attributes.IV = new Uint32Array(n.attributes.IV)
                                }
                            }
                            i.trigger("data", n);
                            return
                        }
                        r = /^#EXT-X-START:?(.*)$/.exec(e);
                        if (r) {
                            n = {
                                type: "tag",
                                tagType: "start"
                            };
                            if (r[1]) {
                                n.attributes = d(r[1]);
                                n.attributes["TIME-OFFSET"] = parseFloat(n.attributes["TIME-OFFSET"]);
                                n.attributes.PRECISE = /YES/.test(n.attributes.PRECISE)
                            }
                            i.trigger("data", n);
                            return
                        }
                        r = /^#EXT-X-CUE-OUT-CONT:?(.*)?$/.exec(e);
                        if (r) {
                            n = {
                                type: "tag",
                                tagType: "cue-out-cont"
                            };
                            if (r[1]) {
                                n.data = r[1]
                            } else {
                                n.data = ""
                            }
                            i.trigger("data", n);
                            return
                        }
                        r = /^#EXT-X-CUE-OUT:?(.*)?$/.exec(e);
                        if (r) {
                            n = {
                                type: "tag",
                                tagType: "cue-out"
                            };
                            if (r[1]) {
                                n.data = r[1]
                            } else {
                                n.data = ""
                            }
                            i.trigger("data", n);
                            return
                        }
                        r = /^#EXT-X-CUE-IN:?(.*)?$/.exec(e);
                        if (r) {
                            n = {
                                type: "tag",
                                tagType: "cue-in"
                            };
                            if (r[1]) {
                                n.data = r[1]
                            } else {
                                n.data = ""
                            }
                            i.trigger("data", n);
                            return
                        }
                        r = /^#EXT-X-SKIP:(.*)$/.exec(e);
                        if (r && r[1]) {
                            n = {
                                type: "tag",
                                tagType: "skip"
                            };
                            n.attributes = d(r[1]);
                            if (n.attributes.hasOwnProperty("SKIPPED-SEGMENTS")) {
                                n.attributes["SKIPPED-SEGMENTS"] = parseInt(n.attributes["SKIPPED-SEGMENTS"], 10)
                            }
                            if (n.attributes.hasOwnProperty("RECENTLY-REMOVED-DATERANGES")) {
                                n.attributes["RECENTLY-REMOVED-DATERANGES"] = n.attributes["RECENTLY-REMOVED-DATERANGES"].split(l)
                            }
                            i.trigger("data", n);
                            return
                        }
                        r = /^#EXT-X-PART:(.*)$/.exec(e);
                        if (r && r[1]) {
                            n = {
                                type: "tag",
                                tagType: "part"
                            };
                            n.attributes = d(r[1]);
                            ["DURATION"].forEach((function(e) {
                                if (n.attributes.hasOwnProperty(e)) {
                                    n.attributes[e] = parseFloat(n.attributes[e])
                                }
                            }));
                            ["INDEPENDENT", "GAP"].forEach((function(e) {
                                if (n.attributes.hasOwnProperty(e)) {
                                    n.attributes[e] = /YES/.test(n.attributes[e])
                                }
                            }));
                            if (n.attributes.hasOwnProperty("BYTERANGE")) {
                                n.attributes.byterange = c(n.attributes.BYTERANGE)
                            }
                            i.trigger("data", n);
                            return
                        }
                        r = /^#EXT-X-SERVER-CONTROL:(.*)$/.exec(e);
                        if (r && r[1]) {
                            n = {
                                type: "tag",
                                tagType: "server-control"
                            };
                            n.attributes = d(r[1]);
                            ["CAN-SKIP-UNTIL", "PART-HOLD-BACK", "HOLD-BACK"].forEach((function(e) {
                                if (n.attributes.hasOwnProperty(e)) {
                                    n.attributes[e] = parseFloat(n.attributes[e])
                                }
                            }));
                            ["CAN-SKIP-DATERANGES", "CAN-BLOCK-RELOAD"].forEach((function(e) {
                                if (n.attributes.hasOwnProperty(e)) {
                                    n.attributes[e] = /YES/.test(n.attributes[e])
                                }
                            }));
                            i.trigger("data", n);
                            return
                        }
                        r = /^#EXT-X-PART-INF:(.*)$/.exec(e);
                        if (r && r[1]) {
                            n = {
                                type: "tag",
                                tagType: "part-inf"
                            };
                            n.attributes = d(r[1]);
                            ["PART-TARGET"].forEach((function(e) {
                                if (n.attributes.hasOwnProperty(e)) {
                                    n.attributes[e] = parseFloat(n.attributes[e])
                                }
                            }));
                            i.trigger("data", n);
                            return
                        }
                        r = /^#EXT-X-PRELOAD-HINT:(.*)$/.exec(e);
                        if (r && r[1]) {
                            n = {
                                type: "tag",
                                tagType: "preload-hint"
                            };
                            n.attributes = d(r[1]);
                            ["BYTERANGE-START", "BYTERANGE-LENGTH"].forEach((function(e) {
                                if (n.attributes.hasOwnProperty(e)) {
                                    n.attributes[e] = parseInt(n.attributes[e], 10);
                                    var t = e === "BYTERANGE-LENGTH" ? "length" : "offset";
                                    n.attributes.byterange = n.attributes.byterange || {};
                                    n.attributes.byterange[t] = n.attributes[e];
                                    delete n.attributes[e]
                                }
                            }));
                            i.trigger("data", n);
                            return
                        }
                        r = /^#EXT-X-RENDITION-REPORT:(.*)$/.exec(e);
                        if (r && r[1]) {
                            n = {
                                type: "tag",
                                tagType: "rendition-report"
                            };
                            n.attributes = d(r[1]);
                            ["LAST-MSN", "LAST-PART"].forEach((function(e) {
                                if (n.attributes.hasOwnProperty(e)) {
                                    n.attributes[e] = parseInt(n.attributes[e], 10)
                                }
                            }));
                            i.trigger("data", n);
                            return
                        }
                        i.trigger("data", {
                            type: "tag",
                            data: e.slice(4)
                        })
                    }))
                };
                i.addParser = function e(t) {
                    var i = this;
                    var r = t.expression,
                        n = t.customType,
                        a = t.dataParser,
                        s = t.segment;
                    if (typeof a !== "function") {
                        a = function e(t) {
                            return t
                        }
                    }
                    this.customParsers.push((function(e) {
                        var t = r.exec(e);
                        if (t) {
                            i.trigger("data", {
                                type: "custom",
                                data: a(e),
                                customType: n,
                                segment: s
                            });
                            return true
                        }
                    }))
                };
                i.addTagMapper = function e(t) {
                    var i = t.expression,
                        r = t.map;
                    var n = function e(t) {
                        if (i.test(t)) {
                            return r(t)
                        }
                        return t
                    };
                    this.tagMappers.push(n)
                };
                return t
            }(n["default"]);
            var p = function e(t) {
                return t.toLowerCase().replace(/-(\w)/g, (function(e) {
                    return e[1].toUpperCase()
                }))
            };
            var m = function e(t) {
                var i = {};
                Object.keys(t).forEach((function(e) {
                    i[p(e)] = t[e]
                }));
                return i
            };
            var v = function e(t) {
                var i = t.serverControl,
                    r = t.targetDuration,
                    n = t.partTargetDuration;
                if (!i) {
                    return
                }
                var a = "#EXT-X-SERVER-CONTROL";
                var s = "holdBack";
                var o = "partHoldBack";
                var u = r && r * 3;
                var l = n && n * 2;
                if (r && !i.hasOwnProperty(s)) {
                    i[s] = u;
                    this.trigger("info", {
                        message: a + " defaulting HOLD-BACK to targetDuration * 3 (" + u + ")."
                    })
                }
                if (u && i[s] < u) {
                    this.trigger("warn", {
                        message: a + " clamping HOLD-BACK (" + i[s] + ") to targetDuration * 3 (" + u + ")"
                    });
                    i[s] = u
                }
                if (n && !i.hasOwnProperty(o)) {
                    i[o] = n * 3;
                    this.trigger("info", {
                        message: a + " defaulting PART-HOLD-BACK to partTargetDuration * 3 (" + i[o] + ")."
                    })
                }
                if (n && i[o] < l) {
                    this.trigger("warn", {
                        message: a + " clamping PART-HOLD-BACK (" + i[o] + ") to partTargetDuration * 2 (" + l + ")."
                    });
                    i[o] = l
                }
            };
            var g = function(e) {
                r["default"](t, e);

                function t() {
                    var t;
                    t = e.call(this) || this;
                    t.lineStream = new u;
                    t.parseStream = new h;
                    t.lineStream.pipe(t.parseStream);
                    var i = s["default"](t);
                    var r = [];
                    var n = {};
                    var l;
                    var c;
                    var f = false;
                    var d = function e() {};
                    var p = {
                        AUDIO: {},
                        VIDEO: {},
                        "CLOSED-CAPTIONS": {},
                        SUBTITLES: {}
                    };
                    var g = "urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed";
                    var y = 0;
                    t.manifest = {
                        allowCache: true,
                        discontinuityStarts: [],
                        segments: []
                    };
                    var _ = 0;
                    var b = 0;
                    t.on("end", (function() {
                        if (n.uri || !n.parts && !n.preloadHints) {
                            return
                        }
                        if (!n.map && l) {
                            n.map = l
                        }
                        if (!n.key && c) {
                            n.key = c
                        }
                        if (!n.timeline && typeof y === "number") {
                            n.timeline = y
                        }
                        t.manifest.preloadSegment = n
                    }));
                    t.parseStream.on("data", (function(e) {
                        var t;
                        var s;
                        ({
                            tag: function u() {
                                ({
                                    version: function t() {
                                        if (e.version) {
                                            this.manifest.version = e.version
                                        }
                                    },
                                    "allow-cache": function t() {
                                        this.manifest.allowCache = e.allowed;
                                        if (!("allowed" in e)) {
                                            this.trigger("info", {
                                                message: "defaulting allowCache to YES"
                                            });
                                            this.manifest.allowCache = true
                                        }
                                    },
                                    byterange: function t() {
                                        var t = {};
                                        if ("length" in e) {
                                            n.byterange = t;
                                            t.length = e.length;
                                            if (!("offset" in e)) {
                                                e.offset = _
                                            }
                                        }
                                        if ("offset" in e) {
                                            n.byterange = t;
                                            t.offset = e.offset
                                        }
                                        _ = t.offset + t.length
                                    },
                                    endlist: function e() {
                                        this.manifest.endList = true
                                    },
                                    inf: function t() {
                                        if (!("mediaSequence" in this.manifest)) {
                                            this.manifest.mediaSequence = 0;
                                            this.trigger("info", {
                                                message: "defaulting media sequence to zero"
                                            })
                                        }
                                        if (!("discontinuitySequence" in this.manifest)) {
                                            this.manifest.discontinuitySequence = 0;
                                            this.trigger("info", {
                                                message: "defaulting discontinuity sequence to zero"
                                            })
                                        }
                                        if (e.duration > 0) {
                                            n.duration = e.duration
                                        }
                                        if (e.duration === 0) {
                                            n.duration = .01;
                                            this.trigger("info", {
                                                message: "updating zero segment duration to a small value"
                                            })
                                        }
                                        this.manifest.segments = r
                                    },
                                    key: function t() {
                                        if (!e.attributes) {
                                            this.trigger("warn", {
                                                message: "ignoring key declaration without attribute list"
                                            });
                                            return
                                        }
                                        if (e.attributes.METHOD === "NONE") {
                                            c = null;
                                            return
                                        }
                                        if (!e.attributes.URI) {
                                            this.trigger("warn", {
                                                message: "ignoring key declaration without URI"
                                            });
                                            return
                                        }
                                        if (e.attributes.KEYFORMAT === "com.apple.streamingkeydelivery") {
                                            this.manifest.contentProtection = this.manifest.contentProtection || {};
                                            this.manifest.contentProtection["com.apple.fps.1_0"] = {
                                                attributes: e.attributes
                                            };
                                            return
                                        }
                                        if (e.attributes.KEYFORMAT === "com.microsoft.playready") {
                                            this.manifest.contentProtection = this.manifest.contentProtection || {};
                                            this.manifest.contentProtection["com.microsoft.playready"] = {
                                                uri: e.attributes.URI
                                            };
                                            return
                                        }
                                        if (e.attributes.KEYFORMAT === g) {
                                            var i = ["SAMPLE-AES", "SAMPLE-AES-CTR", "SAMPLE-AES-CENC"];
                                            if (i.indexOf(e.attributes.METHOD) === -1) {
                                                this.trigger("warn", {
                                                    message: "invalid key method provided for Widevine"
                                                });
                                                return
                                            }
                                            if (e.attributes.METHOD === "SAMPLE-AES-CENC") {
                                                this.trigger("warn", {
                                                    message: "SAMPLE-AES-CENC is deprecated, please use SAMPLE-AES-CTR instead"
                                                })
                                            }
                                            if (e.attributes.URI.substring(0, 23) !== "data:text/plain;base64,") {
                                                this.trigger("warn", {
                                                    message: "invalid key URI provided for Widevine"
                                                });
                                                return
                                            }
                                            if (!(e.attributes.KEYID && e.attributes.KEYID.substring(0, 2) === "0x")) {
                                                this.trigger("warn", {
                                                    message: "invalid key ID provided for Widevine"
                                                });
                                                return
                                            }
                                            this.manifest.contentProtection = this.manifest.contentProtection || {};
                                            this.manifest.contentProtection["com.widevine.alpha"] = {
                                                attributes: {
                                                    schemeIdUri: e.attributes.KEYFORMAT,
                                                    keyId: e.attributes.KEYID.substring(2)
                                                },
                                                pssh: o["default"](e.attributes.URI.split(",")[1])
                                            };
                                            return
                                        }
                                        if (!e.attributes.METHOD) {
                                            this.trigger("warn", {
                                                message: "defaulting key method to AES-128"
                                            })
                                        }
                                        c = {
                                            method: e.attributes.METHOD || "AES-128",
                                            uri: e.attributes.URI
                                        };
                                        if (typeof e.attributes.IV !== "undefined") {
                                            c.iv = e.attributes.IV
                                        }
                                    },
                                    "media-sequence": function t() {
                                        if (!isFinite(e.number)) {
                                            this.trigger("warn", {
                                                message: "ignoring invalid media sequence: " + e.number
                                            });
                                            return
                                        }
                                        this.manifest.mediaSequence = e.number
                                    },
                                    "discontinuity-sequence": function t() {
                                        if (!isFinite(e.number)) {
                                            this.trigger("warn", {
                                                message: "ignoring invalid discontinuity sequence: " + e.number
                                            });
                                            return
                                        }
                                        this.manifest.discontinuitySequence = e.number;
                                        y = e.number
                                    },
                                    "playlist-type": function t() {
                                        if (!/VOD|EVENT/.test(e.playlistType)) {
                                            this.trigger("warn", {
                                                message: "ignoring unknown playlist type: " + e.playlist
                                            });
                                            return
                                        }
                                        this.manifest.playlistType = e.playlistType
                                    },
                                    map: function t() {
                                        l = {};
                                        if (e.uri) {
                                            l.uri = e.uri
                                        }
                                        if (e.byterange) {
                                            l.byterange = e.byterange
                                        }
                                        if (c) {
                                            l.key = c
                                        }
                                    },
                                    "stream-inf": function t() {
                                        this.manifest.playlists = r;
                                        this.manifest.mediaGroups = this.manifest.mediaGroups || p;
                                        if (!e.attributes) {
                                            this.trigger("warn", {
                                                message: "ignoring empty stream-inf attributes"
                                            });
                                            return
                                        }
                                        if (!n.attributes) {
                                            n.attributes = {}
                                        }
                                        a["default"](n.attributes, e.attributes)
                                    },
                                    media: function i() {
                                        this.manifest.mediaGroups = this.manifest.mediaGroups || p;
                                        if (!(e.attributes && e.attributes.TYPE && e.attributes["GROUP-ID"] && e.attributes.NAME)) {
                                            this.trigger("warn", {
                                                message: "ignoring incomplete or missing media group"
                                            });
                                            return
                                        }
                                        var r = this.manifest.mediaGroups[e.attributes.TYPE];
                                        r[e.attributes["GROUP-ID"]] = r[e.attributes["GROUP-ID"]] || {};
                                        t = r[e.attributes["GROUP-ID"]];
                                        s = {
                                            default: /yes/i.test(e.attributes.DEFAULT)
                                        };
                                        if (s.default) {
                                            s.autoselect = true
                                        } else {
                                            s.autoselect = /yes/i.test(e.attributes.AUTOSELECT)
                                        }
                                        if (e.attributes.LANGUAGE) {
                                            s.language = e.attributes.LANGUAGE
                                        }
                                        if (e.attributes.URI) {
                                            s.uri = e.attributes.URI
                                        }
                                        if (e.attributes["INSTREAM-ID"]) {
                                            s.instreamId = e.attributes["INSTREAM-ID"]
                                        }
                                        if (e.attributes.CHARACTERISTICS) {
                                            s.characteristics = e.attributes.CHARACTERISTICS
                                        }
                                        if (e.attributes.FORCED) {
                                            s.forced = /yes/i.test(e.attributes.FORCED)
                                        }
                                        t[e.attributes.NAME] = s
                                    },
                                    discontinuity: function e() {
                                        y += 1;
                                        n.discontinuity = true;
                                        this.manifest.discontinuityStarts.push(r.length)
                                    },
                                    "program-date-time": function t() {
                                        if (typeof this.manifest.dateTimeString === "undefined") {
                                            this.manifest.dateTimeString = e.dateTimeString;
                                            this.manifest.dateTimeObject = e.dateTimeObject
                                        }
                                        n.dateTimeString = e.dateTimeString;
                                        n.dateTimeObject = e.dateTimeObject
                                    },
                                    targetduration: function t() {
                                        if (!isFinite(e.duration) || e.duration < 0) {
                                            this.trigger("warn", {
                                                message: "ignoring invalid target duration: " + e.duration
                                            });
                                            return
                                        }
                                        this.manifest.targetDuration = e.duration;
                                        v.call(this, this.manifest)
                                    },
                                    start: function t() {
                                        if (!e.attributes || isNaN(e.attributes["TIME-OFFSET"])) {
                                            this.trigger("warn", {
                                                message: "ignoring start declaration without appropriate attribute list"
                                            });
                                            return
                                        }
                                        this.manifest.start = {
                                            timeOffset: e.attributes["TIME-OFFSET"],
                                            precise: e.attributes.PRECISE
                                        }
                                    },
                                    "cue-out": function t() {
                                        n.cueOut = e.data
                                    },
                                    "cue-out-cont": function t() {
                                        n.cueOutCont = e.data
                                    },
                                    "cue-in": function t() {
                                        n.cueIn = e.data
                                    },
                                    skip: function t() {
                                        this.manifest.skip = m(e.attributes);
                                        this.warnOnMissingAttributes_("#EXT-X-SKIP", e.attributes, ["SKIPPED-SEGMENTS"])
                                    },
                                    part: function t() {
                                        var i = this;
                                        f = true;
                                        var r = this.manifest.segments.length;
                                        var t = m(e.attributes);
                                        n.parts = n.parts || [];
                                        n.parts.push(t);
                                        if (t.byterange) {
                                            if (!t.byterange.hasOwnProperty("offset")) {
                                                t.byterange.offset = b
                                            }
                                            b = t.byterange.offset + t.byterange.length
                                        }
                                        var a = n.parts.length - 1;
                                        this.warnOnMissingAttributes_("#EXT-X-PART #" + a + " for segment #" + r, e.attributes, ["URI", "DURATION"]);
                                        if (this.manifest.renditionReports) {
                                            this.manifest.renditionReports.forEach((function(e, t) {
                                                if (!e.hasOwnProperty("lastPart")) {
                                                    i.trigger("warn", {
                                                        message: "#EXT-X-RENDITION-REPORT #" + t + " lacks required attribute(s): LAST-PART"
                                                    })
                                                }
                                            }))
                                        }
                                    },
                                    "server-control": function t() {
                                        var i = this.manifest.serverControl = m(e.attributes);
                                        if (!i.hasOwnProperty("canBlockReload")) {
                                            i.canBlockReload = false;
                                            this.trigger("info", {
                                                message: "#EXT-X-SERVER-CONTROL defaulting CAN-BLOCK-RELOAD to false"
                                            })
                                        }
                                        v.call(this, this.manifest);
                                        if (i.canSkipDateranges && !i.hasOwnProperty("canSkipUntil")) {
                                            this.trigger("warn", {
                                                message: "#EXT-X-SERVER-CONTROL lacks required attribute CAN-SKIP-UNTIL which is required when CAN-SKIP-DATERANGES is set"
                                            })
                                        }
                                    },
                                    "preload-hint": function t() {
                                        var i = this.manifest.segments.length;
                                        var r = m(e.attributes);
                                        var a = r.type && r.type === "PART";
                                        n.preloadHints = n.preloadHints || [];
                                        n.preloadHints.push(r);
                                        if (r.byterange) {
                                            if (!r.byterange.hasOwnProperty("offset")) {
                                                r.byterange.offset = a ? b : 0;
                                                if (a) {
                                                    b = r.byterange.offset + r.byterange.length
                                                }
                                            }
                                        }
                                        var s = n.preloadHints.length - 1;
                                        this.warnOnMissingAttributes_("#EXT-X-PRELOAD-HINT #" + s + " for segment #" + i, e.attributes, ["TYPE", "URI"]);
                                        if (!r.type) {
                                            return
                                        }
                                        for (var o = 0; o < n.preloadHints.length - 1; o++) {
                                            var u = n.preloadHints[o];
                                            if (!u.type) {
                                                continue
                                            }
                                            if (u.type === r.type) {
                                                this.trigger("warn", {
                                                    message: "#EXT-X-PRELOAD-HINT #" + s + " for segment #" + i + " has the same TYPE " + r.type + " as preload hint #" + o
                                                })
                                            }
                                        }
                                    },
                                    "rendition-report": function t() {
                                        var i = m(e.attributes);
                                        this.manifest.renditionReports = this.manifest.renditionReports || [];
                                        this.manifest.renditionReports.push(i);
                                        var r = this.manifest.renditionReports.length - 1;
                                        var n = ["LAST-MSN", "URI"];
                                        if (f) {
                                            n.push("LAST-PART")
                                        }
                                        this.warnOnMissingAttributes_("#EXT-X-RENDITION-REPORT #" + r, e.attributes, n)
                                    },
                                    "part-inf": function t() {
                                        this.manifest.partInf = m(e.attributes);
                                        this.warnOnMissingAttributes_("#EXT-X-PART-INF", e.attributes, ["PART-TARGET"]);
                                        if (this.manifest.partInf.partTarget) {
                                            this.manifest.partTargetDuration = this.manifest.partInf.partTarget
                                        }
                                        v.call(this, this.manifest)
                                    }
                                } [e.tagType] || d).call(i)
                            },
                            uri: function t() {
                                n.uri = e.uri;
                                r.push(n);
                                if (this.manifest.targetDuration && !("duration" in n)) {
                                    this.trigger("warn", {
                                        message: "defaulting segment duration to the target duration"
                                    });
                                    n.duration = this.manifest.targetDuration
                                }
                                if (c) {
                                    n.key = c
                                }
                                n.timeline = y;
                                if (l) {
                                    n.map = l
                                }
                                b = 0;
                                n = {}
                            },
                            comment: function e() {},
                            custom: function t() {
                                if (e.segment) {
                                    n.custom = n.custom || {};
                                    n.custom[e.customType] = e.data
                                } else {
                                    this.manifest.custom = this.manifest.custom || {};
                                    this.manifest.custom[e.customType] = e.data
                                }
                            }
                        })[e.type].call(i)
                    }));
                    return t
                }
                var i = t.prototype;
                i.warnOnMissingAttributes_ = function e(t, i, r) {
                    var n = [];
                    r.forEach((function(e) {
                        if (!i.hasOwnProperty(e)) {
                            n.push(e)
                        }
                    }));
                    if (n.length) {
                        this.trigger("warn", {
                            message: t + " lacks required attribute(s): " + n.join(", ")
                        })
                    }
                };
                i.push = function e(t) {
                    this.lineStream.push(t)
                };
                i.end = function e() {
                    this.lineStream.push("\n");
                    this.trigger("end")
                };
                i.addParser = function e(t) {
                    this.parseStream.addParser(t)
                };
                i.addTagMapper = function e(t) {
                    this.parseStream.addTagMapper(t)
                };
                return t
            }(n["default"]);
            t.LineStream = u;
            t.ParseStream = h;
            t.Parser = g
        }));
        r(Tg);
        Tg.LineStream;
        Tg.ParseStream;
        var Sg = Tg.Parser;
        var Eg = n((function(e, t) {
            Object.defineProperty(t, "__esModule", {
                value: true
            });
            t.default = void 0;
            var i = _g(st);
            var r = _g(s);
            var n = "http://example.com";
            var a = function e(t, a) {
                if (/^[a-z]+:/i.test(a)) {
                    return a
                }
                if (/^data:/.test(t)) {
                    t = r.default.location && r.default.location.href || ""
                }
                var s = typeof r.default.URL === "function";
                var o = /^\/\//.test(t);
                var u = !r.default.location && !/\/\//i.test(t);
                if (s) {
                    t = new r.default.URL(t, r.default.location || n)
                } else if (!/\/\//i.test(t)) {
                    t = i.default.buildAbsoluteURL(r.default.location && r.default.location.href || "", t)
                }
                if (s) {
                    var l = new URL(a, t);
                    if (u) {
                        return l.href.slice(n.length)
                    } else if (o) {
                        return l.href.slice(l.protocol.length)
                    }
                    return l.href
                }
                return i.default.buildAbsoluteURL(t, a)
            };
            var o = a;
            t.default = o;
            e.exports = t.default
        }));
        r(Eg);
        var wg = n((function(e, t) {
            Object.defineProperty(t, "__esModule", {
                value: true
            });
            t.forEachMediaGroup = void 0;
            var i = function e(t, i, r) {
                i.forEach((function(e) {
                    for (var i in t.mediaGroups[e]) {
                        for (var n in t.mediaGroups[e][i]) {
                            var a = t.mediaGroups[e][i][n];
                            r(a, e, i, n)
                        }
                    }
                }))
            };
            t.forEachMediaGroup = i
        }));
        r(wg);
        wg.forEachMediaGroup;
        var kg = n((function(e, t) {
            Object.defineProperty(t, "__esModule", {
                value: true
            });

            function i(e) {
                return e && typeof e === "object" && "default" in e ? e : {
                    default: e
                }
            }
            var r = i(Eg);
            var n = i(s);
            var a = i(bg);
            var o = "0.21.1";
            var u = function e(t) {
                return !!t && typeof t === "object"
            };
            var l = function e() {
                for (var t = arguments.length, i = new Array(t), r = 0; r < t; r++) {
                    i[r] = arguments[r]
                }
                return i.reduce((function(t, i) {
                    if (typeof i !== "object") {
                        return t
                    }
                    Object.keys(i).forEach((function(r) {
                        if (Array.isArray(t[r]) && Array.isArray(i[r])) {
                            t[r] = t[r].concat(i[r])
                        } else if (u(t[r]) && u(i[r])) {
                            t[r] = e(t[r], i[r])
                        } else {
                            t[r] = i[r]
                        }
                    }));
                    return t
                }), {})
            };
            var c = function e(t) {
                return Object.keys(t).map((function(e) {
                    return t[e]
                }))
            };
            var f = function e(t, i) {
                var r = [];
                for (var n = t; n < i; n++) {
                    r.push(n)
                }
                return r
            };
            var d = function e(t) {
                return t.reduce((function(e, t) {
                    return e.concat(t)
                }), [])
            };
            var h = function e(t) {
                if (!t.length) {
                    return []
                }
                var i = [];
                for (var r = 0; r < t.length; r++) {
                    i.push(t[r])
                }
                return i
            };
            var p = function e(t, i) {
                return t.reduce((function(e, t, r) {
                    if (t[i]) {
                        e.push(r)
                    }
                    return e
                }), [])
            };
            var m = function e(t, i) {
                for (var r = 0; r < t.length; r++) {
                    if (i(t[r])) {
                        return r
                    }
                }
                return -1
            };
            var v = function e(t, i) {
                return c(t.reduce((function(e, t) {
                    t.forEach((function(t) {
                        e[i(t)] = t
                    }));
                    return e
                }), {}))
            };
            var g = {
                INVALID_NUMBER_OF_PERIOD: "INVALID_NUMBER_OF_PERIOD",
                DASH_EMPTY_MANIFEST: "DASH_EMPTY_MANIFEST",
                DASH_INVALID_XML: "DASH_INVALID_XML",
                NO_BASE_URL: "NO_BASE_URL",
                MISSING_SEGMENT_INFORMATION: "MISSING_SEGMENT_INFORMATION",
                SEGMENT_TIME_UNSPECIFIED: "SEGMENT_TIME_UNSPECIFIED",
                UNSUPPORTED_UTC_TIMING_SCHEME: "UNSUPPORTED_UTC_TIMING_SCHEME"
            };
            var y = function e(t) {
                var i = t.baseUrl,
                    a = i === void 0 ? "" : i,
                    s = t.source,
                    o = s === void 0 ? "" : s,
                    u = t.range,
                    l = u === void 0 ? "" : u,
                    c = t.indexRange,
                    f = c === void 0 ? "" : c;
                var d = {
                    uri: o,
                    resolvedUri: r["default"](a || "", o)
                };
                if (l || f) {
                    var h = l ? l : f;
                    var p = h.split("-");
                    var m = n["default"].BigInt ? n["default"].BigInt(p[0]) : parseInt(p[0], 10);
                    var v = n["default"].BigInt ? n["default"].BigInt(p[1]) : parseInt(p[1], 10);
                    if (m < Number.MAX_SAFE_INTEGER && typeof m === "bigint") {
                        m = Number(m)
                    }
                    if (v < Number.MAX_SAFE_INTEGER && typeof v === "bigint") {
                        v = Number(v)
                    }
                    var g;
                    if (typeof v === "bigint" || typeof m === "bigint") {
                        g = n["default"].BigInt(v) - n["default"].BigInt(m) + n["default"].BigInt(1)
                    } else {
                        g = v - m + 1
                    }
                    if (typeof g === "bigint" && g < Number.MAX_SAFE_INTEGER) {
                        g = Number(g)
                    }
                    d.byterange = {
                        length: g,
                        offset: m
                    }
                }
                return d
            };
            var _ = function e(t) {
                var i;
                if (typeof t.offset === "bigint" || typeof t.length === "bigint") {
                    i = n["default"].BigInt(t.offset) + n["default"].BigInt(t.length) - n["default"].BigInt(1)
                } else {
                    i = t.offset + t.length - 1
                }
                return t.offset + "-" + i
            };
            var b = function e(t) {
                if (t && typeof t !== "number") {
                    t = parseInt(t, 10)
                }
                if (isNaN(t)) {
                    return null
                }
                return t
            };
            var T = {
                static: function e(t) {
                    var i = t.duration,
                        r = t.timescale,
                        n = r === void 0 ? 1 : r,
                        a = t.sourceDuration,
                        s = t.periodDuration;
                    var o = b(t.endNumber);
                    var u = i / n;
                    if (typeof o === "number") {
                        return {
                            start: 0,
                            end: o
                        }
                    }
                    if (typeof s === "number") {
                        return {
                            start: 0,
                            end: s / u
                        }
                    }
                    return {
                        start: 0,
                        end: a / u
                    }
                },
                dynamic: function e(t) {
                    var i = t.NOW,
                        r = t.clientOffset,
                        n = t.availabilityStartTime,
                        a = t.timescale,
                        s = a === void 0 ? 1 : a,
                        o = t.duration,
                        u = t.periodStart,
                        l = u === void 0 ? 0 : u,
                        c = t.minimumUpdatePeriod,
                        f = c === void 0 ? 0 : c,
                        d = t.timeShiftBufferDepth,
                        h = d === void 0 ? Infinity : d;
                    var p = b(t.endNumber);
                    var m = (i + r) / 1e3;
                    var v = n + l;
                    var g = m + f;
                    var y = g - v;
                    var _ = Math.ceil(y * s / o);
                    var T = Math.floor((m - v - h) * s / o);
                    var S = Math.floor((m - v) * s / o);
                    return {
                        start: Math.max(0, T),
                        end: typeof p === "number" ? p : Math.min(_, S)
                    }
                }
            };
            var S = function e(t) {
                return function(e) {
                    var i = t.duration,
                        r = t.timescale,
                        n = r === void 0 ? 1 : r,
                        a = t.periodStart,
                        s = t.startNumber,
                        o = s === void 0 ? 1 : s;
                    return {
                        number: o + e,
                        duration: i / n,
                        timeline: a,
                        time: e * i
                    }
                }
            };
            var E = function e(t) {
                var i = t.type,
                    r = t.duration,
                    n = t.timescale,
                    a = n === void 0 ? 1 : n,
                    s = t.periodDuration,
                    o = t.sourceDuration;
                var u = T[i](t),
                    l = u.start,
                    c = u.end;
                var d = f(l, c).map(S(t));
                if (i === "static") {
                    var h = d.length - 1;
                    var p = typeof s === "number" ? s : o;
                    d[h].duration = p - r / a * h
                }
                return d
            };
            var w = function e(t) {
                var i = t.baseUrl,
                    r = t.initialization,
                    n = r === void 0 ? {} : r,
                    a = t.sourceDuration,
                    s = t.indexRange,
                    o = s === void 0 ? "" : s,
                    u = t.periodStart,
                    l = t.presentationTime,
                    c = t.number,
                    f = c === void 0 ? 0 : c,
                    d = t.duration;
                if (!i) {
                    throw new Error(g.NO_BASE_URL)
                }
                var h = y({
                    baseUrl: i,
                    source: n.sourceURL,
                    range: n.range
                });
                var p = y({
                    baseUrl: i,
                    source: i,
                    indexRange: o
                });
                p.map = h;
                if (d) {
                    var m = E(t);
                    if (m.length) {
                        p.duration = m[0].duration;
                        p.timeline = m[0].timeline
                    }
                } else if (a) {
                    p.duration = a;
                    p.timeline = u
                }
                p.presentationTime = l || u;
                p.number = f;
                return [p]
            };
            var k = function e(t, i, r) {
                var a = t.sidx.map ? t.sidx.map : null;
                var s = t.sidx.duration;
                var o = t.timeline || 0;
                var u = t.sidx.byterange;
                var l = u.offset + u.length;
                var c = i.timescale;
                var f = i.references.filter((function(e) {
                    return e.referenceType !== 1
                }));
                var d = [];
                var h = t.endList ? "static" : "dynamic";
                var p = t.sidx.timeline;
                var m = p;
                var v = t.mediaSequence || 0;
                var g;
                if (typeof i.firstOffset === "bigint") {
                    g = n["default"].BigInt(l) + i.firstOffset
                } else {
                    g = l + i.firstOffset
                }
                for (var y = 0; y < f.length; y++) {
                    var _ = i.references[y];
                    var b = _.referencedSize;
                    var T = _.subsegmentDuration;
                    var S = void 0;
                    if (typeof g === "bigint") {
                        S = g + n["default"].BigInt(b) - n["default"].BigInt(1)
                    } else {
                        S = g + b - 1
                    }
                    var E = g + "-" + S;
                    var k = {
                        baseUrl: r,
                        timescale: c,
                        timeline: o,
                        periodStart: p,
                        presentationTime: m,
                        number: v,
                        duration: T,
                        sourceDuration: s,
                        indexRange: E,
                        type: h
                    };
                    var C = w(k)[0];
                    if (a) {
                        C.map = a
                    }
                    d.push(C);
                    if (typeof g === "bigint") {
                        g += n["default"].BigInt(b)
                    } else {
                        g += b
                    }
                    m += T / c;
                    v++
                }
                t.segments = d;
                return t
            };
            var C = ["AUDIO", "SUBTITLES"];
            var I = 1 / 60;
            var A = function e(t) {
                return v(t, (function(e) {
                    var t = e.timeline;
                    return t
                })).sort((function(e, t) {
                    return e.timeline > t.timeline ? 1 : -1
                }))
            };
            var x = function e(t, i) {
                for (var r = 0; r < t.length; r++) {
                    if (t[r].attributes.NAME === i) {
                        return t[r]
                    }
                }
                return null
            };
            var P = function e(t) {
                var i = [];
                wg.forEachMediaGroup(t, C, (function(e, t, r, n) {
                    i = i.concat(e.playlists || [])
                }));
                return i
            };
            var O = function e(t) {
                var i = t.playlist,
                    r = t.mediaSequence;
                i.mediaSequence = r;
                i.segments.forEach((function(e, t) {
                    e.number = i.mediaSequence + t
                }))
            };
            var D = function e(t) {
                var i = t.oldPlaylists,
                    r = t.newPlaylists,
                    n = t.timelineStarts;
                r.forEach((function(e) {
                    e.discontinuitySequence = m(n, (function(t) {
                        var i = t.timeline;
                        return i === e.timeline
                    }));
                    var t = x(i, e.attributes.NAME);
                    if (!t) {
                        return
                    }
                    if (e.sidx) {
                        return
                    }
                    var r = e.segments[0];
                    var a = m(t.segments, (function(e) {
                        return Math.abs(e.presentationTime - r.presentationTime) < I
                    }));
                    if (a === -1) {
                        O({
                            playlist: e,
                            mediaSequence: t.mediaSequence + t.segments.length
                        });
                        e.segments[0].discontinuity = true;
                        e.discontinuityStarts.unshift(0);
                        if (!t.segments.length && e.timeline > t.timeline || t.segments.length && e.timeline > t.segments[t.segments.length - 1].timeline) {
                            e.discontinuitySequence--
                        }
                        return
                    }
                    var s = t.segments[a];
                    if (s.discontinuity && !r.discontinuity) {
                        r.discontinuity = true;
                        e.discontinuityStarts.unshift(0);
                        e.discontinuitySequence--
                    }
                    O({
                        playlist: e,
                        mediaSequence: t.segments[a].number
                    })
                }))
            };
            var L = function e(t) {
                var i = t.oldManifest,
                    r = t.newManifest;
                var n = i.playlists.concat(P(i));
                var a = r.playlists.concat(P(r));
                r.timelineStarts = A([i.timelineStarts, r.timelineStarts]);
                D({
                    oldPlaylists: n,
                    newPlaylists: a,
                    timelineStarts: r.timelineStarts
                });
                return r
            };
            var N = function e(t) {
                return t && t.uri + "-" + _(t.byterange)
            };
            var R = function e(t) {
                var i = c(t.reduce((function(e, t) {
                    var i = t.attributes.id + (t.attributes.lang || "");
                    if (!e[i]) {
                        e[i] = t;
                        e[i].attributes.timelineStarts = []
                    } else {
                        if (t.segments) {
                            var r;
                            if (t.segments[0]) {
                                t.segments[0].discontinuity = true
                            }(r = e[i].segments).push.apply(r, t.segments)
                        }
                        if (t.attributes.contentProtection) {
                            e[i].attributes.contentProtection = t.attributes.contentProtection
                        }
                    }
                    e[i].attributes.timelineStarts.push({
                        start: t.attributes.periodStart,
                        timeline: t.attributes.periodStart
                    });
                    return e
                }), {}));
                return i.map((function(e) {
                    e.discontinuityStarts = p(e.segments || [], "discontinuity");
                    return e
                }))
            };
            var M = function e(t, i) {
                var r = N(t.sidx);
                var n = r && i[r] && i[r].sidx;
                if (n) {
                    k(t, n, t.sidx.resolvedUri)
                }
                return t
            };
            var U = function e(t, i) {
                if (i === void 0) {
                    i = {}
                }
                if (!Object.keys(i).length) {
                    return t
                }
                for (var r in t) {
                    t[r] = M(t[r], i)
                }
                return t
            };
            var B = function e(t, i) {
                var r;
                var n = t.attributes,
                    a = t.segments,
                    s = t.sidx,
                    o = t.mediaSequence,
                    u = t.discontinuitySequence,
                    l = t.discontinuityStarts;
                var c = {
                    attributes: (r = {
                        NAME: n.id,
                        BANDWIDTH: n.bandwidth,
                        CODECS: n.codecs
                    }, r["PROGRAM-ID"] = 1, r),
                    uri: "",
                    endList: n.type === "static",
                    timeline: n.periodStart,
                    resolvedUri: "",
                    targetDuration: n.duration,
                    discontinuitySequence: u,
                    discontinuityStarts: l,
                    timelineStarts: n.timelineStarts,
                    mediaSequence: o,
                    segments: a
                };
                if (n.contentProtection) {
                    c.contentProtection = n.contentProtection
                }
                if (s) {
                    c.sidx = s
                }
                if (i) {
                    c.attributes.AUDIO = "audio";
                    c.attributes.SUBTITLES = "subs"
                }
                return c
            };
            var F = function e(t) {
                var i;
                var r = t.attributes,
                    n = t.segments,
                    a = t.mediaSequence,
                    s = t.discontinuityStarts,
                    o = t.discontinuitySequence;
                if (typeof n === "undefined") {
                    n = [{
                        uri: r.baseUrl,
                        timeline: r.periodStart,
                        resolvedUri: r.baseUrl || "",
                        duration: r.sourceDuration,
                        number: 0
                    }];
                    r.duration = r.sourceDuration
                }
                var u = (i = {
                    NAME: r.id,
                    BANDWIDTH: r.bandwidth
                }, i["PROGRAM-ID"] = 1, i);
                if (r.codecs) {
                    u.CODECS = r.codecs
                }
                return {
                    attributes: u,
                    uri: "",
                    endList: r.type === "static",
                    timeline: r.periodStart,
                    resolvedUri: r.baseUrl || "",
                    targetDuration: r.duration,
                    timelineStarts: r.timelineStarts,
                    discontinuityStarts: s,
                    discontinuitySequence: o,
                    mediaSequence: a,
                    segments: n
                }
            };
            var j = function e(t, i, r) {
                if (i === void 0) {
                    i = {}
                }
                if (r === void 0) {
                    r = false
                }
                var n;
                var a = t.reduce((function(e, t) {
                    var a = t.attributes.role && t.attributes.role.value || "";
                    var s = t.attributes.lang || "";
                    var o = t.attributes.label || "main";
                    if (s && !t.attributes.label) {
                        var u = a ? " (" + a + ")" : "";
                        o = "" + t.attributes.lang + u
                    }
                    if (!e[o]) {
                        e[o] = {
                            language: s,
                            autoselect: true,
                            default: a === "main",
                            playlists: [],
                            uri: ""
                        }
                    }
                    var l = M(B(t, r), i);
                    e[o].playlists.push(l);
                    if (typeof n === "undefined" && a === "main") {
                        n = t;
                        n.default = true
                    }
                    return e
                }), {});
                if (!n) {
                    var s = Object.keys(a)[0];
                    a[s].default = true
                }
                return a
            };
            var H = function e(t, i) {
                if (i === void 0) {
                    i = {}
                }
                return t.reduce((function(e, t) {
                    var r = t.attributes.lang || "text";
                    if (!e[r]) {
                        e[r] = {
                            language: r,
                            default: false,
                            autoselect: false,
                            playlists: [],
                            uri: ""
                        }
                    }
                    e[r].playlists.push(M(F(t), i));
                    return e
                }), {})
            };
            var q = function e(t) {
                return t.reduce((function(e, t) {
                    if (!t) {
                        return e
                    }
                    t.forEach((function(t) {
                        var i = t.channel,
                            r = t.language;
                        e[r] = {
                            autoselect: false,
                            default: false,
                            instreamId: i,
                            language: r
                        };
                        if (t.hasOwnProperty("aspectRatio")) {
                            e[r].aspectRatio = t.aspectRatio
                        }
                        if (t.hasOwnProperty("easyReader")) {
                            e[r].easyReader = t.easyReader
                        }
                        if (t.hasOwnProperty("3D")) {
                            e[r]["3D"] = t["3D"]
                        }
                    }));
                    return e
                }), {})
            };
            var V = function e(t) {
                var i;
                var r = t.attributes,
                    n = t.segments,
                    a = t.sidx,
                    s = t.discontinuityStarts;
                var o = {
                    attributes: (i = {
                        NAME: r.id,
                        AUDIO: "audio",
                        SUBTITLES: "subs",
                        RESOLUTION: {
                            width: r.width,
                            height: r.height
                        },
                        CODECS: r.codecs,
                        BANDWIDTH: r.bandwidth
                    }, i["PROGRAM-ID"] = 1, i),
                    uri: "",
                    endList: r.type === "static",
                    timeline: r.periodStart,
                    resolvedUri: "",
                    targetDuration: r.duration,
                    discontinuityStarts: s,
                    timelineStarts: r.timelineStarts,
                    segments: n
                };
                if (r.contentProtection) {
                    o.contentProtection = r.contentProtection
                }
                if (a) {
                    o.sidx = a
                }
                return o
            };
            var W = function e(t) {
                var i = t.attributes;
                return i.mimeType === "video/mp4" || i.mimeType === "video/webm" || i.contentType === "video"
            };
            var G = function e(t) {
                var i = t.attributes;
                return i.mimeType === "audio/mp4" || i.mimeType === "audio/webm" || i.contentType === "audio"
            };
            var X = function e(t) {
                var i = t.attributes;
                return i.mimeType === "text/vtt" || i.contentType === "text"
            };
            var z = function e(t, i) {
                t.forEach((function(e) {
                    e.mediaSequence = 0;
                    e.discontinuitySequence = m(i, (function(t) {
                        var i = t.timeline;
                        return i === e.timeline
                    }));
                    if (!e.segments) {
                        return
                    }
                    e.segments.forEach((function(e, t) {
                        e.number = t
                    }))
                }))
            };
            var K = function e(t) {
                if (!t) {
                    return []
                }
                return Object.keys(t).reduce((function(e, i) {
                    var r = t[i];
                    return e.concat(r.playlists)
                }), [])
            };
            var Y = function e(t) {
                var i;
                var r = t.dashPlaylists,
                    n = t.locations,
                    a = t.sidxMapping,
                    s = a === void 0 ? {} : a,
                    o = t.previousManifest;
                if (!r.length) {
                    return {}
                }
                var u = r[0].attributes,
                    l = u.sourceDuration,
                    c = u.type,
                    f = u.suggestedPresentationDelay,
                    d = u.minimumUpdatePeriod;
                var h = R(r.filter(W)).map(V);
                var p = R(r.filter(G));
                var m = R(r.filter(X));
                var v = r.map((function(e) {
                    return e.attributes.captionServices
                })).filter(Boolean);
                var g = {
                    allowCache: true,
                    discontinuityStarts: [],
                    segments: [],
                    endList: true,
                    mediaGroups: (i = {
                        AUDIO: {},
                        VIDEO: {}
                    }, i["CLOSED-CAPTIONS"] = {}, i.SUBTITLES = {}, i),
                    uri: "",
                    duration: l,
                    playlists: U(h, s)
                };
                if (d >= 0) {
                    g.minimumUpdatePeriod = d * 1e3
                }
                if (n) {
                    g.locations = n
                }
                if (c === "dynamic") {
                    g.suggestedPresentationDelay = f
                }
                var y = g.playlists.length === 0;
                var _ = p.length ? j(p, s, y) : null;
                var b = m.length ? H(m, s) : null;
                var T = h.concat(K(_), K(b));
                var S = T.map((function(e) {
                    var t = e.timelineStarts;
                    return t
                }));
                g.timelineStarts = A(S);
                z(T, g.timelineStarts);
                if (_) {
                    g.mediaGroups.AUDIO.audio = _
                }
                if (b) {
                    g.mediaGroups.SUBTITLES.subs = b
                }
                if (v.length) {
                    g.mediaGroups["CLOSED-CAPTIONS"].cc = q(v)
                }
                if (o) {
                    return L({
                        oldManifest: o,
                        newManifest: g
                    })
                }
                return g
            };
            var $ = function e(t, i, r) {
                var n = t.NOW,
                    a = t.clientOffset,
                    s = t.availabilityStartTime,
                    o = t.timescale,
                    u = o === void 0 ? 1 : o,
                    l = t.periodStart,
                    c = l === void 0 ? 0 : l,
                    f = t.minimumUpdatePeriod,
                    d = f === void 0 ? 0 : f;
                var h = (n + a) / 1e3;
                var p = s + c;
                var m = h + d;
                var v = m - p;
                return Math.ceil((v * u - i) / r)
            };
            var Q = function e(t, i) {
                var r = t.type,
                    n = t.minimumUpdatePeriod,
                    a = n === void 0 ? 0 : n,
                    s = t.media,
                    o = s === void 0 ? "" : s,
                    u = t.sourceDuration,
                    l = t.timescale,
                    c = l === void 0 ? 1 : l,
                    f = t.startNumber,
                    d = f === void 0 ? 1 : f,
                    h = t.periodStart;
                var p = [];
                var m = -1;
                for (var v = 0; v < i.length; v++) {
                    var g = i[v];
                    var y = g.d;
                    var _ = g.r || 0;
                    var b = g.t || 0;
                    if (m < 0) {
                        m = b
                    }
                    if (b && b > m) {
                        m = b
                    }
                    var T = void 0;
                    if (_ < 0) {
                        var S = v + 1;
                        if (S === i.length) {
                            if (r === "dynamic" && a > 0 && o.indexOf("$Number$") > 0) {
                                T = $(t, m, y)
                            } else {
                                T = (u * c - m) / y
                            }
                        } else {
                            T = (i[S].t - m) / y
                        }
                    } else {
                        T = _ + 1
                    }
                    var E = d + p.length + T;
                    var w = d + p.length;
                    while (w < E) {
                        p.push({
                            number: w,
                            duration: y / c,
                            time: m,
                            timeline: h
                        });
                        m += y;
                        w++
                    }
                }
                return p
            };
            var J = /\$([A-z]*)(?:(%0)([0-9]+)d)?\$/g;
            var Z = function e(t) {
                return function(e, i, r, n) {
                    if (e === "$$") {
                        return "$"
                    }
                    if (typeof t[i] === "undefined") {
                        return e
                    }
                    var a = "" + t[i];
                    if (i === "RepresentationID") {
                        return a
                    }
                    if (!r) {
                        n = 1
                    } else {
                        n = parseInt(n, 10)
                    }
                    if (a.length >= n) {
                        return a
                    }
                    return "" + new Array(n - a.length + 1).join("0") + a
                }
            };
            var ee = function e(t, i) {
                return t.replace(J, Z(i))
            };
            var te = function e(t, i) {
                if (!t.duration && !i) {
                    return [{
                        number: t.startNumber || 1,
                        duration: t.sourceDuration,
                        time: 0,
                        timeline: t.periodStart
                    }]
                }
                if (t.duration) {
                    return E(t)
                }
                return Q(t, i)
            };
            var ie = function e(t, i) {
                var n = {
                    RepresentationID: t.id,
                    Bandwidth: t.bandwidth || 0
                };
                var a = t.initialization,
                    s = a === void 0 ? {
                        sourceURL: "",
                        range: ""
                    } : a;
                var o = y({
                    baseUrl: t.baseUrl,
                    source: ee(s.sourceURL, n),
                    range: s.range
                });
                var u = te(t, i);
                return u.map((function(e) {
                    n.Number = e.number;
                    n.Time = e.time;
                    var i = ee(t.media || "", n);
                    var a = t.timescale || 1;
                    var s = t.presentationTimeOffset || 0;
                    var u = t.periodStart + (e.time - s) / a;
                    var l = {
                        uri: i,
                        timeline: e.timeline,
                        duration: e.duration,
                        resolvedUri: r["default"](t.baseUrl || "", i),
                        map: o,
                        number: e.number,
                        presentationTime: u
                    };
                    return l
                }))
            };
            var re = function e(t, i) {
                var r = t.baseUrl,
                    n = t.initialization,
                    a = n === void 0 ? {} : n;
                var s = y({
                    baseUrl: r,
                    source: a.sourceURL,
                    range: a.range
                });
                var o = y({
                    baseUrl: r,
                    source: i.media,
                    range: i.mediaRange
                });
                o.map = s;
                return o
            };
            var ne = function e(t, i) {
                var r = t.duration,
                    n = t.segmentUrls,
                    a = n === void 0 ? [] : n,
                    s = t.periodStart;
                if (!r && !i || r && i) {
                    throw new Error(g.SEGMENT_TIME_UNSPECIFIED)
                }
                var o = a.map((function(e) {
                    return re(t, e)
                }));
                var u;
                if (r) {
                    u = E(t)
                }
                if (i) {
                    u = Q(t, i)
                }
                var l = u.map((function(e, i) {
                    if (o[i]) {
                        var r = o[i];
                        var n = t.timescale || 1;
                        var a = t.presentationTimeOffset || 0;
                        r.timeline = e.timeline;
                        r.duration = e.duration;
                        r.number = e.number;
                        r.presentationTime = s + (e.time - a) / n;
                        return r
                    }
                })).filter((function(e) {
                    return e
                }));
                return l
            };
            var ae = function e(t) {
                var i = t.attributes,
                    r = t.segmentInfo;
                var n;
                var a;
                if (r.template) {
                    a = ie;
                    n = l(i, r.template)
                } else if (r.base) {
                    a = w;
                    n = l(i, r.base)
                } else if (r.list) {
                    a = ne;
                    n = l(i, r.list)
                }
                var s = {
                    attributes: i
                };
                if (!a) {
                    return s
                }
                var o = a(n, r.segmentTimeline);
                if (n.duration) {
                    var u = n,
                        c = u.duration,
                        f = u.timescale,
                        d = f === void 0 ? 1 : f;
                    n.duration = c / d
                } else if (o.length) {
                    n.duration = o.reduce((function(e, t) {
                        return Math.max(e, Math.ceil(t.duration))
                    }), 0)
                } else {
                    n.duration = 0
                }
                s.attributes = n;
                s.segments = o;
                if (r.base && n.indexRange) {
                    s.sidx = o[0];
                    s.segments = []
                }
                return s
            };
            var se = function e(t) {
                return t.map(ae)
            };
            var oe = function e(t, i) {
                return h(t.childNodes).filter((function(e) {
                    var t = e.tagName;
                    return t === i
                }))
            };
            var ue = function e(t) {
                return t.textContent.trim()
            };
            var le = function e(t) {
                var i = 365 * 24 * 60 * 60;
                var r = 30 * 24 * 60 * 60;
                var n = 24 * 60 * 60;
                var a = 60 * 60;
                var s = 60;
                var o = /P(?:(\d*)Y)?(?:(\d*)M)?(?:(\d*)D)?(?:T(?:(\d*)H)?(?:(\d*)M)?(?:([\d.]*)S)?)?/;
                var u = o.exec(t);
                if (!u) {
                    return 0
                }
                var l = u.slice(1),
                    c = l[0],
                    f = l[1],
                    d = l[2],
                    h = l[3],
                    p = l[4],
                    m = l[5];
                return parseFloat(c || 0) * i + parseFloat(f || 0) * r + parseFloat(d || 0) * n + parseFloat(h || 0) * a + parseFloat(p || 0) * s + parseFloat(m || 0)
            };
            var ce = function e(t) {
                var i = /^\d+-\d+-\d+T\d+:\d+:\d+(\.\d+)?$/;
                if (i.test(t)) {
                    t += "Z"
                }
                return Date.parse(t)
            };
            var fe = {
                mediaPresentationDuration: function e(t) {
                    return le(t)
                },
                availabilityStartTime: function e(t) {
                    return ce(t) / 1e3
                },
                minimumUpdatePeriod: function e(t) {
                    return le(t)
                },
                suggestedPresentationDelay: function e(t) {
                    return le(t)
                },
                type: function e(t) {
                    return t
                },
                timeShiftBufferDepth: function e(t) {
                    return le(t)
                },
                start: function e(t) {
                    return le(t)
                },
                width: function e(t) {
                    return parseInt(t, 10)
                },
                height: function e(t) {
                    return parseInt(t, 10)
                },
                bandwidth: function e(t) {
                    return parseInt(t, 10)
                },
                startNumber: function e(t) {
                    return parseInt(t, 10)
                },
                timescale: function e(t) {
                    return parseInt(t, 10)
                },
                presentationTimeOffset: function e(t) {
                    return parseInt(t, 10)
                },
                duration: function e(t) {
                    var i = parseInt(t, 10);
                    if (isNaN(i)) {
                        return le(t)
                    }
                    return i
                },
                d: function e(t) {
                    return parseInt(t, 10)
                },
                t: function e(t) {
                    return parseInt(t, 10)
                },
                r: function e(t) {
                    return parseInt(t, 10)
                },
                DEFAULT: function e(t) {
                    return t
                }
            };
            var de = function e(t) {
                if (!(t && t.attributes)) {
                    return {}
                }
                return h(t.attributes).reduce((function(e, t) {
                    var i = fe[t.name] || fe.DEFAULT;
                    e[t.name] = i(t.value);
                    return e
                }), {})
            };
            var he = {
                "urn:uuid:1077efec-c0b2-4d02-ace3-3c1e52e2fb4b": "org.w3.clearkey",
                "urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed": "com.widevine.alpha",
                "urn:uuid:9a04f079-9840-4286-ab92-e65be0885f95": "com.microsoft.playready",
                "urn:uuid:f239e769-efa3-4850-9c16-a903c6932efb": "com.adobe.primetime"
            };
            var pe = function e(t, i) {
                if (!i.length) {
                    return t
                }
                return d(t.map((function(e) {
                    return i.map((function(t) {
                        return r["default"](e, ue(t))
                    }))
                })))
            };
            var me = function e(t) {
                var i = oe(t, "SegmentTemplate")[0];
                var r = oe(t, "SegmentList")[0];
                var n = r && oe(r, "SegmentURL").map((function(e) {
                    return l({
                        tag: "SegmentURL"
                    }, de(e))
                }));
                var a = oe(t, "SegmentBase")[0];
                var s = r || i;
                var o = s && oe(s, "SegmentTimeline")[0];
                var u = r || a || i;
                var c = u && oe(u, "Initialization")[0];
                var f = i && de(i);
                if (f && c) {
                    f.initialization = c && de(c)
                } else if (f && f.initialization) {
                    f.initialization = {
                        sourceURL: f.initialization
                    }
                }
                var d = {
                    template: f,
                    segmentTimeline: o && oe(o, "S").map((function(e) {
                        return de(e)
                    })),
                    list: r && l(de(r), {
                        segmentUrls: n,
                        initialization: de(c)
                    }),
                    base: a && l(de(a), {
                        initialization: de(c)
                    })
                };
                Object.keys(d).forEach((function(e) {
                    if (!d[e]) {
                        delete d[e]
                    }
                }));
                return d
            };
            var ve = function e(t, i, r) {
                return function(e) {
                    var n = oe(e, "BaseURL");
                    var a = pe(i, n);
                    var s = l(t, de(e));
                    var o = me(e);
                    return a.map((function(e) {
                        return {
                            segmentInfo: l(r, o),
                            attributes: l(s, {
                                baseUrl: e
                            })
                        }
                    }))
                }
            };
            var ge = function e(t) {
                return t.reduce((function(e, t) {
                    var i = de(t);
                    if (i.schemeIdUri) {
                        i.schemeIdUri = i.schemeIdUri.toLowerCase()
                    }
                    var r = he[i.schemeIdUri];
                    if (r) {
                        e[r] = {
                            attributes: i
                        };
                        var n = oe(t, "cenc:pssh")[0];
                        if (n) {
                            var s = ue(n);
                            e[r].pssh = s && a["default"](s)
                        }
                    }
                    return e
                }), {})
            };
            var ye = function e(t) {
                if (t.schemeIdUri === "urn:scte:dash:cc:cea-608:2015") {
                    var i = typeof t.value !== "string" ? [] : t.value.split(";");
                    return i.map((function(e) {
                        var t;
                        var i;
                        i = e;
                        if (/^CC\d=/.test(e)) {
                            var r = e.split("=");
                            t = r[0];
                            i = r[1]
                        } else if (/^CC\d$/.test(e)) {
                            t = e
                        }
                        return {
                            channel: t,
                            language: i
                        }
                    }))
                } else if (t.schemeIdUri === "urn:scte:dash:cc:cea-708:2015") {
                    var r = typeof t.value !== "string" ? [] : t.value.split(";");
                    return r.map((function(e) {
                        var t = {
                            channel: undefined,
                            language: undefined,
                            aspectRatio: 1,
                            easyReader: 0,
                            "3D": 0
                        };
                        if (/=/.test(e)) {
                            var i = e.split("="),
                                r = i[0],
                                n = i[1],
                                a = n === void 0 ? "" : n;
                            t.channel = r;
                            t.language = e;
                            a.split(",").forEach((function(e) {
                                var i = e.split(":"),
                                    r = i[0],
                                    n = i[1];
                                if (r === "lang") {
                                    t.language = n
                                } else if (r === "er") {
                                    t.easyReader = Number(n)
                                } else if (r === "war") {
                                    t.aspectRatio = Number(n)
                                } else if (r === "3D") {
                                    t["3D"] = Number(n)
                                }
                            }))
                        } else {
                            t.language = e
                        }
                        if (t.channel) {
                            t.channel = "SERVICE" + t.channel
                        }
                        return t
                    }))
                }
            };
            var _e = function e(t, i, r) {
                return function(e) {
                    var n = de(e);
                    var a = pe(i, oe(e, "BaseURL"));
                    var s = oe(e, "Role")[0];
                    var o = {
                        role: de(s)
                    };
                    var u = l(t, n, o);
                    var c = oe(e, "Accessibility")[0];
                    var f = ye(de(c));
                    if (f) {
                        u = l(u, {
                            captionServices: f
                        })
                    }
                    var h = oe(e, "Label")[0];
                    if (h && h.childNodes.length) {
                        var p = h.childNodes[0].nodeValue.trim();
                        u = l(u, {
                            label: p
                        })
                    }
                    var m = ge(oe(e, "ContentProtection"));
                    if (Object.keys(m).length) {
                        u = l(u, {
                            contentProtection: m
                        })
                    }
                    var v = me(e);
                    var g = oe(e, "Representation");
                    var y = l(r, v);
                    return d(g.map(ve(u, a, y)))
                }
            };
            var be = function e(t, i) {
                return function(e, r) {
                    var n = pe(i, oe(e.node, "BaseURL"));
                    var a = l(t, {
                        periodStart: e.attributes.start
                    });
                    if (typeof e.attributes.duration === "number") {
                        a.periodDuration = e.attributes.duration
                    }
                    var s = oe(e.node, "AdaptationSet");
                    var o = me(e.node);
                    return d(s.map(_e(a, n, o)))
                }
            };
            var Te = function e(t) {
                var i = t.attributes,
                    r = t.priorPeriodAttributes,
                    n = t.mpdType;
                if (typeof i.start === "number") {
                    return i.start
                }
                if (r && typeof r.start === "number" && typeof r.duration === "number") {
                    return r.start + r.duration
                }
                if (!r && n === "static") {
                    return 0
                }
                return null
            };
            var Se = function e(t, i) {
                if (i === void 0) {
                    i = {}
                }
                var r = i,
                    n = r.manifestUri,
                    a = n === void 0 ? "" : n,
                    s = r.NOW,
                    o = s === void 0 ? Date.now() : s,
                    u = r.clientOffset,
                    l = u === void 0 ? 0 : u;
                var c = oe(t, "Period");
                if (!c.length) {
                    throw new Error(g.INVALID_NUMBER_OF_PERIOD)
                }
                var f = oe(t, "Location");
                var h = de(t);
                var p = pe([a], oe(t, "BaseURL"));
                h.type = h.type || "static";
                h.sourceDuration = h.mediaPresentationDuration || 0;
                h.NOW = o;
                h.clientOffset = l;
                if (f.length) {
                    h.locations = f.map(ue)
                }
                var m = [];
                c.forEach((function(e, t) {
                    var i = de(e);
                    var r = m[t - 1];
                    i.start = Te({
                        attributes: i,
                        priorPeriodAttributes: r ? r.attributes : null,
                        mpdType: h.type
                    });
                    m.push({
                        node: e,
                        attributes: i
                    })
                }));
                return {
                    locations: h.locations,
                    representationInfo: d(m.map(be(h, p)))
                }
            };
            var Ee = function e(t) {
                if (t === "") {
                    throw new Error(g.DASH_EMPTY_MANIFEST)
                }
                var i = new yn.DOMParser;
                var r;
                var n;
                try {
                    r = i.parseFromString(t, "application/xml");
                    n = r && r.documentElement.tagName === "MPD" ? r.documentElement : null
                } catch (e) {}
                if (!n || n && n.getElementsByTagName("parsererror").length > 0) {
                    throw new Error(g.DASH_INVALID_XML)
                }
                return n
            };
            var we = function e(t) {
                var i = oe(t, "UTCTiming")[0];
                if (!i) {
                    return null
                }
                var r = de(i);
                switch (r.schemeIdUri) {
                    case "urn:mpeg:dash:utc:http-head:2014":
                    case "urn:mpeg:dash:utc:http-head:2012":
                        r.method = "HEAD";
                        break;
                    case "urn:mpeg:dash:utc:http-xsdate:2014":
                    case "urn:mpeg:dash:utc:http-iso:2014":
                    case "urn:mpeg:dash:utc:http-xsdate:2012":
                    case "urn:mpeg:dash:utc:http-iso:2012":
                        r.method = "GET";
                        break;
                    case "urn:mpeg:dash:utc:direct:2014":
                    case "urn:mpeg:dash:utc:direct:2012":
                        r.method = "DIRECT";
                        r.value = Date.parse(r.value);
                        break;
                    case "urn:mpeg:dash:utc:http-ntp:2014":
                    case "urn:mpeg:dash:utc:ntp:2014":
                    case "urn:mpeg:dash:utc:sntp:2014":
                    default:
                        throw new Error(g.UNSUPPORTED_UTC_TIMING_SCHEME)
                }
                return r
            };
            var ke = o;
            var Ce = function e(t, i) {
                if (i === void 0) {
                    i = {}
                }
                var r = Se(Ee(t), i);
                var n = se(r.representationInfo);
                return Y({
                    dashPlaylists: n,
                    locations: r.locations,
                    sidxMapping: i.sidxMapping,
                    previousManifest: i.previousManifest
                })
            };
            var Ie = function e(t) {
                return we(Ee(t))
            };
            t.VERSION = ke;
            t.addSidxSegmentsToPlaylist = k;
            t.generateSidxKey = N;
            t.inheritAttributes = Se;
            t.parse = Ce;
            t.parseUTCTiming = Ie;
            t.stringToMpdXml = Ee;
            t.toM3u8 = Y;
            t.toPlaylists = se
        }));
        r(kg);
        kg.VERSION;
        kg.addSidxSegmentsToPlaylist;
        kg.generateSidxKey;
        kg.inheritAttributes;
        var Cg = kg.parse;
        kg.parseUTCTiming;
        kg.stringToMpdXml;
        kg.toM3u8;
        kg.toPlaylists;
        var Ig = function(e) {
            var t = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
            var i = new Uint8Array(new ArrayBuffer(3 * e.length / 4 + 4));
            var r = 0;
            for (var n = 0; n < e.length;) {
                var a = t.indexOf(e.charAt(n));
                var s = t.indexOf(e.charAt(n + 1));
                if (i[r++] = a << 2 | s >> 4, "=" !== e.charAt(n + 2)) {
                    var o = t.indexOf(e.charAt(n + 2));
                    if (i[r++] = s << 4 | o >> 2, "=" !== e.charAt(n + 3)) {
                        var u = t.indexOf(e.charAt(n + 3));
                        i[r++] = o << 6 | u
                    }
                }
                n += 4
            }
            return new Uint8Array(i.buffer, 0, r)
        };
        var Ag = function(e) {
            var t = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
            var i = "";
            var r, n, a, s, o, u, l;
            var c = 0;
            while (c < e.length) {
                r = e[c++];
                n = c < e.length ? e[c++] : Number.NaN;
                a = c < e.length ? e[c++] : Number.NaN;
                s = r >> 2;
                o = (r & 3) << 4 | n >> 4;
                u = (n & 15) << 2 | a >> 6;
                l = a & 63;
                if (isNaN(n)) {
                    u = l = 64
                } else if (isNaN(a)) {
                    l = 64
                }
                i += t.charAt(s) + t.charAt(o) + t.charAt(u) + t.charAt(l)
            }
            return i
        };
        var xg = function(e, t) {
            try {
                var i = Cg(e, {
                    manifestUri: t
                });
                var r = undefined;
                if (i) {
                    if (i.playlists[0]) {
                        if (i.playlists[0].contentProtection["com.widevine.alpha"]) {
                            if (i.playlists[0].contentProtection["com.widevine.alpha"].attributes["cenc:default_KID"]) {
                                r = i.playlists[0].contentProtection["com.widevine.alpha"].attributes["cenc:default_KID"]
                            }
                        }
                    }
                }
                return r
            } catch (e) {
                return
            }
        };
        var Pg = {
            getFirstSegment: function(e) {
                try {
                    var t = new Sg;
                    t.push(e);
                    t.end();
                    var i = t.manifest;
                    var r = undefined;
                    if (i) {
                        if (i.playlists[0]) {
                            if (i.playlists[0].uri) {
                                r = i.playlists[0].uri
                            }
                        }
                    }
                    return r
                } catch (e) {
                    return
                }
            },
            getKid: function(e) {
                try {
                    var t = new Sg;
                    t.push(e);
                    t.end();
                    var i = t.manifest;
                    var r = undefined;
                    if (i) {
                        if (i.contentProtection["com.apple.fps.1_0"]) {
                            if (i.contentProtection["com.apple.fps.1_0"].attributes["URI"]) {
                                r = i.contentProtection["com.apple.fps.1_0"].attributes["URI"]
                            }
                        }
                    }
                    var n = undefined;
                    if (r) {
                        var a = r.indexOf("?kid=");
                        if (a >= 0) {
                            n = r.substr(a + 5)
                        }
                    }
                    return n
                } catch (e) {
                    return
                }
            }
        };
        var Og = n((function(e, t) {
            ! function(e, i) {
                i(t, W, xd, s)
            }(i, (function(e, t, i, r) {
                function n() {
                    return (n = Object.assign || function(e) {
                        for (var t = 1; t < arguments.length; t++) {
                            var i = arguments[t];
                            for (var r in i) Object.prototype.hasOwnProperty.call(i, r) && (e[r] = i[r])
                        }
                        return e
                    }).apply(this, arguments)
                }
                t = t && t.hasOwnProperty("default") ? t.default : t, i = i && i.hasOwnProperty("default") ? i.default : i, r = r && r.hasOwnProperty("default") ? r.default : r;
                var a = function(e, t) {
                        if (e === t) return !0;
                        if (e.byteLength !== t.byteLength) return !1;
                        for (var i = new DataView(e), r = new DataView(t), n = 0; n < i.byteLength; n++)
                            if (i.getUint8(n) !== r.getUint8(n)) return !1;
                        return !0
                    },
                    s = function(e) {
                        return e instanceof Uint8Array || e instanceof Uint16Array ? e.buffer : e
                    },
                    o = function() {
                        var e = i.mergeOptions.apply(i, arguments);
                        return Object.keys(e).forEach((function(t) {
                            null === e[t] && delete e[t]
                        })), e
                    },
                    u = i.xhr.httpHandler;
                u || (u = function(e, t) {
                    return function(i, r, n) {
                        if (i) e(i);
                        else {
                            if (r.statusCode >= 400 && r.statusCode <= 599) {
                                var a = n;
                                return t && (a = String.fromCharCode.apply(null, new Uint8Array(n))), void e({
                                    cause: a
                                })
                            }
                            e(null, n)
                        }
                    }
                });
                var l = function(e, t, n, a) {
                        var s = function(e) {
                                var t = String.fromCharCode.apply(null, new Uint16Array(e)),
                                    i = (new r.DOMParser).parseFromString(t, "application/xml"),
                                    n = i.getElementsByTagName("HttpHeaders")[0],
                                    a = {};
                                if (n)
                                    for (var s = n.getElementsByTagName("name"), o = n.getElementsByTagName("value"), u = 0; u < s.length; u++) a[s[u].childNodes[0].nodeValue] = o[u].childNodes[0].nodeValue;
                                var l, c = i.getElementsByTagName("Challenge")[0];
                                return c && (l = r.atob(c.childNodes[0].nodeValue)), {
                                    headers: a,
                                    message: l
                                }
                            }(t),
                            l = s.message,
                            c = o(s.headers, n.emeHeaders, e.licenseHeaders);
                        i.xhr({
                            uri: e.url,
                            method: "post",
                            headers: c,
                            body: l,
                            responseType: "arraybuffer"
                        }, u(a, !0))
                    },
                    c = function(e) {
                        var t;
                        return Object.keys(e).forEach((function(i) {
                            var a = function(e) {
                                if (e.supportedConfigurations) return e.supportedConfigurations;
                                var t = {},
                                    i = e.audioContentType,
                                    r = e.audioRobustness,
                                    a = e.videoContentType,
                                    s = e.videoRobustness,
                                    o = e.persistentState;
                                return (i || r) && (t.audioCapabilities = [n({}, i ? {
                                    contentType: i
                                } : {}, r ? {
                                    robustness: r
                                } : {})]), (a || s) && (t.videoCapabilities = [n({}, a ? {
                                    contentType: a
                                } : {}, s ? {
                                    robustness: s
                                } : {})]), o && (t.persistentState = o), [t]
                            }(e[i]);
                            t = t ? t.catch((function(e) {
                                return r.navigator.requestMediaKeySystemAccess(i, a)
                            })) : r.navigator.requestMediaKeySystemAccess(i, a)
                        })), t
                    },
                    f = function e(t) {
                        var r = t.mediaKeys,
                            n = t.initDataType,
                            a = t.initData,
                            s = t.options,
                            o = t.getLicense,
                            u = t.removeSession,
                            l = t.eventBus,
                            c = r.createSession();
                        return l.trigger("keysessioncreated"), new Promise((function(r, f) {
                            c.addEventListener("message", (function(e) {
                                "license-request" !== e.messageType && "license-renewal" !== e.messageType || o(s, e.message).then((function(e) {
                                    r(c.update(e))
                                })).catch((function(e) {
                                    f(e)
                                }))
                            }), !1), c.addEventListener("keystatuseschange", (function(r) {
                                var n = !1;
                                c.keyStatuses.forEach((function(e, t) {
                                    switch (l.trigger({
                                            keyId: t,
                                            status: e,
                                            target: c,
                                            type: "keystatuschange"
                                        }), e) {
                                        case "expired":
                                            n = !0;
                                            break;
                                        case "internal-error":
                                            i.log.warn('Key status reported as "internal-error." Leaving the session open since we don\'t have enough details to know if this error is fatal.', r)
                                    }
                                })), n && c.close().then((function() {
                                    u(a), e(t)
                                }))
                            }), !1), c.generateRequest(n, a).catch((function() {
                                f("Unable to create or initialize key session")
                            }))
                        }))
                    },
                    d = function(e, t) {
                        return function(i, r) {
                            return new Promise((function(n, a) {
                                e(i, r, (function(e, i) {
                                    t && t.trigger("licenserequestattempted"), e ? a(e) : n(i)
                                }))
                            }))
                        }
                    },
                    h = function(e, t) {
                        if ("string" == typeof t && (t = {
                                url: t
                            }), !t.url && !t.getLicense) throw new Error("Neither URL nor getLicense function provided to get license");
                        return t.url && !t.getLicense && (t.getLicense = "com.microsoft.playready" === e ? function(e) {
                            return function(t, i, r) {
                                l(e, i, t, r)
                            }
                        }(t) : function(e) {
                            return function(t, r, n) {
                                var a = o({
                                    "Content-type": "application/octet-stream"
                                }, t.emeHeaders, e.licenseHeaders);
                                i.xhr({
                                    uri: e.url,
                                    method: "POST",
                                    responseType: "arraybuffer",
                                    body: r,
                                    headers: a
                                }, u(n, !0))
                            }
                        }(t)), t
                    },
                    p = function(e) {
                        var t, i, r = e.video,
                            n = e.initDataType,
                            a = e.initData,
                            s = e.keySystemAccess,
                            o = e.options,
                            u = e.removeSession,
                            l = e.eventBus,
                            c = Promise.resolve();
                        void 0 === r.mediaKeysObject && (r.mediaKeysObject = null, r.pendingSessionData = [], c = new Promise((function(e, n) {
                            r.keySystem = s.keySystem, (i = h(s.keySystem, o.keySystems[s.keySystem])).getCertificate ? i.getCertificate(o, (function(i, r) {
                                i ? n(i) : (t = r, e())
                            })) : e(s)
                        })).then((function() {
                            return s.createMediaKeys()
                        })).then((function(e) {
                            return function(e) {
                                var t = e.video,
                                    i = e.certificate,
                                    r = e.createdMediaKeys;
                                t.mediaKeysObject = r;
                                var n = [];
                                i && n.push(r.setServerCertificate(i));
                                for (var a = 0; a < t.pendingSessionData.length; a++) {
                                    var s = t.pendingSessionData[a];
                                    n.push(f({
                                        mediaKeys: t.mediaKeysObject,
                                        initDataType: s.initDataType,
                                        initData: s.initData,
                                        options: s.options,
                                        getLicense: s.getLicense,
                                        removeSession: s.removeSession,
                                        eventBus: s.eventBus
                                    }))
                                }
                                return t.pendingSessionData = [], n.push(t.setMediaKeys(r)), Promise.all(n)
                            }({
                                video: r,
                                certificate: t,
                                createdMediaKeys: e
                            })
                        })).catch((function(e) {
                            return e ? Promise.reject(e) : Promise.reject("Failed to create and initialize a MediaKeys object")
                        })));
                        return c.then((function() {
                            var e = h(r.keySystem, o.keySystems[r.keySystem]).getLicense;
                            return function(e) {
                                var t = e.video,
                                    i = e.initDataType,
                                    r = e.initData,
                                    n = e.options,
                                    a = e.getLicense,
                                    s = e.removeSession,
                                    o = e.eventBus;
                                return t.mediaKeysObject ? f({
                                    mediaKeys: t.mediaKeysObject,
                                    initDataType: i,
                                    initData: r,
                                    options: n,
                                    getLicense: a,
                                    removeSession: s,
                                    eventBus: o
                                }) : (t.pendingSessionData.push({
                                    initDataType: i,
                                    initData: r,
                                    options: n,
                                    getLicense: a,
                                    removeSession: s,
                                    eventBus: o
                                }), Promise.resolve())
                            }({
                                video: r,
                                initDataType: n,
                                initData: a,
                                options: o,
                                getLicense: r.keySystem ? d(e, l) : null,
                                removeSession: u,
                                eventBus: l
                            })
                        }))
                    },
                    m = function(e) {
                        var t = e.initData,
                            i = e.id,
                            r = e.cert;
                        "string" == typeof i && (i = function(e) {
                            for (var t = new ArrayBuffer(2 * e.length), i = new Uint16Array(t), r = 0; r < e.length; r++) i[r] = e.charCodeAt(r);
                            return i
                        }(i));
                        var n = 0,
                            a = new ArrayBuffer(t.byteLength + 4 + i.byteLength + 4 + r.byteLength),
                            s = new DataView(a);
                        new Uint8Array(a, n, t.byteLength).set(t), n += t.byteLength, s.setUint32(n, i.byteLength, !0), n += 4;
                        var o = new Uint16Array(a, n, i.length);
                        return o.set(i), n += o.byteLength, s.setUint32(n, r.byteLength, !0), n += 4, new Uint8Array(a, n, r.byteLength).set(r), new Uint8Array(a, 0, a.byteLength)
                    },
                    v = function(e, i) {
                        return a = i, r = String.fromCharCode.apply(null, new Uint16Array(a.buffer)), (n = t.createElement("a")).href = r, n.hostname;
                        var r, n, a
                    },
                    g = function(e) {
                        var t = e.video,
                            n = e.initData,
                            a = e.options,
                            s = e.eventBus,
                            l = a.keySystems["com.apple.fps.1_0"],
                            c = l.getCertificate || function(e) {
                                return function(t, r) {
                                    var n = o(t.emeHeaders, e.certificateHeaders);
                                    i.xhr({
                                        uri: e.certificateUri,
                                        responseType: "arraybuffer",
                                        headers: n
                                    }, u((function(e, t) {
                                        e ? r(e) : r(null, new Uint8Array(t))
                                    })))
                                }
                            }(l),
                            f = l.getContentId || v,
                            d = l.getLicense || function(e) {
                                return function(t, r, n, a) {
                                    var s = o({
                                        "Content-type": "application/octet-stream"
                                    }, t.emeHeaders, e.licenseHeaders);
                                    i.xhr({
                                        uri: e.licenseUri,
                                        method: "POST",
                                        responseType: "arraybuffer",
                                        body: n,
                                        headers: s
                                    }, u(a, !0))
                                }
                            }(l);
                        return new Promise((function(e, t) {
                            c(a, (function(i, r) {
                                i ? t(i) : e(r)
                            }))
                        })).then((function(e) {
                            return function(e) {
                                var t = e.video,
                                    i = e.contentId,
                                    n = e.initData,
                                    a = e.cert,
                                    s = e.options,
                                    o = e.getLicense,
                                    u = e.eventBus;
                                return new Promise((function(e, l) {
                                    if (!t.webkitKeys) try {
                                        t.webkitSetMediaKeys(new r.WebKitMediaKeys("com.apple.fps.1_0"))
                                    } catch (e) {
                                        return void l("Could not create MediaKeys")
                                    }
                                    var c;
                                    try {
                                        c = t.webkitKeys.createSession("video/mp4", m({
                                            id: i,
                                            initData: n,
                                            cert: a
                                        }))
                                    } catch (e) {
                                        return void l("Could not create key session")
                                    }
                                    u.trigger("keysessioncreated"), c.contentId = i, c.addEventListener("webkitkeymessage", (function(e) {
                                        o(s, i, e.message, (function(e, t) {
                                            u && u.trigger("licenserequestattempted"), e ? l(e) : c.update(new Uint8Array(t))
                                        }))
                                    })), c.addEventListener("webkitkeyadded", (function() {
                                        e()
                                    })), c.addEventListener("webkitkeyerror", (function() {
                                        var e = c.error;
                                        l("KeySession error: code " + e.code + ", systemCode " + e.systemCode)
                                    }))
                                }))
                            }({
                                video: t,
                                cert: e,
                                initData: n,
                                getLicense: d,
                                options: a,
                                contentId: f(a, n),
                                eventBus: s
                            })
                        }))
                    },
                    y = function(e, t, i, r) {
                        var n = e.msKeys.createSession("video/mp4", t);
                        if (!n) throw new Error("Could not create key session.");
                        r.trigger("keysessioncreated"), n.addEventListener("mskeymessage", (function(e) {
                            ! function(e, t, i, r) {
                                var n = e.keySystems["com.microsoft.playready"];
                                if ("function" != typeof n.getKey) {
                                    "string" == typeof n ? n = {
                                        url: n
                                    } : "boolean" == typeof n && (n = {}), n.url || (n.url = i.destinationURL);
                                    var a = function(e, i) {
                                        r && r.trigger("licenserequestattempted"), e ? r.trigger({
                                            message: "Unable to request key from url: " + n.url,
                                            target: t,
                                            type: "mskeyerror"
                                        }) : t.update(new Uint8Array(i))
                                    };
                                    n.getLicense ? n.getLicense(e, i.message.buffer, a) : l(n, i.message.buffer, e, a)
                                } else n.getKey(e, i.destinationURL, i.message.buffer, (function(e, i) {
                                    e ? r.trigger({
                                        message: "Unable to get key: " + e,
                                        target: t,
                                        type: "mskeyerror"
                                    }) : t.update(i)
                                }))
                            }(i, n, e, r)
                        })), n.addEventListener("mskeyerror", (function(e) {
                            r.trigger({
                                message: "Unexpected key error from key session with code: " + n.error.code + " and systemCode: " + n.error.systemCode,
                                target: n,
                                type: "mskeyerror"
                            })
                        })), n.addEventListener("mskeyadded", (function() {
                            r.trigger({
                                target: n,
                                type: "mskeyadded"
                            })
                        }))
                    },
                    _ = function(e, t) {
                        for (var i = 0; i < e.length; i++)
                            if (e[i].initData) {
                                var r = s(e[i].initData),
                                    n = s(t);
                                if (a(r, n)) return !0
                            } return !1
                    },
                    b = function(e, t) {
                        for (var i = 0; i < e.length; i++)
                            if (e[i].initData === t) return void e.splice(i, 1)
                    },
                    T = function(e, t, i, r) {
                        if (!t || !t.keySystems) return Promise.resolve();
                        var n = e.initData;
                        return c(t.keySystems).then((function(a) {
                            var s = a.keySystem;
                            return t.keySystems[s] && t.keySystems[s].pssh && (n = t.keySystems[s].pssh), _(i, n) || !n ? Promise.resolve() : (i.push({
                                initData: n
                            }), p({
                                video: e.target,
                                initDataType: e.initDataType,
                                initData: n,
                                keySystemAccess: a,
                                options: t,
                                removeSession: b.bind(null, i),
                                eventBus: r
                            }))
                        }))
                    },
                    S = function(e, t, i) {
                        return t.keySystems && t.keySystems["com.apple.fps.1_0"] && e.initData ? g({
                            video: e.target,
                            initData: e.initData,
                            options: t,
                            eventBus: i
                        }) : Promise.resolve()
                    },
                    E = function(e, t, i, n) {
                        if (t.keySystems && t.keySystems["com.microsoft.playready"] && !i.reduce((function(e, t) {
                                return e || t.playready
                            }), !1)) {
                            var a = e.initData;
                            t.keySystems["com.microsoft.playready"] && t.keySystems["com.microsoft.playready"].pssh && (a = t.keySystems["com.microsoft.playready"].pssh), a && (i.push({
                                playready: !0,
                                initData: a
                            }), function(e) {
                                var t = e.video,
                                    i = e.initData,
                                    n = e.options,
                                    a = e.eventBus;
                                t.msKeys && delete t.msKeys;
                                try {
                                    t.msSetMediaKeys(new r.MSMediaKeys("com.microsoft.playready"))
                                } catch (e) {
                                    throw new Error("Unable to create media keys for PlayReady key system. Error: " + e.message)
                                }
                                y(t, i, n, a)
                            }({
                                video: e.target,
                                initData: a,
                                options: t,
                                eventBus: n
                            }))
                        }
                    },
                    w = function(e) {
                        return i.mergeOptions(e.currentSource(), e.eme.options)
                    },
                    k = function(e) {
                        var t = e.src();
                        t !== e.eme.activeSrc && (e.eme.activeSrc = t, e.eme.sessions = [])
                    },
                    C = function(e) {
                        return function(t) {
                            var i = {
                                code: 5
                            };
                            "string" == typeof t ? i.message = t : t && (t.message && (i.message = t.message), t.cause && (t.cause.length || t.cause.byteLength) && (i.cause = t.cause)), e.error(i)
                        }
                    },
                    I = function(e) {
                        void 0 === e && (e = {});
                        var t = this,
                            n = C(t);
                        t.ready((function() {
                            return function(e, t) {
                                if ("video" === e.$(".vjs-tech").tagName.toLowerCase())
                                    if (k(e), r.WebKitMediaKeys) {
                                        var i = function(i) {
                                            k(e), S(i, w(e), e.tech_).catch(t)
                                        };
                                        e.tech_.el_.addEventListener("webkitneedkey", (function(t) {
                                            var r = w(e).firstWebkitneedkeyTimeout || 1e3,
                                                n = e.src();
                                            e.eme.webkitneedkey_ = e.eme.webkitneedkey_ || {}, e.eme.webkitneedkey_.src !== n && (e.eme.webkitneedkey_ = {
                                                handledFirstEvent: !1,
                                                src: n
                                            }), e.eme.webkitneedkey_.handledFirstEvent ? i(t) : (e.clearTimeout(e.eme.webkitneedkey_.timeout), e.eme.webkitneedkey_.timeout = e.setTimeout((function() {
                                                e.eme.webkitneedkey_.handledFirstEvent = !0, e.eme.webkitneedkey_.timeout = null, i(t)
                                            }), r))
                                        }))
                                    } else r.MediaKeys ? e.tech_.el_.addEventListener("encrypted", (function(i) {
                                        k(e), T(i, w(e), e.eme.sessions, e.tech_).catch(t)
                                    })) : r.MSMediaKeys && (e.tech_.el_.addEventListener("msneedkey", (function(i) {
                                        k(e);
                                        try {
                                            E(i, w(e), e.eme.sessions, e.tech_)
                                        } catch (e) {
                                            t(e)
                                        }
                                    })), e.tech_.on("mskeyerror", t), e.on("dispose", (function() {
                                        e.tech_.off("mskeyerror", t)
                                    })))
                            }(t, n)
                        })), t.eme = {
                            initializeMediaKeys: function(r, a, s) {
                                void 0 === r && (r = {}), void 0 === a && (a = function() {}), void 0 === s && (s = !1);
                                var o = i.mergeOptions(t.currentSource(), e, r),
                                    u = {
                                        initDataType: "cenc",
                                        initData: null,
                                        target: t.tech_.el_
                                    };
                                if (k(t), t.tech_.el_.setMediaKeys) T(u, o, t.eme.sessions, t.tech_).then((function() {
                                    return a()
                                })).catch((function(e) {
                                    a(e), s || n(e)
                                }));
                                else if (t.tech_.el_.msSetMediaKeys) {
                                    var l = function e(i) {
                                        t.tech_.off("mskeyadded", e), t.tech_.off("mskeyerror", e), "mskeyerror" === i.type ? (a(i.target.error), s || n(i.message)) : a()
                                    };
                                    t.tech_.one("mskeyadded", l), t.tech_.one("mskeyerror", l);
                                    try {
                                        E(u, o, t.eme.sessions, t.tech_)
                                    } catch (e) {
                                        t.tech_.off("mskeyadded", l), t.tech_.off("mskeyerror", l), a(e), s || n(e)
                                    }
                                }
                            },
                            options: e
                        }
                    };
                (i.registerPlugin || i.plugin)("eme", I), e.hasSession = _, e.removeSession = b, e.handleEncryptedEvent = T, e.handleWebKitNeedKeyEvent = S, e.handleMsNeedKeyEvent = E, e.getOptions = w, e.setupSessions = k, e.emeErrorHandler = C, e.default = I, Object.defineProperty(e, "__esModule", {
                    value: !0
                })
            }))
        }));
        r(Og);
        n((function(e, t) {
            ! function(t, i) {
                e.exports = i(xd, W)
            }(i, (function(e, t) {
                function i(e) {
                    if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return e
                }
                e = e && e.hasOwnProperty("default") ? e.default : e, t = t && t.hasOwnProperty("default") ? t.default : t;
                var r = function(r) {
                    var n, a;

                    function s() {
                        var n, a = i(i(n = r.call(this) || this));
                        if (e.browser.IS_IE8)
                            for (var o in a = t.createElement("custom"), s.prototype) "constructor" !== o && (a[o] = s.prototype[o]);
                        return a.levels_ = [], a.selectedIndex_ = -1, Object.defineProperty(a, "selectedIndex", {
                            get: function() {
                                return a.selectedIndex_
                            }
                        }), Object.defineProperty(a, "length", {
                            get: function() {
                                return a.levels_.length
                            }
                        }), a || i(n)
                    }
                    a = r, (n = s).prototype = Object.create(a.prototype), n.prototype.constructor = n, n.__proto__ = a;
                    var o = s.prototype;
                    return o.addQualityLevel = function(i) {
                        var r = this.getQualityLevelById(i.id);
                        if (r) return r;
                        var n = this.levels_.length;
                        return r = new function i(r) {
                            var n = this;
                            if (e.browser.IS_IE8)
                                for (var a in n = t.createElement("custom"), i.prototype) "constructor" !== a && (n[a] = i.prototype[a]);
                            return n.id = r.id, n.label = n.id, n.width = r.width, n.height = r.height, n.bitrate = r.bandwidth, n.enabled_ = r.enabled, Object.defineProperty(n, "enabled", {
                                get: function() {
                                    return n.enabled_()
                                },
                                set: function(e) {
                                    n.enabled_(e)
                                }
                            }), n
                        }(i), "" + n in this || Object.defineProperty(this, n, {
                            get: function() {
                                return this.levels_[n]
                            }
                        }), this.levels_.push(r), this.trigger({
                            qualityLevel: r,
                            type: "addqualitylevel"
                        }), r
                    }, o.removeQualityLevel = function(e) {
                        for (var t = null, i = 0, r = this.length; i < r; i++)
                            if (this[i] === e) {
                                t = this.levels_.splice(i, 1)[0], this.selectedIndex_ === i ? this.selectedIndex_ = -1 : this.selectedIndex_ > i && this.selectedIndex_--;
                                break
                            } return t && this.trigger({
                            qualityLevel: e,
                            type: "removequalitylevel"
                        }), t
                    }, o.getQualityLevelById = function(e) {
                        for (var t = 0, i = this.length; t < i; t++) {
                            var r = this[t];
                            if (r.id === e) return r
                        }
                        return null
                    }, o.dispose = function() {
                        this.selectedIndex_ = -1, this.levels_.length = 0
                    }, s
                }(e.EventTarget);
                for (var n in r.prototype.allowedEvents_ = {
                        change: "change",
                        addqualitylevel: "addqualitylevel",
                        removequalitylevel: "removequalitylevel"
                    }, r.prototype.allowedEvents_) r.prototype["on" + n] = null;
                var a = function(t) {
                    return i = this, e.mergeOptions({}, t), n = i.qualityLevels, a = new r, i.on("dispose", (function e() {
                        a.dispose(), i.qualityLevels = n, i.off("dispose", e)
                    })), i.qualityLevels = function() {
                        return a
                    }, i.qualityLevels.VERSION = "2.1.0", a;
                    var i, n, a
                };
                return (e.registerPlugin || e.plugin)("qualityLevels", a), a.VERSION = "2.1.0", a
            }))
        }));
        n((function(e, t) {
            ! function(t, i) {
                e.exports = i(xd)
            }(i, (function(e) {
                function t(e, t) {
                    e.prototype = Object.create(t.prototype), (e.prototype.constructor = e).__proto__ = t
                }

                function i(e) {
                    if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return e
                }
                var r = (e = e && e.hasOwnProperty("default") ? e.default : e).getComponent("MenuItem"),
                    n = e.getComponent("Component"),
                    a = function(e) {
                        function i(t, i) {
                            return i.selectable = !0, i.multiSelectable = !1, e.call(this, t, i) || this
                        }
                        t(i, e);
                        var r = i.prototype;
                        return r.handleClick = function() {
                            var t = this.options_;
                            console.log("Changing quality to:", t.label), e.prototype.handleClick.call(this);
                            for (var i = this.player().qualityLevels(), r = 0; r < i.length; r++) t.index == i.length ? i[r].enabled = !0 : t.index == r ? i[r].enabled = !0 : i[r].enabled = !1
                        }, r.update = function() {
                            var e = this.player().qualityLevels().selectedIndex;
                            this.selected(this.options_.index == e)
                        }, i
                    }(r);
                n.registerComponent("SourceMenuItem", a);
                var s = e.getComponent("MenuButton"),
                    o = function(r) {
                        function n(t, n) {
                            var a;
                            a = r.call(this, t, n) || this, s.apply(i(a), arguments);
                            var o = a.player().qualityLevels();
                            if (n && n.default)
                                if ("low" == n.default)
                                    for (var u = 0; u < o.length; u++) o[u].enabled = 0 == u;
                                else if (n.default = "high")
                                for (u = 0; u < o.length; u++) o[u].enabled = u == o.length - 1;
                            return a.player().qualityLevels().on(["change", "addqualitylevel"], e.bind(i(a), a.update)), a
                        }
                        t(n, r);
                        var o = n.prototype;
                        return o.createEl = function() {
                            return e.dom.createEl("div", {
                                className: "vjs-http-source-selector vjs-menu-button vjs-menu-button-popup vjs-control vjs-button"
                            })
                        }, o.buildCSSClass = function() {
                            return s.prototype.buildCSSClass.call(this) + " vjs-icon-cog"
                        }, o.update = function() {
                            return s.prototype.update.call(this)
                        }, o.createItems = function() {
                            for (var e = [], t = this.player().qualityLevels(), i = [], r = 0; r < t.length; r++) {
                                var n = t.length - (r + 1),
                                    s = n === t.selectedIndex,
                                    o = "" + n,
                                    u = n;
                                t[n].height ? (o = t[n].height + "p", u = parseInt(t[n].height, 10)) : t[n].bitrate && (o = Math.floor(t[n].bitrate / 1e3) + " kbps", u = parseInt(t[n].bitrate, 10)), 0 <= i.indexOf(o) || (i.push(o), e.push(new a(this.player_, {
                                    label: o,
                                    index: n,
                                    selected: s,
                                    sortVal: u
                                })))
                            }
                            return 1 < t.length && e.push(new a(this.player_, {
                                label: "Auto",
                                index: t.length,
                                selected: !1,
                                sortVal: 99999
                            })), e.sort((function(e, t) {
                                return e.options_.sortVal < t.options_.sortVal ? 1 : e.options_.sortVal > t.options_.sortVal ? -1 : 0
                            })), e
                        }, n
                    }(s),
                    u = {},
                    l = e.registerPlugin || e.plugin,
                    c = function(t) {
                        var i = this;
                        this.ready((function() {
                            ! function(t, i) {
                                if (t.addClass("vjs-http-source-selector"), console.log("videojs-http-source-selector initialized!"), console.log("player.techName_:" + t.techName_), "Html5" != t.techName_) return;
                                t.on(["loadedmetadata"], (function(i) {
                                    if (t.qualityLevels(), e.log("loadmetadata event"), "undefined" == t.videojs_http_source_selector_initialized || 1 == t.videojs_http_source_selector_initialized) console.log("player.videojs_http_source_selector_initialized == true");
                                    else {
                                        console.log("player.videojs_http_source_selector_initialized == false"), t.videojs_http_source_selector_initialized = !0;
                                        var r = t.controlBar,
                                            n = r.getChild("fullscreenToggle").el();
                                        r.el().insertBefore(r.addChild("SourceMenuButton").el(), n)
                                    }
                                }))
                            }(i, e.mergeOptions(u, t))
                        })), e.registerComponent("SourceMenuButton", o), e.registerComponent("SourceMenuItem", a)
                    };
                return l("httpSourceSelector", c), c.VERSION = "1.1.6", c
            }))
        }));
        var Dg = {
            ams: "almen-almentormedia-euno.streaming.media.azure.net",
            akd: "https://almentormedia.keydelivery.northeurope.media.azure.net"
        };
        var Lg = function(e, i, r, n) {
            if (r === void 0) {
                r = true
            }
            var a = function(e, i, r, n) {
                var a = function() {
                    var e = {
                        aspectRatio: "16:9",
                        autoplay: false,
                        fluid: true,
                        preload: "metadata",
                        bigPlayButton: true,
                        controls: true
                    };
                    if (!xd.browser.IS_ANY_SAFARI) {
                        e = t({
                            html5: {
                                vhs: {
                                    overrideNative: true
                                },
                                nativeAudioTracks: false,
                                nativeVideoTracks: false
                            }
                        }, e)
                    }
                    if (n) {
                        e = t(t({}, e), n)
                    }
                    return e
                };
                return new Promise((function(t, n) {
                    var s = a();
                    var o = xd(e, s);
                    if (o) {
                        o.ready((function() {
                            h(i, r).then((function(e) {
                                if (r) {
                                    o.eme()
                                }
                                o.src(e);
                                t(o)
                            })).catch(n)
                        }))
                    } else {
                        n("Video Player is not initialized")
                    }
                }))
            };
            var s = function(e) {
                return new Promise((function(t, i) {
                    var r = "https://".concat(Dg.ams, "/").concat(e.trim(), "/main.ism/manifest(format=mpd-time-cmaf,encryption=cenc)");
                    xd.xhr.get(r, (function(e, n) {
                        if (n && !e) {
                            var a = xg(n.body, r);
                            if (a) {
                                t(a)
                            } else {
                                i("Cannot find the widevine key.")
                            }
                        } else {
                            i(e)
                        }
                    }))
                }))
            };
            var o = function(e) {
                var t = function(e) {
                    return new Promise((function(t, i) {
                        xd.xhr.get(e, (function(e, r) {
                            if (r && !e) {
                                t(r.body)
                            } else {
                                i(e)
                            }
                        }))
                    }))
                };
                return new Promise((function(i, r) {
                    var n = "https://".concat(Dg.ams, "/").concat(e.trim(), "/main.ism/manifest(format=m3u8-aapl,encryption=cbcs-aapl)");
                    t(n).then((function(n) {
                        var a = Pg.getFirstSegment(n);
                        if (a) {
                            var s = "https://".concat(Dg.ams, "/").concat(e.trim(), "/main.ism/").concat(a);
                            t(s).then((function(e) {
                                var t = Pg.getKid(e);
                                if (t) {
                                    i(t)
                                } else {
                                    r("Cannot find fairplay key")
                                }
                            })).catch(r)
                        } else {
                            r("Cannot find fairplay key")
                        }
                    })).catch(r)
                }))
            };
            var u = function(e, i) {
                return new Promise((function(r, n) {
                    var a = {
                        "com.microsoft.playready": "".concat(Dg.akd, "/PlayReady/")
                    };
                    if (!xd.browser.IS_ANY_SAFARI && !xd.browser.IS_EDGE) {
                        a = t({
                            "com.widevine.alpha": "".concat(Dg.akd, "/Widevine/?kid=").concat(e)
                        }, a)
                    }
                    r({
                        src: "https://".concat(Dg.ams, "/").concat(i.trim(), "/main.ism/manifest(format=mpd-time-cmaf,encryption=cenc)"),
                        type: "application/dash+xml",
                        keySystems: a
                    })
                }))
            };
            var l = function(e, t) {
                var i = function(e, t) {
                    return new Promise((function(i, r) {
                        xd.xhr({
                            url: "".concat(Dg.akd, "/FairPlay/?kid=").concat(e),
                            method: "POST",
                            responseType: "text",
                            body: "spc=".concat(Ag(t), "&assetId=").concat(Dg.ams),
                            headers: {
                                "Content-type": "application/x-www-form-urlencoded"
                            }
                        }, (function(e, t, n) {
                            if (e) {
                                r(e)
                            } else {
                                n.trim();
                                var a = n.indexOf("<ckc>"),
                                    s = n.indexOf("</ckc>");
                                a += 5;
                                var o = n.substr(a, s - a);
                                i(Ig(o))
                            }
                        }))
                    }))
                };
                return new Promise((function(r, n) {
                    r({
                        src: "https://".concat(Dg.ams, "/").concat(t.trim(), "/main.ism/manifest(format=m3u8-aapl,encryption=cbcs-aapl)"),
                        type: "application/x-mpegURL",
                        keySystems: {
                            "com.apple.fps.1_0": {
                                certificateUri: "https://mediafairplaycertnew.z16.web.core.windows.net/fairplay.der",
                                getLicense: function(t, r, n, a) {
                                    i(e, n).then((function(e) {
                                        a(null, e)
                                    })).catch((function(e) {
                                        a(e)
                                    }))
                                }
                            }
                        }
                    })
                }))
            };
            var c = function(e) {
                if (xd.browser.IS_ANY_SAFARI) {
                    return {
                        src: "https://".concat(Dg.ams, "/").concat(e.trim(), "/main.ism/manifest(format=m3u8-aapl)"),
                        type: "application/x-mpegURL"
                    }
                } else {
                    return {
                        src: "https://".concat(Dg.ams, "/").concat(e.trim(), "/main.ism/manifest(format=mpd-time-cmaf)"),
                        type: "application/dash+xml"
                    }
                }
            };
            var f = function(e) {
                return new Promise((function(t, i) {
                    s(e).then((function(r) {
                        u(r, e).then(t).catch(i)
                    })).catch(i)
                }))
            };
            var d = function(e) {
                return new Promise((function(t, i) {
                    o(e).then((function(r) {
                        l(r, e).then(t).catch(i)
                    })).catch(i)
                }))
            };
            var h = function(e, t) {
                return new Promise((function(i, r) {
                    if (t) {
                        if (xd.browser.IS_ANY_SAFARI) {
                            d(e).then(i).catch(r)
                        } else {
                            f(e).then(i).catch(r)
                        }
                    } else {
                        i(c(e))
                    }
                }))
            };
            return new Promise((function(t, s) {
                if (e && i) {
                    a(e, i, r, n).then(t).catch(s)
                } else {
                    s("Required arguments (videoPlayerContainer) and (videoId) should be provided")
                }
            }))
        };
        e.InitPlayer = Lg;
        e.videojs = xd;
        Object.defineProperty(e, "__esModule", {
            value: true
        });
        // initializePlayer(e);
        console.log("player object created");
        return e
        // initializePlayer(e)
    }({})
    var videoContainer = document.getElementById('video-container');
    if(videoContainer){
        azure_id = $("#video-container").attr("azure-id");
        console.log(azure_id);
        almVideoPlayer.InitPlayer(videoContainer, azure_id, true, {
            controls: true,
            bigPlayButton: true
        }).then((player) => {
            console.log(player)
        }).catch((e) => {
            console.log(e);
        })
    }
}